
/*********************************************************************/
/*        This is a generated C++ file.                              */
/*        Generated by PatternDSL.                                   */
/*        Contains the standard library header                       */
/*********************************************************************/
#include <vector>
#include <string>
#include <chrono>
#include <fstream>
#include <sstream>

#ifndef PATTERNLIB_HXX
#define PATTERNLIB_HXX

extern int8_t m_zdd;
extern double m_ss4o3;
extern int8_t m_xdd;
extern double m_monoq_limiter_mult;
extern int8_t m_zd;
extern int32_t xIdx;
extern double m_refdens;
extern double m_eosvmax;
extern double m_pmin;
extern int8_t m_dyy;
extern int8_t m_y;
extern int8_t m_x;
extern double m_dvovmax;
extern int8_t m_z;
extern int8_t its;
extern double m_q_cut;
extern double m_eosvmin;
extern int8_t m_yd;
extern double m_qstop;
extern double m_qqc_monoq;
extern double m_emin;
extern int8_t m_delx_zeta;
extern int8_t m_delv_xi;
extern int32_t VolumeError;
extern double m_monoq_max_slope;
extern int8_t m_delx_eta;
extern int8_t showProg;
extern double m_hgcoef;
extern int32_t QStopError;
extern int32_t yIdx;
extern int8_t m_dxx;
extern double m_e_cut;
extern int8_t m_ydd;
extern int8_t m_xd;
extern int8_t m_fz;
extern int8_t m_fx;
extern int8_t m_fy;
extern int8_t m_delv_zeta;
extern double m_p_cut;
extern int8_t quiet;
extern int32_t zIdx;
extern int8_t m_delv_eta;
extern double m_qqc;
extern double m_u_cut;
extern double m_v_cut;
extern double m_qlc_monoq;
extern int8_t help;
extern int8_t m_delx_xi;
extern int8_t m_dzz;


inline long long get_time() {
    auto start = std::chrono::high_resolution_clock::now();
    long long microseconds = std::chrono::duration_cast<std::chrono::microseconds>(start.time_since_epoch()).count();
    return microseconds;
}

inline long long get_time_nano() {
    auto start = std::chrono::high_resolution_clock::now();
    long long nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(start.time_since_epoch()).count();
    return nanoseconds;
}

std::vector<std::string> split(std::string base) ;

template<typename T>
std::vector<double> d_read(T file, long long size) {
	std::vector<double> v(size);
	std::string line;
	std::ifstream fin(file);
	long long i = 0;
	if (fin.is_open()) {
	    while(std::getline(fin,line)) {
	        for(auto x : split(line)) {
            	std::istringstream iss(x);
            	double in;
            	if(!(iss >> in)) {break;}
            	v[i] = in;
            	i++;
            }
	    }
	    fin.close();
	} else {
	    std::cout << "Unable to open file" << std::endl;
	}
	if (i != size) {
	    std::cout << "Array size mismatch" << std::endl;
	    std::cout << "Expected:" << size << std::endl;
        std::cout << "Provided:" << i << std::endl;
	}
	return v;
}

template<typename T>
std::vector<float> f_read(T file, long long size) {
	std::vector<float> v(size);
	std::string line;
	std::ifstream fin(file);
	long long i = 0;
	if (fin.is_open()) {
	while(std::getline(fin,line)) {
	    for(auto x : split(line)) {
            std::istringstream iss(x);
            float in;
            if(!(iss >> in)) {break;}
            v[i] = in;
            i++;
        }
	}
	    fin.close();
	} else {
	    std::cout << "Unable to open file" << std::endl;
	}
	if (i != size) {
	    std::cout << "Array size mismatch" << std::endl;
	    std::cout << "Expected:" << size << std::endl;
        std::cout << "Provided:" << i << std::endl;
	}
	return v;
}
template<typename T>
std::vector<int> i_read(T file, long long size) {
	std::vector<int> v(size);
	std::string line;
	std::ifstream fin(file);
	long long i = 0;
	if (fin.is_open()) {
	while(std::getline(fin,line)) {
	    for(auto x : split(line)) {
            std::istringstream iss(x);
            int in;
            if(!(iss >> in)) {break;}
            v[i] = in;
            i++;
        }
	}
	    fin.close();
	} else {
	    std::cout << "Unable to open file" << std::endl;
	}
	if (i != size) {
	    std::cout << "Array size mismatch" << std::endl;
	    std::cout << "Expected:" << size << std::endl;
        std::cout << "Provided:" << i << std::endl;
	}
	return v;
}
template<typename T>
std::vector<std::string> read(T file, long long size) {
	std::vector<std::string> v(size);
	std::string line;
	std::ifstream fin(file);
	long long i = 0;
	if (fin.is_open()) {
	while(std::getline(fin,line)) {
	    for(auto x : split(line)) {
            std::istringstream iss(x);
            std::string in;
            if(!(iss >> in)) {break;}
            v[i] = in;
            i++;
        }
	}
	    fin.close();
	} else {
	    std::cout << "Unable to open file" << std::endl;
	}
	if (i != size) {
	    std::cout << "Array size mismatch" << std::endl;
	    std::cout << "Expected:" << size << std::endl;
        std::cout << "Provided:" << i << std::endl;
	}
	return v;
}

#endif