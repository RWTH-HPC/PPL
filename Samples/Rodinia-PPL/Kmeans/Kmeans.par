Kmeans {

include "../math"

var Int K = 100
var Int N = 100000
var Int NITERS = 100

map determine_cemtroids([Float] points_x, [Float] points_y, [Float] centroids) : [Int] assignment {
	assignment[INDEX] = assign_centroid(points_x[INDEX], points_y[INDEX], INDEX, centroids)
} 

seq assign_centroid(Float point_x, Float point_y, Int point, [Float] centroids) : Int{
	var Float opt_dist = MAX_FLOAT
	var Int result = 0
	for var Int i = 0; i < K; i++ {
		var Float dist = (point_x - centroids[2 * i]) * (point_x - centroids[2 * i]) + (point_y - centroids[2 * i + 1]) * (point_y - centroids[2 * i + 1])
		if dist < opt_dist {
			opt_dist = dist
			result = i
		}
	}
	return result
}

map update_centroids([Float] points_x, [Float] points_y, [Int] assignment) : [Float] centroids {
	var Float sum_x = assigned_sum(points_x, assignment, INDEX)
	var Float sum_y = assigned_sum(points_y, assignment, INDEX)
	var Int count = assigned_count(points_x, assignment, INDEX)
	
	if count != 0 {
		centroids[2 * INDEX] = sum_x / count
		centroids[2 * INDEX + 1] = sum_y / count
	}
}

seq assigned_sum([Float] points, [Int] assignment, Int centroid) : Float {
	var Float res = 0
	for var Int i = 0; i < N; i++ {
		if assignment[i] == centroid {
			res += points[i]
		}
	}
	return res
}

seq assigned_count([Float] points, [Int] assignment, Int centroid) : Int {
	var Int res = 0
	for var Int i = 0; i < N; i++ {
		if assignment[i] == centroid {
			res++
		}
	}
	return res
}

map copy([Float] input) : [Float] output {
	output[INDEX] = input[INDEX]
}

seq k_means(Int niters, [Float] points_x, [Float] points_y, [Float] centroids):[Float] {
	var [Int] assignment = init_List([100000])
	var [Float] result_old = init_List([200])
	var [Float] result = init_List([200])
	
	result = copy<<<>>>(centroids)
	
    for var Int iter = 0; iter < niters; iter++ {
        // determine nearest centroids
        assignment = determine_cemtroids<<<>>>(points_x, points_y, result)

        // update centroid positions
        result = update_centroids<<<>>>(points_x, points_y, assignment)
		
    }
	
	return result
}

seq main(): Int {
    var [Float] points_x = init_List([100000])
	var [Float] points_y = init_List([100000])
    var [Float] centroids = init_List([200])
    var [Int] assignment = init_List([100000])

    points_x = read("point_x.txt")
	points_y = read("point_y.txt")
	centroids = read("centroids.txt")

    
    centroids = k_means(NITERS, points_x, points_y, centroids)
    
	

    write("result.txt", {centroids})

    return 0
}

}
