from graphviz import Digraph


dot = Digraph(comment='Abstract Pattern Tree')

dot  #doctest: +ELLIPSIS


dot.node('nCXiAs8QYacsAcLHehum', 'Main')
dot.node('9i42Z53No2GEnz1Bf47o', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('lHNPbkiCxabMPB5FTUjr', 'Map: init', style="filled", fillcolor="orangered")
dot.node('gzfMJaqopk0TKmUQHkyI', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('xGoA03CrC8NYNnRWFS4a', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('v9x4XlRiPlOJMcSez4IE', 'Map: init', style="filled", fillcolor="orangered")
dot.node('uSxhWYCVKSBHQgy7rQAa', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('50W64mgpNnr69lqBvA7J', 'Map: init', style="filled", fillcolor="orangered")
dot.node('TsRkMRVExS8oWopBQfQh', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('HO5zJVVmuiLjOvGy4jS3', 'For Loop', style="filled", fillcolor="cyan")
dot.node('Lqv4izC9tbfgs3rXmiSB', 'Map: addRand', style="filled", fillcolor="orangered")
dot.node('EG7IzfUGxfs4ELLE9Yt6', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('9yLWfZxf7UMbepG4rdx0', 'Map: addRand', style="filled", fillcolor="orangered")
dot.node('USoAxXbFCuipMUy5b1ug', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('VIbKbiOl1Ei10s4FJMZx', 'Map: compLikelihood', style="filled", fillcolor="orangered")
dot.node('ZsQocujgBMKWS2ntmx0Z', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('zSnV6dKX0K2Cl2EDLKbj', 'Map: updateWeights', style="filled", fillcolor="orangered")
dot.node('z2mJOVkvc6fTBcntuid9', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('erWD9MDVTeRnFTKh3qSh', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('oGQIMNDYx4sRdak9bBWS', 'Reduction: sum', style="filled", fillcolor="orangered")
dot.node('dRRYY9spvs4hapjkZ3zx', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('BKJE0DqAQM0nJ9iti4vi', 'Map: normalize', style="filled", fillcolor="orangered")
dot.node('UEY0niBFF5CEz4Nna9Q6', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('qoVyfYCIMeCSmzyegDyx', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('su5YrsuKxXF90SYPaoNT', 'Reduction: location_estimation', style="filled", fillcolor="orangered")
dot.node('vIUxacPpaJD52lrlgjv6', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('7LHVfUynsQHLGvP6OHhr', 'Reduction: location_estimation', style="filled", fillcolor="orangered")
dot.node('EUTacuP29rmxev6gExaH', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('SsC3JgiZiaHELKa9f5Jk', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('MYH7XE7JZsOsoNh4W75D', 'Map: u_init', style="filled", fillcolor="orangered")
dot.node('F4PWGzxRzf4jVlOAJedY', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('3NAL1ERD9TtcNzPku70S', 'Map: find_particle', style="filled", fillcolor="orangered")
dot.node('tgmQsGq1mHgjvKrlGflf', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('KAaxqfxFhEA4mGiUodL3', 'Map: find_particle', style="filled", fillcolor="orangered")
dot.node('7ueA9QqjvEftXVohs4cv', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('q4kgZTl5jcI0apVckhOY', 'Map: set', style="filled", fillcolor="orangered")
dot.node('kimElomqxApvcuXh8WWm', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('YTqEhE0BIvR1l3XHCnTT', 'Map: set', style="filled", fillcolor="orangered")
dot.node('IniLzVsepuxdcS6QEBmH', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('45zO8b6mvzizENUteg7W', 'Map: init', style="filled", fillcolor="orangered")
dot.node('p4cN2BZI9xEPGOM5RUjC', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('bCzlNRU85yHL2Fnu6aEU', 'Serial', style="filled", fillcolor="lawngreen")
dot.edge('nCXiAs8QYacsAcLHehum', '9i42Z53No2GEnz1Bf47o')
dot.edge('nCXiAs8QYacsAcLHehum', 'lHNPbkiCxabMPB5FTUjr')
dot.edge('lHNPbkiCxabMPB5FTUjr', 'gzfMJaqopk0TKmUQHkyI')
dot.edge('nCXiAs8QYacsAcLHehum', 'xGoA03CrC8NYNnRWFS4a')
dot.edge('nCXiAs8QYacsAcLHehum', 'v9x4XlRiPlOJMcSez4IE')
dot.edge('v9x4XlRiPlOJMcSez4IE', 'uSxhWYCVKSBHQgy7rQAa')
dot.edge('nCXiAs8QYacsAcLHehum', '50W64mgpNnr69lqBvA7J')
dot.edge('50W64mgpNnr69lqBvA7J', 'TsRkMRVExS8oWopBQfQh')
dot.edge('nCXiAs8QYacsAcLHehum', 'HO5zJVVmuiLjOvGy4jS3')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'Lqv4izC9tbfgs3rXmiSB')
dot.edge('Lqv4izC9tbfgs3rXmiSB', 'EG7IzfUGxfs4ELLE9Yt6')
dot.edge('HO5zJVVmuiLjOvGy4jS3', '9yLWfZxf7UMbepG4rdx0')
dot.edge('9yLWfZxf7UMbepG4rdx0', 'USoAxXbFCuipMUy5b1ug')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'VIbKbiOl1Ei10s4FJMZx')
dot.edge('VIbKbiOl1Ei10s4FJMZx', 'ZsQocujgBMKWS2ntmx0Z')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'zSnV6dKX0K2Cl2EDLKbj')
dot.edge('zSnV6dKX0K2Cl2EDLKbj', 'z2mJOVkvc6fTBcntuid9')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'erWD9MDVTeRnFTKh3qSh')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'oGQIMNDYx4sRdak9bBWS')
dot.edge('oGQIMNDYx4sRdak9bBWS', 'dRRYY9spvs4hapjkZ3zx')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'BKJE0DqAQM0nJ9iti4vi')
dot.edge('BKJE0DqAQM0nJ9iti4vi', 'UEY0niBFF5CEz4Nna9Q6')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'qoVyfYCIMeCSmzyegDyx')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'su5YrsuKxXF90SYPaoNT')
dot.edge('su5YrsuKxXF90SYPaoNT', 'vIUxacPpaJD52lrlgjv6')
dot.edge('HO5zJVVmuiLjOvGy4jS3', '7LHVfUynsQHLGvP6OHhr')
dot.edge('7LHVfUynsQHLGvP6OHhr', 'EUTacuP29rmxev6gExaH')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'SsC3JgiZiaHELKa9f5Jk')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'MYH7XE7JZsOsoNh4W75D')
dot.edge('MYH7XE7JZsOsoNh4W75D', 'F4PWGzxRzf4jVlOAJedY')
dot.edge('HO5zJVVmuiLjOvGy4jS3', '3NAL1ERD9TtcNzPku70S')
dot.edge('3NAL1ERD9TtcNzPku70S', 'tgmQsGq1mHgjvKrlGflf')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'KAaxqfxFhEA4mGiUodL3')
dot.edge('KAaxqfxFhEA4mGiUodL3', '7ueA9QqjvEftXVohs4cv')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'q4kgZTl5jcI0apVckhOY')
dot.edge('q4kgZTl5jcI0apVckhOY', 'kimElomqxApvcuXh8WWm')
dot.edge('HO5zJVVmuiLjOvGy4jS3', 'YTqEhE0BIvR1l3XHCnTT')
dot.edge('YTqEhE0BIvR1l3XHCnTT', 'IniLzVsepuxdcS6QEBmH')
dot.edge('HO5zJVVmuiLjOvGy4jS3', '45zO8b6mvzizENUteg7W')
dot.edge('45zO8b6mvzizENUteg7W', 'p4cN2BZI9xEPGOM5RUjC')
dot.edge('nCXiAs8QYacsAcLHehum', 'bCzlNRU85yHL2Fnu6aEU')



print(dot.source)
dot.render('particle_Pattern_Nesting_Tree.gv', view=True)