from graphviz import Digraph


dot = Digraph(comment='Abstract Pattern Tree')

dot  #doctest: +ELLIPSIS


dot.node('g1mjxVanVmcEWO4dAFRV', 'Main')
dot.node('mE7FPrgoBKIxjceVMi6P', 'Expression')
dot.node('Ri9qxOm6K4x4ALY7oD1P', 'Call: init_List', style="filled", fillcolor="green")
dot.node('7riGaxEfj1hZCUEQGevO', 'Expression')
dot.node('9qsYP3WsEcHQeBbeDyeM', 'Call: init_List', style="filled", fillcolor="green")
dot.node('lO5H9Wl6743UeNuxXqhd', 'Expression')
dot.node('UYVezZfQlgydbWbBAfGf', 'Call: init_List', style="filled", fillcolor="green")
dot.node('B05LQ245EKOsegK1IJbO', 'Expression')
dot.node('0V2LyWKjYrV4Nlj8etpO', 'Call: init_List', style="filled", fillcolor="green")
dot.node('mBor6EW6igqBkGoNGdZW', 'Expression')
dot.node('9hylnkIgr61bQrEiy612', 'Call: init_List', style="filled", fillcolor="green")
dot.node('ZWGRl1SloSDIke0SKNKD', 'Expression')
dot.node('9g3PTYcGkm6ANaO8GpyU', 'Call: init_List', style="filled", fillcolor="green")
dot.node('ZmyUxaaD45B9llZmiHQv', 'Simple Expression')
dot.node('tDXjrKu1O9Lh7nxcSUb3', 'While-Loop')
dot.node('NDd6py040FkRmrFs9l5K', 'Expression')
dot.node('l4gQTF9Q5HTdvSDiN96d', 'For-Loop')
dot.node('kBefpA9hMDvOxmoW6JRl', 'Expression')
dot.node('QJbpGvRuUWJ6KLg6TMXy', 'Expression')
dot.node('ap4GXtXoZp8an7IA16N5', 'Expression')
dot.node('MrrmXmNZs0YNyyaCrl5K', 'Branch')
dot.node('rUWg7vJjl2YgC3sD5AaA', 'Case')
dot.node('PmH01gPLa6jcOUZ1AY6e', 'Expression')
dot.node('sWZ5FRJJaRAUIBn6iejE', 'For-Loop')
dot.node('WtuZRy4mptvtOQTopFrd', 'Expression')
dot.node('hJAf1ebAUTGBysOk9kJJ', 'Expression')
dot.node('KcDnPuXr2GrF6WXgoXop', 'Expression')
dot.node('D5Hrchj2zjeiBXAyzlJC', 'Simple Expression')
dot.node('0DGfpLJgOa87f2Wnlvx4', 'Branch')
dot.node('2BIqSXE1zo9qY3Vv6uuS', 'Case')
dot.node('yT6byo87DxkAHXCqkPeT', 'Expression')
dot.node('UzaUTRWsjrXPqSKFxGQk', 'Simple Expression')
dot.node('Yo6qBVJYeVHKMFGSYlGm', 'Map: update_visit', style="filled", fillcolor="red")
dot.node('9b636VlvWK7UB6p1o4CU', 'Expression')
dot.node('TSM3dUu5QUgg2K9JKQgZ', 'Simple Expression')
dot.node('9tbHidTheTh02c9V28YS', 'Simple Expression')
dot.node('PkezyvS6UH3yl0bKiNpP', 'Reduction: isFinished', style="filled", fillcolor="red")
dot.node('r3REaxazxXzYZnx7kvsy', 'Expression')
dot.node('AtoJ80ljTsRJaTyAvrI5', 'Simple Expression')
dot.node('seTXYu7IOJc6flm72M1W', 'Branch')
dot.node('rfPpWm4Wmv7jaR45j8Dm', 'Case')
dot.node('Q52fIYTaPjrjkPkyQX5q', 'Expression')
dot.node('egCbekf9i7GWFEGRZzEz', 'Simple Expression')
dot.node('Ey3W8fIK0WJdLHclIriv', 'Simple Expression')
dot.node('MR4A27dCGpVEs8YCNcg7', 'Branch')
dot.node('skDnrNbd01Fr3Q616Dd3', 'Case')
dot.node('Z47ro946tbeycqX0HZc3', 'Expression')
dot.node('e2fExeNUqIqnO52Rj8xP', 'Simple Expression')
dot.node('I4f0YQ4hVf487CzZWzHE', 'Map: reset', style="filled", fillcolor="red")
dot.node('ugx8874k2Sxiqu0SThzP', 'Expression')
dot.node('FTIqTNASuG146NOAqz0x', 'Simple Expression')
dot.node('O99GiNUXSFKXMuMijPUj', 'Simple Expression')
dot.node('iKO6QHmIx6eykyGZitcf', 'Return')
dot.node('ZQ7FVsHQqCq1vXgiMLlZ', 'Expression')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'mE7FPrgoBKIxjceVMi6P')
dot.edge('g1mjxVanVmcEWO4dAFRV', '7riGaxEfj1hZCUEQGevO')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'lO5H9Wl6743UeNuxXqhd')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'B05LQ245EKOsegK1IJbO')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'mBor6EW6igqBkGoNGdZW')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'ZWGRl1SloSDIke0SKNKD')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'ZmyUxaaD45B9llZmiHQv')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'tDXjrKu1O9Lh7nxcSUb3')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'O99GiNUXSFKXMuMijPUj')
dot.edge('g1mjxVanVmcEWO4dAFRV', 'iKO6QHmIx6eykyGZitcf')
dot.edge('mE7FPrgoBKIxjceVMi6P', 'Ri9qxOm6K4x4ALY7oD1P')
dot.edge('7riGaxEfj1hZCUEQGevO', '9qsYP3WsEcHQeBbeDyeM')
dot.edge('lO5H9Wl6743UeNuxXqhd', 'UYVezZfQlgydbWbBAfGf')
dot.edge('B05LQ245EKOsegK1IJbO', '0V2LyWKjYrV4Nlj8etpO')
dot.edge('mBor6EW6igqBkGoNGdZW', '9hylnkIgr61bQrEiy612')
dot.edge('ZWGRl1SloSDIke0SKNKD', '9g3PTYcGkm6ANaO8GpyU')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', 'NDd6py040FkRmrFs9l5K')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', 'l4gQTF9Q5HTdvSDiN96d')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', 'Yo6qBVJYeVHKMFGSYlGm')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', '9tbHidTheTh02c9V28YS')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', 'PkezyvS6UH3yl0bKiNpP')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', 'MR4A27dCGpVEs8YCNcg7')
dot.edge('tDXjrKu1O9Lh7nxcSUb3', 'I4f0YQ4hVf487CzZWzHE')
dot.edge('l4gQTF9Q5HTdvSDiN96d', 'kBefpA9hMDvOxmoW6JRl')
dot.edge('l4gQTF9Q5HTdvSDiN96d', 'QJbpGvRuUWJ6KLg6TMXy')
dot.edge('l4gQTF9Q5HTdvSDiN96d', 'ap4GXtXoZp8an7IA16N5')
dot.edge('l4gQTF9Q5HTdvSDiN96d', 'MrrmXmNZs0YNyyaCrl5K')
dot.edge('MrrmXmNZs0YNyyaCrl5K', 'rUWg7vJjl2YgC3sD5AaA')
dot.edge('rUWg7vJjl2YgC3sD5AaA', 'PmH01gPLa6jcOUZ1AY6e')
dot.edge('rUWg7vJjl2YgC3sD5AaA', 'sWZ5FRJJaRAUIBn6iejE')
dot.edge('sWZ5FRJJaRAUIBn6iejE', 'WtuZRy4mptvtOQTopFrd')
dot.edge('sWZ5FRJJaRAUIBn6iejE', 'hJAf1ebAUTGBysOk9kJJ')
dot.edge('sWZ5FRJJaRAUIBn6iejE', 'KcDnPuXr2GrF6WXgoXop')
dot.edge('sWZ5FRJJaRAUIBn6iejE', 'D5Hrchj2zjeiBXAyzlJC')
dot.edge('sWZ5FRJJaRAUIBn6iejE', '0DGfpLJgOa87f2Wnlvx4')
dot.edge('0DGfpLJgOa87f2Wnlvx4', '2BIqSXE1zo9qY3Vv6uuS')
dot.edge('2BIqSXE1zo9qY3Vv6uuS', 'yT6byo87DxkAHXCqkPeT')
dot.edge('2BIqSXE1zo9qY3Vv6uuS', 'UzaUTRWsjrXPqSKFxGQk')
dot.edge('Yo6qBVJYeVHKMFGSYlGm', '9b636VlvWK7UB6p1o4CU')
dot.edge('Yo6qBVJYeVHKMFGSYlGm', 'TSM3dUu5QUgg2K9JKQgZ')
dot.edge('PkezyvS6UH3yl0bKiNpP', 'r3REaxazxXzYZnx7kvsy')
dot.edge('PkezyvS6UH3yl0bKiNpP', 'AtoJ80ljTsRJaTyAvrI5')
dot.edge('PkezyvS6UH3yl0bKiNpP', 'seTXYu7IOJc6flm72M1W')
dot.edge('PkezyvS6UH3yl0bKiNpP', 'Ey3W8fIK0WJdLHclIriv')
dot.edge('seTXYu7IOJc6flm72M1W', 'rfPpWm4Wmv7jaR45j8Dm')
dot.edge('rfPpWm4Wmv7jaR45j8Dm', 'Q52fIYTaPjrjkPkyQX5q')
dot.edge('rfPpWm4Wmv7jaR45j8Dm', 'egCbekf9i7GWFEGRZzEz')
dot.edge('MR4A27dCGpVEs8YCNcg7', 'skDnrNbd01Fr3Q616Dd3')
dot.edge('skDnrNbd01Fr3Q616Dd3', 'Z47ro946tbeycqX0HZc3')
dot.edge('skDnrNbd01Fr3Q616Dd3', 'e2fExeNUqIqnO52Rj8xP')
dot.edge('I4f0YQ4hVf487CzZWzHE', 'ugx8874k2Sxiqu0SThzP')
dot.edge('I4f0YQ4hVf487CzZWzHE', 'FTIqTNASuG146NOAqz0x')
dot.edge('iKO6QHmIx6eykyGZitcf', 'ZQ7FVsHQqCq1vXgiMLlZ')



print(dot.source)
dot.render('bfs_Complete_Tree.gv', view=True)