needle {
include "../math"

var Int LIMIT = 0-999

var Int rand_mod = 26398
var Int rand_add = 84651
var Int rand_mult = 42175
	
seq rand(Int seed): Int {
	return (seed * rand_mult + rand_add) % rand_mod
}

var [[Int]] blosum62 = [
[ 4, 0-1, 0-2, 0-2,  0, 0-1, 0-1,  0, 0-2, 0-1, 0-1, 0-1, 0-1, 0-2, 0-1,  1,  0, 0-3, 0-2,  0, 0-2, 0-1,  0, 0-4],
[0-1,  5,  0, 0-2, 0-3,  1,  0, 0-2,  0, 0-3, 0-2,  2, 0-1, 0-3, 0-2, 0-1, 0-1, 0-3, 0-2, 0-3, 0-1,  0, 0-1, 0-4],
[0-2,  0,  6,  1, 0-3,  0,  0,  0,  1, 0-3, 0-3,  0, 0-2, 0-3, 0-2,  1,  0, 0-4, 0-2, 0-3,  3,  0, 0-1, 0-4],
[0-2, 0-2,  1,  6, 0-3,  0,  2, 0-1, 0-1, 0-3, 0-4, 0-1, 0-3, 0-3, 0-1,  0, 0-1, 0-4, 0-3, 0-3,  4,  1, 0-1, 0-4],
[ 0, 0-3, 0-3, 0-3,  9, 0-3, 0-4, 0-3, 0-3, 0-1, 0-1, 0-3, 0-1, 0-2, 0-3, 0-1, 0-1, 0-2, 0-2, 0-1, 0-3, 0-3, 0-2, 0-4],
[0-1,  1,  0,  0, 0-3,  5,  2, 0-2,  0, 0-3, 0-2,  1,  0, 0-3, 0-1,  0, 0-1, 0-2, 0-1, 0-2,  0,  3, 0-1, 0-4],
[0-1,  0,  0,  2, 0-4,  2,  5, 0-2,  0, 0-3, 0-3,  1, 0-2, 0-3, 0-1,  0, 0-1, 0-3, 0-2, 0-2,  1,  4, 0-1, 0-4],
[ 0, 0-2,  0, 0-1, 0-3, 0-2, 0-2,  6, 0-2, 0-4, 0-4, 0-2, 0-3, 0-3, 0-2,  0, 0-2, 0-2, 0-3, 0-3, 0-1, 0-2, 0-1, 0-4],
[0-2,  0,  1, 0-1, 0-3,  0,  0, 0-2,  8, 0-3, 0-3, 0-1, 0-2, 0-1, 0-2, 0-1, 0-2, 0-2,  2, 0-3,  0,  0, 0-1, 0-4],
[0-1, 0-3, 0-3, 0-3, 0-1, 0-3, 0-3, 0-4, 0-3,  4,  2, 0-3,  1,  0, 0-3, 0-2, 0-1, 0-3, 0-1,  3, 0-3, 0-3, 0-1, 0-4],
[0-1, 0-2, 0-3, 0-4, 0-1, 0-2, 0-3, 0-4, 0-3,  2,  4, 0-2,  2,  0, 0-3, 0-2, 0-1, 0-2, 0-1,  1, 0-4, 0-3, 0-1, 0-4],
[0-1,  2,  0, 0-1, 0-3,  1,  1, 0-2, 0-1, 0-3, 0-2,  5, 0-1, 0-3, 0-1,  0, 0-1, 0-3, 0-2, 0-2,  0,  1, 0-1, 0-4],
[0-1, 0-1, 0-2, 0-3, 0-1,  0, 0-2, 0-3, 0-2,  1,  2, 0-1,  5,  0, 0-2, 0-1, 0-1, 0-1, 0-1,  1, 0-3, 0-1, 0-1, 0-4],
[0-2, 0-3, 0-3, 0-3, 0-2, 0-3, 0-3, 0-3, 0-1,  0,  0, 0-3,  0,  6, 0-4, 0-2, 0-2,  1,  3, 0-1, 0-3, 0-3, 0-1, 0-4],
[0-1, 0-2, 0-2, 0-1, 0-3, 0-1, 0-1, 0-2, 0-2, 0-3, 0-3, 0-1, 0-2, 0-4,  7, 0-1, 0-1, 0-4, 0-3, 0-2, 0-2, 0-1, 0-2, 0-4],
[ 1, 0-1,  1,  0, 0-1,  0,  0,  0, 0-1, 0-2, 0-2,  0, 0-1, 0-2, 0-1,  4,  1, 0-3, 0-2, 0-2,  0,  0,  0, 0-4],
[ 0, 0-1,  0, 0-1, 0-1, 0-1, 0-1, 0-2, 0-2, 0-1, 0-1, 0-1, 0-1, 0-2, 0-1,  1,  5, 0-2, 0-2,  0, 0-1, 0-1,  0, 0-4],
[0-3, 0-3, 0-4, 0-4, 0-2, 0-2, 0-3, 0-2, 0-2, 0-3, 0-2, 0-3, 0-1,  1, 0-4, 0-3, 0-2, 11,  2, 0-3, 0-4, 0-3, 0-2, 0-4],
[0-2, 0-2, 0-2, 0-3, 0-2, 0-1, 0-2, 0-3,  2, 0-1, 0-1, 0-2, 0-1,  3, 0-3, 0-2, 0-2,  2,  7, 0-1, 0-3, 0-2, 0-1, 0-4],
[ 0, 0-3, 0-3, 0-3, 0-1, 0-2, 0-2, 0-3, 0-3,  3,  1, 0-2,  1, 0-1, 0-2, 0-2,  0, 0-3, 0-1,  4, 0-3, 0-2, 0-1, 0-4],
[0-2, 0-1,  3,  4, 0-3,  0,  1, 0-1,  0, 0-3, 0-4,  0, 0-3, 0-3, 0-2,  0, 0-1, 0-4, 0-3, 0-3,  4,  1, 0-1, 0-4],
[0-1,  0,  0,  1, 0-3,  3,  4, 0-2,  0, 0-3, 0-3,  1, 0-1, 0-3, 0-1,  0, 0-1, 0-3, 0-2, 0-2,  1,  4, 0-1, 0-4],
[ 0, 0-1, 0-1, 0-1, 0-2, 0-1, 0-1, 0-1, 0-1, 0-1, 0-1, 0-1, 0-1, 0-1, 0-2,  0,  0, 0-2, 0-1, 0-1, 0-1, 0-1, 0-1, 0-4],
[0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4, 0-4,  1]
]

seq maximum_arr([Int] set):Int {
	var Int a = set[0]
	var Int b = set[1]
	var Int c = set[2]
	var Int k
	if a > b{
		k = a
	} else {
		k = b
	}
	if k > c {
		return k
	}
	return c	
}

seq maximum(Int a, Int b, Int c):Int {
	var Int k
	if a > b{
		k = a
	} else {
		k = b
	}
	if k > c {
		return k
	}
	return c	
}

map iteration([[Int]] diagonal):[Int] res {
	res[INDEX] = maximum_arr(diagonal[INDEX])
}

seq main():Int {
	
	var Int max_cols = 20000
	var Int max_rows = 30000
	
	var Int penalty = 2
	
	var [[Int]] InputMatrix = init_List([20000,30000],0)
	var [[Int]] referrence = init_List([20000,30000])
	
	for var Int i = 1 ; i < max_cols; i++{
        for var Int j = 1 ; j < max_rows; j++{
            referrence[i][j] = blosum62[rand(i)%10 + 1][rand(j)%10 + 1]
        }
    }
	
	for var Int i = 1; i < max_cols; i++ {
		InputMatrix[i][0] = (0-i)*penalty
	}
	
	for var Int i = 1; i < max_rows; i++ {
		InputMatrix[0][i] = (0-i)*penalty
	}
	
	// iterate over each diagonal
	for var Int i = 1; i < 30000; i++ {
		var Int col = 1
		var Int row = i
		
		// restructure data to use the Map pattern since the dynamic programming pattern is not yet capable
		var [[Int]] diagonal = init_List([19999,3])
		var [Int] diagonal_res = init_List([19999])
		
		for var Int j = 0; j < i; j++ {
			diagonal[col - 1][0] = InputMatrix[row - 1][col - 1] + referrence[row - 1][col - 1]
			diagonal[col - 1][1] = InputMatrix[row - 1][col] - penalty
			diagonal[col - 1][2] = InputMatrix[row][col - 1] - penalty
			col++
			row--
		}
		
		// compute the results of each diagonal in parallel
		diagonal_res = iteration<<<>>>(diagonal)
		
		row = i
		col = 1
		for var Int j = 0; j < i; j++ {
			InputMatrix[row][col] = diagonal_res[col - 1]
			col++
			row--
		}	
	
	}
	
	// Trace back computation
	var Int j = max_cols - 2
	var Int i = max_rows - 2
	while i>0 && j>0 {
        var Int nw
		var Int n
		var Int w
		var Int traceback
        if i == max_rows - 2 && j == max_cols - 2  {
            write("result.txt", "start:" {InputMatrix[i][j]})
		}
        if  i > 0 && j > 0 {
            nw = InputMatrix[i-1][j - 1]
            w  = InputMatrix[ i][j - 1 ]
            n  = InputMatrix[(i - 1)][j]
        }
        else if  i == 0 {
            nw = LIMIT
			n = LIMIT
            w  = InputMatrix[ i][j - 1 ]
        }
        else if  j == 0 {
            nw = LIMIT
			w = LIMIT
            n  = InputMatrix[(i - 1)][ j]
        }

        //traceback = maximum(nw, w, n)
		var Int new_nw = nw + referrence[i][j]
		var Int new_n = n - penalty
		var Int new_w = w - penalty

        var Int traceback = maximum(new_nw, new_w, new_n)
		
        if traceback == new_nw {
            traceback = nw
		}
        if traceback == new_w {
            traceback = w
		}
        if traceback == new_n {
            traceback = n
		}

        write("result.txt", {traceback})

        if traceback == nw  {
			i--
			j--
		} else if traceback == w  {
			j--
		} else if traceback == n  {
			i--
		}
    }

	return 0
}
}