pathfinder {
include "../math"
// A value for LCG
var Int A = 1103515245

// C value for LCG
var Int C = 12345
/**
* Generates a uniformly distributed random number using the provided seed and GCC's settings for the Linear Congruential Generator (LCG)
* @see http://en.wikipedia.org/wiki/Linear_congruential_generator
* @note This function is thread-safe
* @param seed The seed array
* @param index The specific index of the seed to be advanced
* @return a uniformly distributed number [0, 1)
*/
seq randu(Int seed):Int{
	var Int num = A*seed + C
	return int(abs((num % MAX_INT)/MAX_INT))
}
/**
* Generates a normally distributed random number using the Box-Muller transformation
* @note This function is thread-safe
* @param seed The seed array
* @param index The specific index of the seed to be advanced
* @return a double representing random number generated using the Box-Muller algorithm
* @see http://en.wikipedia.org/wiki/Normal_distribution, section computing value for normal random distribution
*/
seq randn(Int seed):Int{
	/*Box-Muller algorithm*/
	var Int u = randu(seed)
	var Int v = randu(seed*20 + 145)
	var Float cosine = cos(2*pi*v)
	var Float rt = (0-2)*log(u)
	return int(sqrt(rt)*cosine)
}

map kernel([Int] src, [Int] wall):[Int] dst {
	var Int minimum = src[INDEX]
	minimum = min(minimum, src[INDEX-1])
	minimum = min(minimum, src[INDEX+1])
	dst[INDEX] = wall[INDEX] + minimum
}

seq main(): Int {
	var Int rows = 100000
	var Int cols = 100000
	
	var [[Int]] wall = init_List([100000,1000000])
	var [[Int]] data = init_List([100000,1000000])
	
	var [Int] result = init_List([100000])
	
	for var Int i = 0; i < cols; i++ {
		for var Int j = 0; j < rows;j++ {
			wall[j][i] = randn(2*j+5*i)
			data[j][i] = randn(9*j+2*i)
		}
		result[i] = wall[0][i]
	}
	
	var [Int] src = init_List([100000])
	var [Int] dst = init_List([100000])
	var [Int] temp = init_List([100000])
	
	dst = result
	
	for var Int t = 0; t < rows-1; t++ {
        temp = src
        src = dst
        dst = temp
		
		dst = kernel<<<>>>(src,wall[t+1])
		
		dst[0] = wall[t+1][0] + min(src[0], src[1])
		dst[cols-1] = wall[t+1][cols-1] + min(src[cols-1], src[cols-2])
    }
	
	write("result.txt", {dst})
	
	return 0
}

}