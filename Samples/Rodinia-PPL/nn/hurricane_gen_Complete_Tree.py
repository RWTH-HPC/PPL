from graphviz import Digraph


dot = Digraph(comment='Abstract Pattern Tree')

dot  #doctest: +ELLIPSIS


dot.node('Xz6mNsxKXTgcf7qFT1ng', 'Main')
dot.node('0C9UcUWsUYxuoJdp4ROD', 'Simple Expression')
dot.node('HP34VQbb67IF8sgvXuuA', 'For-Loop')
dot.node('UYtY8yHShjmVPK6082i6', 'Expression')
dot.node('AmeM2D5ZHdJF3C0Iv12h', 'Expression')
dot.node('80XDGrQHMIrxBS48nOXV', 'Expression')
dot.node('7CsDKtIX4Npc1g93krMD', 'Expression')
dot.node('jiEaXjVQUa4j0hbal6D9', 'Call: rand', style="filled", fillcolor="green")
dot.node('qNMEd3aNiJ7RXmIf6N6T', 'Return')
dot.node('Ju2ye1r0TQdYcz8YoqjJ', 'Expression')
dot.node('tWs3BsbdSTXG9brI69fr', 'Expression')
dot.node('uDlrSm2dH1SJdSlN35VX', 'Call: rand', style="filled", fillcolor="green")
dot.node('TnbsnXVlhnUkycG51oXl', 'Return')
dot.node('usW4EM0MAFfIv1qxPPF1', 'Expression')
dot.node('U8AzzlyrW7m6j2gB5hml', 'Expression')
dot.node('yE4hpxHjk7sXjLAPB61L', 'Call: rand', style="filled", fillcolor="green")
dot.node('UhK72j0qcgXpfoUUNvIF', 'Return')
dot.node('2N4CIxHAfJjmWirrdkWd', 'Expression')
dot.node('cs5aet7l8x0TMDxzsDYU', 'Expression')
dot.node('1EvKjUs6ejOV3DYN6nTt', 'Call: rand', style="filled", fillcolor="green")
dot.node('ViVFnqjES0EsGHq7bx5I', 'Return')
dot.node('gbdEOdmA0iVjTqnzcGK3', 'Expression')
dot.node('HRWx9vk6W4rI4oVVJKer', 'Expression')
dot.node('MNk6T1NBJV0USoTVcncP', 'Call: rand', style="filled", fillcolor="green")
dot.node('vakQsYyr6qfhMDPEmJlL', 'Return')
dot.node('tx9VeypqRbUk9AqjfDsW', 'Expression')
dot.node('C5HEFa8oyxdttRENPurg', 'Expression')
dot.node('rQsn73yAHpIh3ic7F32E', 'Call: rand', style="filled", fillcolor="green")
dot.node('CcHrPUmqKNv7jun99AJ5', 'Return')
dot.node('qks4MCV6OQ4pf7MTbDCg', 'Expression')
dot.node('fj5mx0xpuBM5vxrvFt9x', 'Expression')
dot.node('7H0QOeMS8p3VEPShFyLl', 'Call: rand', style="filled", fillcolor="green")
dot.node('kmfDp0yTBmDOEaMpjnkS', 'Return')
dot.node('ggHZdGXZ7IX5sVeSNLzl', 'Expression')
dot.node('8ruEvn8M3SCIiDJiFi09', 'Call: rand', style="filled", fillcolor="green")
dot.node('L9YYOFZaiDFeEXexrvFI', 'Return')
dot.node('YUeCdKhgZOHzgS85OBbi', 'Expression')
dot.node('bI5HJ1nZxvPz8OXtn8uB', 'Expression')
dot.node('tkxWkU30UpW0TAIbfhB6', 'Call: rand', style="filled", fillcolor="green")
dot.node('3JII1QcIaI2ILmBAyJh3', 'Return')
dot.node('v9kr3icl0tt51pFUTBrz', 'Expression')
dot.node('Gi069zTDZKXOma78hx8I', 'Call: rand', style="filled", fillcolor="green")
dot.node('Z07La8Et5dGKsIRUQHm4', 'Return')
dot.node('EGhBlSqTl8m5IuhY4VM0', 'Expression')
dot.node('6dbatFTV1EsZRsF6D8aq', 'Expression')
dot.node('z18kURWkVDivfDpLD25F', 'Call: rand', style="filled", fillcolor="green")
dot.node('42yecnq1fCslWDT5pCt9', 'Return')
dot.node('ntxDg2YvGMNu0jSnlIEM', 'Expression')
dot.node('Blnr2o2T1TsGYFEFHoFd', 'Expression')
dot.node('KoW6sphIPME0sLctiAiO', 'Call: rand', style="filled", fillcolor="green")
dot.node('OpMLhKDxkvdCMIc06nIi', 'Return')
dot.node('6u760njKcZ6nlEv4juGG', 'Expression')
dot.node('xZy32lJkulCPjonOcZcN', 'Simple Expression')
dot.node('fGD7mv0pZifQeiizGxty', 'Return')
dot.node('mdTbTmePh95zFZiFed0x', 'Expression')
dot.edge('Xz6mNsxKXTgcf7qFT1ng', '0C9UcUWsUYxuoJdp4ROD')
dot.edge('Xz6mNsxKXTgcf7qFT1ng', 'HP34VQbb67IF8sgvXuuA')
dot.edge('Xz6mNsxKXTgcf7qFT1ng', 'fGD7mv0pZifQeiizGxty')
dot.edge('HP34VQbb67IF8sgvXuuA', 'UYtY8yHShjmVPK6082i6')
dot.edge('HP34VQbb67IF8sgvXuuA', 'AmeM2D5ZHdJF3C0Iv12h')
dot.edge('HP34VQbb67IF8sgvXuuA', '80XDGrQHMIrxBS48nOXV')
dot.edge('HP34VQbb67IF8sgvXuuA', '7CsDKtIX4Npc1g93krMD')
dot.edge('HP34VQbb67IF8sgvXuuA', 'tWs3BsbdSTXG9brI69fr')
dot.edge('HP34VQbb67IF8sgvXuuA', 'U8AzzlyrW7m6j2gB5hml')
dot.edge('HP34VQbb67IF8sgvXuuA', 'cs5aet7l8x0TMDxzsDYU')
dot.edge('HP34VQbb67IF8sgvXuuA', 'HRWx9vk6W4rI4oVVJKer')
dot.edge('HP34VQbb67IF8sgvXuuA', 'C5HEFa8oyxdttRENPurg')
dot.edge('HP34VQbb67IF8sgvXuuA', 'fj5mx0xpuBM5vxrvFt9x')
dot.edge('HP34VQbb67IF8sgvXuuA', 'bI5HJ1nZxvPz8OXtn8uB')
dot.edge('HP34VQbb67IF8sgvXuuA', '6dbatFTV1EsZRsF6D8aq')
dot.edge('HP34VQbb67IF8sgvXuuA', 'Blnr2o2T1TsGYFEFHoFd')
dot.edge('HP34VQbb67IF8sgvXuuA', 'xZy32lJkulCPjonOcZcN')
dot.edge('7CsDKtIX4Npc1g93krMD', 'jiEaXjVQUa4j0hbal6D9')
dot.edge('jiEaXjVQUa4j0hbal6D9', 'qNMEd3aNiJ7RXmIf6N6T')
dot.edge('qNMEd3aNiJ7RXmIf6N6T', 'Ju2ye1r0TQdYcz8YoqjJ')
dot.edge('tWs3BsbdSTXG9brI69fr', 'uDlrSm2dH1SJdSlN35VX')
dot.edge('uDlrSm2dH1SJdSlN35VX', 'TnbsnXVlhnUkycG51oXl')
dot.edge('TnbsnXVlhnUkycG51oXl', 'usW4EM0MAFfIv1qxPPF1')
dot.edge('U8AzzlyrW7m6j2gB5hml', 'yE4hpxHjk7sXjLAPB61L')
dot.edge('yE4hpxHjk7sXjLAPB61L', 'UhK72j0qcgXpfoUUNvIF')
dot.edge('UhK72j0qcgXpfoUUNvIF', '2N4CIxHAfJjmWirrdkWd')
dot.edge('cs5aet7l8x0TMDxzsDYU', '1EvKjUs6ejOV3DYN6nTt')
dot.edge('1EvKjUs6ejOV3DYN6nTt', 'ViVFnqjES0EsGHq7bx5I')
dot.edge('ViVFnqjES0EsGHq7bx5I', 'gbdEOdmA0iVjTqnzcGK3')
dot.edge('HRWx9vk6W4rI4oVVJKer', 'MNk6T1NBJV0USoTVcncP')
dot.edge('MNk6T1NBJV0USoTVcncP', 'vakQsYyr6qfhMDPEmJlL')
dot.edge('vakQsYyr6qfhMDPEmJlL', 'tx9VeypqRbUk9AqjfDsW')
dot.edge('C5HEFa8oyxdttRENPurg', 'rQsn73yAHpIh3ic7F32E')
dot.edge('rQsn73yAHpIh3ic7F32E', 'CcHrPUmqKNv7jun99AJ5')
dot.edge('CcHrPUmqKNv7jun99AJ5', 'qks4MCV6OQ4pf7MTbDCg')
dot.edge('fj5mx0xpuBM5vxrvFt9x', '7H0QOeMS8p3VEPShFyLl')
dot.edge('fj5mx0xpuBM5vxrvFt9x', '8ruEvn8M3SCIiDJiFi09')
dot.edge('7H0QOeMS8p3VEPShFyLl', 'kmfDp0yTBmDOEaMpjnkS')
dot.edge('kmfDp0yTBmDOEaMpjnkS', 'ggHZdGXZ7IX5sVeSNLzl')
dot.edge('8ruEvn8M3SCIiDJiFi09', 'L9YYOFZaiDFeEXexrvFI')
dot.edge('L9YYOFZaiDFeEXexrvFI', 'YUeCdKhgZOHzgS85OBbi')
dot.edge('bI5HJ1nZxvPz8OXtn8uB', 'tkxWkU30UpW0TAIbfhB6')
dot.edge('bI5HJ1nZxvPz8OXtn8uB', 'Gi069zTDZKXOma78hx8I')
dot.edge('tkxWkU30UpW0TAIbfhB6', '3JII1QcIaI2ILmBAyJh3')
dot.edge('3JII1QcIaI2ILmBAyJh3', 'v9kr3icl0tt51pFUTBrz')
dot.edge('Gi069zTDZKXOma78hx8I', 'Z07La8Et5dGKsIRUQHm4')
dot.edge('Z07La8Et5dGKsIRUQHm4', 'EGhBlSqTl8m5IuhY4VM0')
dot.edge('6dbatFTV1EsZRsF6D8aq', 'z18kURWkVDivfDpLD25F')
dot.edge('z18kURWkVDivfDpLD25F', '42yecnq1fCslWDT5pCt9')
dot.edge('42yecnq1fCslWDT5pCt9', 'ntxDg2YvGMNu0jSnlIEM')
dot.edge('Blnr2o2T1TsGYFEFHoFd', 'KoW6sphIPME0sLctiAiO')
dot.edge('KoW6sphIPME0sLctiAiO', 'OpMLhKDxkvdCMIc06nIi')
dot.edge('OpMLhKDxkvdCMIc06nIi', '6u760njKcZ6nlEv4juGG')
dot.edge('fGD7mv0pZifQeiizGxty', 'mdTbTmePh95zFZiFed0x')



print(dot.source)
dot.render('hurricane_gen_Complete_Tree.gv', view=True)