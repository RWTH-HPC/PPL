bfs {
				
	map update_visit([Bool] node_update) : [Bool] node_visited {
		
		node_visited[INDEX] = node_visited[INDEX] or node_update[INDEX]
		
	}
	
	map reset(): [Bool] res {
		res[INDEX] = false
	}
	
	reduction isFinished([Bool] node_update) : Int res {
		var Int part = 0
		if node_update[INDEX] == true {
			part++
		}
		res += part
	}

    seq main() : Int {
        
		// initialization of the used vectors
		var [Int] distance = init_List([1000000],0)
		var [Bool] node_mask = init_List([1000000], false)
		var [Bool] node_update = init_List([1000000], false)
		
		var [Int] edges = init_List([5999970]) //num edges for the data set
		
		var [Int] node_start_edge = init_List([1000000])
		var [Int] node_num_edges = init_List([1000000])
		
		node_mask[0] = true
		
		edges = read("edges.txt")
		node_start_edge = read("edgestart.txt")
		node_num_edges = read("numedges.txt")
		
		var Bool stop = false
		
		//var Long time = get_time() 
		
		while(!stop) {
			for var Int node = 0; node < #node_mask; node++ {
				if node_mask[node] == true {
					for var Int i = node_start_edge[node]; i < node_start_edge[node] + node_num_edges[node]; i++ {
						var Int id = edges[i]
						if  not node_mask[id] {
							distance[id] = distance[node] + 1
							node_update[id] = true
						}
					}
				}
			}
			
			node_mask = update_visit<<<>>>(node_update)
			
			var Int stop_test = 0
			
			stop_test = isFinished<<<>>>(node_update)
			
			if stop_test == 0 {
				stop = true
			}
		
			node_update = reset<<<>>>()
		}
		
		//time = get_time() - time

        //print("duration: " {time} " us")

		print({distance})

        return 0
    }

}
