LavaMD {

include "../math"

var Int particles_per_box = 100
var Float alpha = 0.5
var Float a2 = 2 * alpha * alpha

stencil kernel([[[[[Float]]]]] rv_cpu, [[[[Float]]]] qv_cpu) : [[[[[Float]]]]] fv_cpu {
	var [[[Float]]] rv_neighbor = init_List([26,100,4])
	var [[Float]] qv_neighbor = init_List([26,100])
	
	//define neighboring boxes
	rv_neighbor[0] = rv_cpu[INDEX0 - 1][INDEX1 - 1][INDEX2 - 1]
	qv_neighbor[0] = qv_cpu[INDEX0 - 1][INDEX1 - 1][INDEX2 - 1]
	rv_neighbor[1] = rv_cpu[INDEX0 - 1][INDEX1 - 1][INDEX2]
	qv_neighbor[1] = qv_cpu[INDEX0 - 1][INDEX1 - 1][INDEX2]
	rv_neighbor[2] = rv_cpu[INDEX0 - 1][INDEX1 - 1][INDEX2 + 1]
	qv_neighbor[2] = qv_cpu[INDEX0 - 1][INDEX1 - 1][INDEX2 + 1]
	rv_neighbor[3] = rv_cpu[INDEX0 - 1][INDEX1][INDEX2 - 1]
	qv_neighbor[3] = qv_cpu[INDEX0 - 1][INDEX1][INDEX2 - 1]
	rv_neighbor[4] = rv_cpu[INDEX0 - 1][INDEX1][INDEX2]
	qv_neighbor[4] = qv_cpu[INDEX0 - 1][INDEX1][INDEX2]
	rv_neighbor[5] = rv_cpu[INDEX0 - 1][INDEX1][INDEX2 + 1]
	qv_neighbor[5] = qv_cpu[INDEX0 - 1][INDEX1][INDEX2 + 1]
	rv_neighbor[6] = rv_cpu[INDEX0 - 1][INDEX1 + 1][INDEX2 - 1]
	qv_neighbor[6] = qv_cpu[INDEX0 - 1][INDEX1 + 1][INDEX2 - 1]
	rv_neighbor[7] = rv_cpu[INDEX0 - 1][INDEX1 + 1][INDEX2]
	qv_neighbor[7] = qv_cpu[INDEX0 - 1][INDEX1 + 1][INDEX2]
	rv_neighbor[8] = rv_cpu[INDEX0 - 1][INDEX1 + 1][INDEX2 + 1]
	qv_neighbor[8] = qv_cpu[INDEX0 - 1][INDEX1 + 1][INDEX2 + 1]
	
	rv_neighbor[9] = rv_cpu[INDEX0][INDEX1 - 1][INDEX2 - 1]
	qv_neighbor[9] = qv_cpu[INDEX0][INDEX1 - 1][INDEX2 - 1]
	rv_neighbor[10] = rv_cpu[INDEX0][INDEX1 - 1][INDEX2]
	qv_neighbor[10] = qv_cpu[INDEX0][INDEX1 - 1][INDEX2]
	rv_neighbor[11] = rv_cpu[INDEX0][INDEX1 - 1][INDEX2 + 1]
	qv_neighbor[11] = qv_cpu[INDEX0][INDEX1 - 1][INDEX2 + 1]
	rv_neighbor[12] = rv_cpu[INDEX0][INDEX1][INDEX2 - 1]
	qv_neighbor[12] = qv_cpu[INDEX0][INDEX1][INDEX2 - 1]
	rv_neighbor[13] = rv_cpu[INDEX0][INDEX1][INDEX2 + 1]
	qv_neighbor[13] = qv_cpu[INDEX0][INDEX1][INDEX2 + 1]
	rv_neighbor[14] = rv_cpu[INDEX0][INDEX1 + 1][INDEX2 - 1]
	qv_neighbor[14] = qv_cpu[INDEX0][INDEX1 + 1][INDEX2 - 1]
	rv_neighbor[15] = rv_cpu[INDEX0][INDEX1 + 1][INDEX2]
	qv_neighbor[15] = qv_cpu[INDEX0][INDEX1 + 1][INDEX2]
	rv_neighbor[16] = rv_cpu[INDEX0][INDEX1 + 1][INDEX2 + 1]
	qv_neighbor[16] = qv_cpu[INDEX0][INDEX1 + 1][INDEX2 + 1]
	
	rv_neighbor[17] = rv_cpu[INDEX0 + 1][INDEX1 - 1][INDEX2 - 1]
	qv_neighbor[17] = qv_cpu[INDEX0 + 1][INDEX1 - 1][INDEX2 - 1]
	rv_neighbor[18] = rv_cpu[INDEX0 + 1][INDEX1 - 1][INDEX2]
	qv_neighbor[18] = qv_cpu[INDEX0 + 1][INDEX1 - 1][INDEX2]
	rv_neighbor[19] = rv_cpu[INDEX0 + 1][INDEX1 - 1][INDEX2 + 1]
	qv_neighbor[19] = qv_cpu[INDEX0 + 1][INDEX1 - 1][INDEX2 + 1]
	rv_neighbor[20] = rv_cpu[INDEX0 + 1][INDEX1][INDEX2 - 1]
	qv_neighbor[20] = qv_cpu[INDEX0 + 1][INDEX1][INDEX2 - 1]
	rv_neighbor[21] = rv_cpu[INDEX0 + 1][INDEX1][INDEX2]
	qv_neighbor[21] = qv_cpu[INDEX0 + 1][INDEX1][INDEX2]
	rv_neighbor[22] = rv_cpu[INDEX0 + 1][INDEX1][INDEX2 + 1]
	qv_neighbor[22] = qv_cpu[INDEX0 + 1][INDEX1][INDEX2 + 1]
	rv_neighbor[23] = rv_cpu[INDEX0 + 1][INDEX1 + 1][INDEX2 - 1]
	qv_neighbor[23] = qv_cpu[INDEX0 + 1][INDEX1 + 1][INDEX2 - 1]
	rv_neighbor[24] = rv_cpu[INDEX0 + 1][INDEX1 + 1][INDEX2]
	qv_neighbor[24] = qv_cpu[INDEX0 + 1][INDEX1 + 1][INDEX2]
	rv_neighbor[25] = rv_cpu[INDEX0 + 1][INDEX1 + 1][INDEX2 + 1]
	qv_neighbor[25] = qv_cpu[INDEX0 + 1][INDEX1 + 1][INDEX2 + 1]
	
	fv_cpu[INDEX0][INDEX1][INDEX2] = particle_iteration<<<>>>(rv_cpu[INDEX0][INDEX1][INDEX2], rv_neighbor, qv_neighbor)
}

map particle_iteration([[Float]] rv_home, [[[Float]]] rv_neighbor, [[Float]] qv_neighbor) : [[Float]] fv_cpu {
	fv_cpu[INDEX] = force_combination(rv_home[INDEX], rv_neighbor, qv_neighbor)
}

seq force_combination([Float] rv_home, [[[Float]]] rv_neighbor, [[Float]] qv_neighbor) : [Float] {
	var [Float] result = init_List([4],0)
	for var Int i = 0; i < #rv_neighbor; i++ {
		for var Int j = 0; j < particles_per_box; j++ {
			var Float r2 = rv_home[0] + rv_neighbor[i][j][0] - rv_home[1] * rv_neighbor[i][j][1] + rv_home[2] * rv_neighbor[i][j][2] + rv_home[3] * rv_neighbor[i][j][3]
			var Float u2 = a2 * r2
			var Float v = exp(0 - u2)
			
			var Float fs = 2 * v
			var Float d_x = rv_home[1] - rv_neighbor[i][j][1]
			var Float d_y = rv_home[2] - rv_neighbor[i][j][2]
			var Float d_z = rv_home[3] - rv_neighbor[i][j][3]
			
			var Float f_x = fs * d_x
			var Float f_y = fs * d_y
			var Float f_z = fs * d_z
			
			result[0] += qv_neighbor[i][j] * v
			result[1] += qv_neighbor[i][j] * f_x
			result[2] += qv_neighbor[i][j] * f_y
			result[3] += qv_neighbor[i][j] * f_z
		}
	}
	return result
}

stencil init_rv() : [[[[[Float]]]]] rv_cpu {
    rv_cpu[INDEX0][INDEX1][INDEX2][INDEX3][INDEX4] = (rand()%10 + 1) / 10.0
}

stencil init_qv() : [[[[[Float]]]]] qv_cpu {
    qv_cpu[INDEX0][INDEX1][INDEX2][INDEX3] = (rand()%10 + 1) / 10.0
}

seq main(): Int {
	// use an array of size 4 to store the values of (v x y z) in this order 
	var [[[[[Float]]]]] rv_cpu = init_List([100,100,100,100,4])
	var [[[[[Float]]]]] fv_cpu = init_List([100,100,100,100,4], 0)
	var [[[[Float]]]] qv_cpu = init_List([100,100,100,100])
	

	rv_cpu = init_rv<<<>>>()
	qv_cpu = init_qv<<<>>>()
	
	//var Long time = get_time()
	
	fv_cpu = kernel<<<>>>(rv_cpu, qv_cpu)
	
	//time = get_time() - time
	
	//print("Kernel duration:" {time} "us")
	
	write("result.txt", {fv_cpu})
	
    return 0
}

}
