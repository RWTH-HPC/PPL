math {

	var Float MAX_FLOAT = 3.402823e+38
	var Float MIN_FLOAT = 1.175494e-38
	
	var Int MAX_INT = 2147483647
	
	var Float pi = 3.14159265359
	var Float e = 2.71828182846
	
	var Float Halley_Newton_epsilon = 0.0000001

	
	seq powi(Float x, Int n) : Float {
		var Float res = 1
		for var Int i = 0; i < n; i++ {
			res *= x
		}
		return res
	}
	
	seq powd(Double x, Int n) : Double {
		var Double res = 1
		for var Int i = 0; i < n; i++ {
			res *= x
		}
		return res
	}
	
	seq int(Float x) : Int {
		return x
	}
	
	// Halley-Newton approximation method for approximating ln
	seq ln(Float x, Float epsilon): Float{
		var Float yn = x - 1.0 // using the first term of the taylor series as initial-value
		var Float yn1 = yn
		
		yn = yn1
		yn1 = yn + 2 * (x - exp(yn)) / (x + exp(yn))

		while (abs(yn - yn1) > epsilon){
			yn = yn1
			yn1 = yn + 2 * (x - exp(yn)) / (x + exp(yn))
		} 

		return yn1
	}
	
	
	seq atan(Float x) : Float {
		var Float res = x - 1/3 * x*x*x + 1/5*pow(x,5) - 1/7 * pow(x,7)
		return res
	}
	
	seq mean([Float] v) : Float {
		var Float sum = 0
		for var Float elem in v {
			sum += elem
		}
		return sum/#v
	}
	
	seq variance([Float] v) : Float {
		var Float sum = 0
		var Float mu = mean(v)
		
		for var Float elem in v {
			sum += (elem - mu) * (elem - mu)
		}
		
		return sum/#v
	}
	
	seq std_dev([Float] v) : Float {
	    var Float res = sqrt(variance(v))
		return res
	}

}
