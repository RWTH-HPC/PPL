from graphviz import Digraph


dot = Digraph(comment='Abstract Pattern Tree')

dot  #doctest: +ELLIPSIS


dot.node('dMqfxuakglllQxymxZEk', 'Main')
dot.node('HlopxAvjpbfrO9X9r2PE', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('6ein413bfsrPTsuj7yb8', 'While Loop', style="filled", fillcolor="cyan")
dot.node('mTOZo3innIRr13IKGATx', 'While Loop', style="filled", fillcolor="cyan")
dot.node('nlnGKkSWYhXdfDIbJpza', 'For Loop', style="filled", fillcolor="cyan")
dot.node('jL7rlQPzdskmtHjtamXp', 'Map: costs_to_x', style="filled", fillcolor="orangered")
dot.node('qbV9gBvuM5SR5IFU4Oh8', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('4ZXMCfHrSsQzJ3DYrC3s', 'Map: get_switch', style="filled", fillcolor="orangered")
dot.node('h7ypkqIplkp0saLiUWO0', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('yfzLE4ujTRS8yfufSkdW', 'Reduction: get_cost_sum', style="filled", fillcolor="orangered")
dot.node('hYBkTxGJxxmMeoDaq0jZ', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('6MMVlJRe86re6N0uGkkP', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('Hu7LXsOf2F7FUsGxciP4', 'Branch', style="filled", fillcolor="cyan")
dot.node('ZmXkk2yWMP0B7c1HHIbl', 'Map: update_assignment', style="filled", fillcolor="orangered")
dot.node('uDfSb5JjTyRKKPFrpU2k', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('U1PCBimNomqNCgEdiBHJ', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('cm0nrzm0vGJRRohFQqlC', 'Branch', style="filled", fillcolor="cyan")
dot.node('z1lXUSqUnSu8QOzimDk1', 'While Loop', style="filled", fillcolor="cyan")
dot.node('x3QU4bWFH0SgKjGPNbMq', 'For Loop', style="filled", fillcolor="cyan")
dot.node('9O4OP3XfPMhAuKGSvDrM', 'Map: costs_to_x', style="filled", fillcolor="orangered")
dot.node('nyqQsW7EY6SDQVy9NJU4', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('aCtO1jLgKIIQeXu3tKDS', 'Map: get_switch', style="filled", fillcolor="orangered")
dot.node('cEoOp5vjVoKk4SbQajd7', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('fVnXsaXb2dWp8aVl1tER', 'Reduction: get_cost_sum', style="filled", fillcolor="orangered")
dot.node('Nr5z2Xlcuyzz0sFrlcTe', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('B9p3ySSmHUBPJYKndPrk', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('kJDGnA9UA8BnJE08KsuG', 'Branch', style="filled", fillcolor="cyan")
dot.node('ne23abManXLupjIF9fdH', 'Map: update_assignment', style="filled", fillcolor="orangered")
dot.node('TDNEebBAg8g93d3yAQXM', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('eKEOAA35TXjvSybKBcu2', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('OSn3epLng9oFV0lAU0yD', 'While Loop', style="filled", fillcolor="cyan")
dot.node('vWShbSenzDjlnLFSJv5H', 'While Loop', style="filled", fillcolor="cyan")
dot.node('LGn4NSOSZPFQ8q9nOS6B', 'For Loop', style="filled", fillcolor="cyan")
dot.node('6YUhPSyhuNXSeHvJrLSm', 'Map: costs_to_x', style="filled", fillcolor="orangered")
dot.node('sSGicqyUNrXpxqJsk8sl', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('ZRAbhH8v0HKpVJ2YIr0o', 'Map: get_switch', style="filled", fillcolor="orangered")
dot.node('0UsPTjixxAm3tH7rQdXz', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('DYvmOZcMVJPKlJzYDM7H', 'Reduction: get_cost_sum', style="filled", fillcolor="orangered")
dot.node('CNC1TSr5AMUAhRgbRWox', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('8yyg2PrttKAmIHWuE4lp', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('dhfjLJ5eBk0YMVf7hWSe', 'Branch', style="filled", fillcolor="cyan")
dot.node('G4k7GqVA0QQ7or4t0iyl', 'Map: update_assignment', style="filled", fillcolor="orangered")
dot.node('8xR9Jp1Y9fBcd3OWVDnH', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('qxJ4EDMGAimdgP36YhER', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('FicJE2ZBGSmnjFxhyT6L', 'Branch', style="filled", fillcolor="cyan")
dot.node('qdjWK0MBkRBn8b3QSmrp', 'While Loop', style="filled", fillcolor="cyan")
dot.node('lr4eZjueld9nZknOOiEk', 'For Loop', style="filled", fillcolor="cyan")
dot.node('FdiZSWBYnEIefei6TX4j', 'Map: costs_to_x', style="filled", fillcolor="orangered")
dot.node('C3OLm7ct3m0e6WzK0bQU', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('z5HAv0XG0noGgbpLWKHb', 'Map: get_switch', style="filled", fillcolor="orangered")
dot.node('tFJ9Jnl9y19Vpex5hPP8', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('G2cdPCAa2T0qI47CjUHg', 'Reduction: get_cost_sum', style="filled", fillcolor="orangered")
dot.node('RfccrYFh8RNbrqVNSZnf', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('6PEKGJ92uEZacHiyMy2u', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('KeZflX2PO1IzOKVOj8PZ', 'Branch', style="filled", fillcolor="cyan")
dot.node('5frxEWPfAaM3PnvZlTE0', 'Map: update_assignment', style="filled", fillcolor="orangered")
dot.node('SlUXJhEIGrXTD9OB7b3j', 'Serial', style="filled", fillcolor="lawngreen")
dot.node('HENLln702BmllyGVYmWD', 'Serial', style="filled", fillcolor="lawngreen")
dot.edge('dMqfxuakglllQxymxZEk', 'HlopxAvjpbfrO9X9r2PE')
dot.edge('dMqfxuakglllQxymxZEk', '6ein413bfsrPTsuj7yb8')
dot.edge('6ein413bfsrPTsuj7yb8', 'mTOZo3innIRr13IKGATx')
dot.edge('mTOZo3innIRr13IKGATx', 'nlnGKkSWYhXdfDIbJpza')
dot.edge('nlnGKkSWYhXdfDIbJpza', 'jL7rlQPzdskmtHjtamXp')
dot.edge('jL7rlQPzdskmtHjtamXp', 'qbV9gBvuM5SR5IFU4Oh8')
dot.edge('nlnGKkSWYhXdfDIbJpza', '4ZXMCfHrSsQzJ3DYrC3s')
dot.edge('4ZXMCfHrSsQzJ3DYrC3s', 'h7ypkqIplkp0saLiUWO0')
dot.edge('nlnGKkSWYhXdfDIbJpza', 'yfzLE4ujTRS8yfufSkdW')
dot.edge('yfzLE4ujTRS8yfufSkdW', 'hYBkTxGJxxmMeoDaq0jZ')
dot.edge('nlnGKkSWYhXdfDIbJpza', '6MMVlJRe86re6N0uGkkP')
dot.edge('nlnGKkSWYhXdfDIbJpza', 'Hu7LXsOf2F7FUsGxciP4')
dot.edge('Hu7LXsOf2F7FUsGxciP4', 'ZmXkk2yWMP0B7c1HHIbl')
dot.edge('ZmXkk2yWMP0B7c1HHIbl', 'uDfSb5JjTyRKKPFrpU2k')
dot.edge('Hu7LXsOf2F7FUsGxciP4', 'U1PCBimNomqNCgEdiBHJ')
dot.edge('6ein413bfsrPTsuj7yb8', 'cm0nrzm0vGJRRohFQqlC')
dot.edge('cm0nrzm0vGJRRohFQqlC', 'z1lXUSqUnSu8QOzimDk1')
dot.edge('z1lXUSqUnSu8QOzimDk1', 'x3QU4bWFH0SgKjGPNbMq')
dot.edge('x3QU4bWFH0SgKjGPNbMq', '9O4OP3XfPMhAuKGSvDrM')
dot.edge('9O4OP3XfPMhAuKGSvDrM', 'nyqQsW7EY6SDQVy9NJU4')
dot.edge('x3QU4bWFH0SgKjGPNbMq', 'aCtO1jLgKIIQeXu3tKDS')
dot.edge('aCtO1jLgKIIQeXu3tKDS', 'cEoOp5vjVoKk4SbQajd7')
dot.edge('x3QU4bWFH0SgKjGPNbMq', 'fVnXsaXb2dWp8aVl1tER')
dot.edge('fVnXsaXb2dWp8aVl1tER', 'Nr5z2Xlcuyzz0sFrlcTe')
dot.edge('x3QU4bWFH0SgKjGPNbMq', 'B9p3ySSmHUBPJYKndPrk')
dot.edge('x3QU4bWFH0SgKjGPNbMq', 'kJDGnA9UA8BnJE08KsuG')
dot.edge('kJDGnA9UA8BnJE08KsuG', 'ne23abManXLupjIF9fdH')
dot.edge('ne23abManXLupjIF9fdH', 'TDNEebBAg8g93d3yAQXM')
dot.edge('kJDGnA9UA8BnJE08KsuG', 'eKEOAA35TXjvSybKBcu2')
dot.edge('dMqfxuakglllQxymxZEk', 'OSn3epLng9oFV0lAU0yD')
dot.edge('OSn3epLng9oFV0lAU0yD', 'vWShbSenzDjlnLFSJv5H')
dot.edge('vWShbSenzDjlnLFSJv5H', 'LGn4NSOSZPFQ8q9nOS6B')
dot.edge('LGn4NSOSZPFQ8q9nOS6B', '6YUhPSyhuNXSeHvJrLSm')
dot.edge('6YUhPSyhuNXSeHvJrLSm', 'sSGicqyUNrXpxqJsk8sl')
dot.edge('LGn4NSOSZPFQ8q9nOS6B', 'ZRAbhH8v0HKpVJ2YIr0o')
dot.edge('ZRAbhH8v0HKpVJ2YIr0o', '0UsPTjixxAm3tH7rQdXz')
dot.edge('LGn4NSOSZPFQ8q9nOS6B', 'DYvmOZcMVJPKlJzYDM7H')
dot.edge('DYvmOZcMVJPKlJzYDM7H', 'CNC1TSr5AMUAhRgbRWox')
dot.edge('LGn4NSOSZPFQ8q9nOS6B', '8yyg2PrttKAmIHWuE4lp')
dot.edge('LGn4NSOSZPFQ8q9nOS6B', 'dhfjLJ5eBk0YMVf7hWSe')
dot.edge('dhfjLJ5eBk0YMVf7hWSe', 'G4k7GqVA0QQ7or4t0iyl')
dot.edge('G4k7GqVA0QQ7or4t0iyl', '8xR9Jp1Y9fBcd3OWVDnH')
dot.edge('dhfjLJ5eBk0YMVf7hWSe', 'qxJ4EDMGAimdgP36YhER')
dot.edge('OSn3epLng9oFV0lAU0yD', 'FicJE2ZBGSmnjFxhyT6L')
dot.edge('FicJE2ZBGSmnjFxhyT6L', 'qdjWK0MBkRBn8b3QSmrp')
dot.edge('qdjWK0MBkRBn8b3QSmrp', 'lr4eZjueld9nZknOOiEk')
dot.edge('lr4eZjueld9nZknOOiEk', 'FdiZSWBYnEIefei6TX4j')
dot.edge('FdiZSWBYnEIefei6TX4j', 'C3OLm7ct3m0e6WzK0bQU')
dot.edge('lr4eZjueld9nZknOOiEk', 'z5HAv0XG0noGgbpLWKHb')
dot.edge('z5HAv0XG0noGgbpLWKHb', 'tFJ9Jnl9y19Vpex5hPP8')
dot.edge('lr4eZjueld9nZknOOiEk', 'G2cdPCAa2T0qI47CjUHg')
dot.edge('G2cdPCAa2T0qI47CjUHg', 'RfccrYFh8RNbrqVNSZnf')
dot.edge('lr4eZjueld9nZknOOiEk', '6PEKGJ92uEZacHiyMy2u')
dot.edge('lr4eZjueld9nZknOOiEk', 'KeZflX2PO1IzOKVOj8PZ')
dot.edge('KeZflX2PO1IzOKVOj8PZ', '5frxEWPfAaM3PnvZlTE0')
dot.edge('5frxEWPfAaM3PnvZlTE0', 'SlUXJhEIGrXTD9OB7b3j')
dot.edge('KeZflX2PO1IzOKVOj8PZ', 'HENLln702BmllyGVYmWD')



print(dot.source)
dot.render('streamcluster_Pattern_Nesting_Tree.gv', view=True)