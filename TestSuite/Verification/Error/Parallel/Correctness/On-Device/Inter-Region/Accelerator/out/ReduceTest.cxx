/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_CFeZRcqAml;
	int32_t* initial_USRQYvaGss;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_USRQYvaGss = Init_List(1, initial_USRQYvaGss, 200LL * 1LL);
	if (rank == 0) {
		result_CFeZRcqAml = 0;
	}
	int32_t* GPU_Data_X2H1SGExgu;
	if (rank == 0) {
		auto f_alloc_DfUkz9hrQN = [&] () {
			cuda_alloc_wrapper(&GPU_Data_X2H1SGExgu, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_DfUkz9hrQN);
	}
	if (rank == 0) {
		auto f_movement_8ibngFTdQ5 = [&] () {
			cuda_host2device_wrapper(&GPU_Data_X2H1SGExgu[0], &initial_USRQYvaGss[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_8ibngFTdQ5);
	}
	int32_t* GPU_Data_cdKxfce602;
	if (rank == 0) {
		auto f_alloc_YsV5EWY9Xb = [&] () {
			cuda_alloc_wrapper(&GPU_Data_cdKxfce602, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_alloc_YsV5EWY9Xb);
	}
	pthread_mutex_t reduction_lock_BTl8uhu8rH = PTHREAD_MUTEX_INITIALIZER;
	int32_t temp_data_BTl8uhu8rH = 0;
	if (rank == 0) {
		auto f_gpu_Ji7XGfHaKX = [&] () {
			cuda_wrapper_sum_Ji7XGfHaKX(GPU_Data_X2H1SGExgu, &temp_data_BTl8uhu8rH, reduction_lock_BTl8uhu8rH);
		};
		getGPUPool()->at(1).addWork(f_gpu_Ji7XGfHaKX);
	}
	int32_t* GPU_Data_iRui1F5jdh;
	if (rank == 0) {
		auto f_alloc_6RQEJNHP5F = [&] () {
			cuda_alloc_wrapper(&GPU_Data_iRui1F5jdh, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_6RQEJNHP5F);
	}
	if (rank == 0) {
		auto f_movement_bYas4f4jnq = [&] () {
			cuda_host2device_wrapper(&GPU_Data_iRui1F5jdh[0], &initial_USRQYvaGss[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_bYas4f4jnq);
	}
	if (rank == 0) {
		auto f_gpu_qF8o5kc6LL = [&] () {
			cuda_wrapper_sum_qF8o5kc6LL(GPU_Data_iRui1F5jdh, &temp_data_BTl8uhu8rH, reduction_lock_BTl8uhu8rH);
		};
		getGPUPool()->at(1).addWork(f_gpu_qF8o5kc6LL);
	}
	if (rank == 0) {
		auto f_dealloc_qvoHIiWzCR = [&] () {
			cuda_dealloc_wrapper(GPU_Data_cdKxfce602);
		};
		getGPUPool()->at(1).addWork(f_dealloc_qvoHIiWzCR);
	}
	if (rank == 0) {
		auto f_dealloc_RcbqG2ArOJ = [&] () {
			cuda_dealloc_wrapper(GPU_Data_iRui1F5jdh);
		};
		getGPUPool()->at(1).addWork(f_dealloc_RcbqG2ArOJ);
	}
	if (rank == 0) {
		auto f_dealloc_NK3L4mu3FJ = [&] () {
			cuda_dealloc_wrapper(GPU_Data_X2H1SGExgu);
		};
		getGPUPool()->at(1).addWork(f_dealloc_NK3L4mu3FJ);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_lVnyZmNv77 = new Bit_Mask(2,true);
		mask_ptr_lVnyZmNv77->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_lVnyZmNv77 (mask_ptr_lVnyZmNv77);
		cuda_sync_device(boost_mask_ptr_lVnyZmNv77);
	}
	result_CFeZRcqAml = temp_data_BTl8uhu8rH;
	if (rank == 0) {
		if (result_CFeZRcqAml != 200) {
			print("summation not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_USRQYvaGss);
	MPI_Finalize();
	return 0;


}

