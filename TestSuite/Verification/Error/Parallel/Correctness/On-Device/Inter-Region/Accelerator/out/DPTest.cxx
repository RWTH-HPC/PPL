/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_ELCh4n0sJc;
	int32_t* initial_a4JNRUnUuW;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_a4JNRUnUuW = Init_List(1, initial_a4JNRUnUuW, 200LL * 1LL);
	result_ELCh4n0sJc = Init_List(result_ELCh4n0sJc, 200LL * 1LL);
	int32_t* GPU_Data_T1sKzedKYR;
	if (rank == 0) {
		auto f_alloc_eXLXhxdgZJ = [&] () {
			cuda_alloc_wrapper(&GPU_Data_T1sKzedKYR, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_eXLXhxdgZJ);
	}
	if (rank == 0) {
		auto f_movement_uHeF73IGMz = [&] () {
			cuda_host2device_wrapper(&GPU_Data_T1sKzedKYR[0], &initial_a4JNRUnUuW[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_uHeF73IGMz);
	}
	int32_t* GPU_Data_aQ53mm0ZRQ;
	if (rank == 0) {
		auto f_alloc_Bo31o5aRWT = [&] () {
			cuda_alloc_wrapper(&GPU_Data_aQ53mm0ZRQ, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_Bo31o5aRWT);
	}
	int32_t* GPU_Data_yCZfqFSTV2;
	if (rank == 0) {
		auto f_alloc_7PNiiEeomm = [&] () {
			cuda_alloc_wrapper(&GPU_Data_yCZfqFSTV2, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_7PNiiEeomm);
	}
	if (rank == 0) {
		auto f_movement_qBTs18zkVO = [&] () {
			cuda_host2device_wrapper(&GPU_Data_yCZfqFSTV2[0], &initial_a4JNRUnUuW[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_qBTs18zkVO);
	}
	int32_t* GPU_Data_JcGcYhClu1;
	if (rank == 0) {
		auto f_alloc_9HDU9LJ7K7 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_JcGcYhClu1, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_9HDU9LJ7K7);
	}
	for (size_t INDEX0_XfYU6AM8ic = 0; INDEX0_XfYU6AM8ic < 0 + 7; ++INDEX0_XfYU6AM8ic) {
		if (rank == 0) {
			auto f_gpu_Djzg7MmFNO = [&] () mutable {
				cuda_wrapper_incr_Djzg7MmFNO(GPU_Data_T1sKzedKYR, GPU_Data_aQ53mm0ZRQ, INDEX0_XfYU6AM8ic);
			};
			getGPUPool()->at(1).addWork(f_gpu_Djzg7MmFNO);
		}
		if (rank == 0) {
			auto f_gpu_HpoRVRHOpX = [&] () mutable {
				cuda_wrapper_incr_HpoRVRHOpX(GPU_Data_yCZfqFSTV2, GPU_Data_JcGcYhClu1, INDEX0_XfYU6AM8ic);
			};
			getGPUPool()->at(1).addWork(f_gpu_HpoRVRHOpX);
		}
		if (rank == 0) {
			auto f_movement_Rd9EEmJ3j7 = [&] () {
				cuda_device2host_wrapper(&result_ELCh4n0sJc[0], &GPU_Data_aQ53mm0ZRQ[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_Rd9EEmJ3j7);
		}
		if (rank == 0) {
			auto f_movement_17riGQ1xu2 = [&] () {
				cuda_device2host_wrapper(&result_ELCh4n0sJc[100], &GPU_Data_JcGcYhClu1[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_17riGQ1xu2);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_XEa4QMcJ7P = new Bit_Mask(2,true);
			mask_ptr_XEa4QMcJ7P->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_XEa4QMcJ7P (mask_ptr_XEa4QMcJ7P);
			cuda_sync_device(boost_mask_ptr_XEa4QMcJ7P);
		}
		Set_Partial_Array(initial_a4JNRUnUuW, result_ELCh4n0sJc, 200);
		if (rank == 0) {
			auto f_movement_HneM0FhbaW = [&] () {
				cuda_host2device_wrapper(&GPU_Data_T1sKzedKYR[0], &initial_a4JNRUnUuW[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_HneM0FhbaW);
		}
		if (rank == 0) {
			auto f_movement_0MtYEmmZIm = [&] () {
				cuda_host2device_wrapper(&GPU_Data_yCZfqFSTV2[0], &initial_a4JNRUnUuW[100], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_0MtYEmmZIm);
		}
	}
	if (rank == 0) {
		auto f_movement_kbejQOchfu = [&] () {
			cuda_device2host_wrapper(&result_ELCh4n0sJc[100], &GPU_Data_JcGcYhClu1[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_kbejQOchfu);
	}
	if (rank == 0) {
		auto f_dealloc_pvclF9BW9A = [&] () {
			cuda_dealloc_wrapper(GPU_Data_JcGcYhClu1);
		};
		getGPUPool()->at(1).addWork(f_dealloc_pvclF9BW9A);
	}
	if (rank == 0) {
		auto f_dealloc_Ydh5fnBKKX = [&] () {
			cuda_dealloc_wrapper(GPU_Data_T1sKzedKYR);
		};
		getGPUPool()->at(1).addWork(f_dealloc_Ydh5fnBKKX);
	}
	if (rank == 0) {
		auto f_movement_i77lmB9FSA = [&] () {
			cuda_device2host_wrapper(&result_ELCh4n0sJc[0], &GPU_Data_aQ53mm0ZRQ[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_i77lmB9FSA);
	}
	if (rank == 0) {
		auto f_dealloc_hVN9HzoW2i = [&] () {
			cuda_dealloc_wrapper(GPU_Data_aQ53mm0ZRQ);
		};
		getGPUPool()->at(1).addWork(f_dealloc_hVN9HzoW2i);
	}
	if (rank == 0) {
		auto f_dealloc_67X32ZRJ8Q = [&] () {
			cuda_dealloc_wrapper(GPU_Data_yCZfqFSTV2);
		};
		getGPUPool()->at(1).addWork(f_dealloc_67X32ZRJ8Q);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_b3qXi09BC4 = new Bit_Mask(2,true);
		mask_ptr_b3qXi09BC4->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_b3qXi09BC4 (mask_ptr_b3qXi09BC4);
		cuda_sync_device(boost_mask_ptr_b3qXi09BC4);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_ELCh4n0sJc[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_ELCh4n0sJc);
	std::free(initial_a4JNRUnUuW);
	MPI_Finalize();
	return 0;


}

