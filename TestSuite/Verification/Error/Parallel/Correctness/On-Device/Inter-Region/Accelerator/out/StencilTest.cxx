/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/StencilTest.hxx"
#include "includes/cuda_lib_StencilTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_zQ0Xj2P8Lz;
	int32_t* result_seq_X4AP4bCibh;
	int32_t* initial_UANbCb8XQf;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_UANbCb8XQf = Init_List(1, initial_UANbCb8XQf, 200LL * 100LL * 100LL * 1LL);
	result_zQ0Xj2P8Lz = Init_List(result_zQ0Xj2P8Lz, 200LL * 100LL * 100LL * 1LL);
	result_seq_X4AP4bCibh = Init_List(result_seq_X4AP4bCibh, 200LL * 100LL * 100LL * 1LL);
	int32_t* GPU_Data_Ed9LRgR2Lg;
	if (rank == 0) {
		auto f_alloc_L9GuJeznVR = [&] () {
			cuda_alloc_wrapper(&GPU_Data_Ed9LRgR2Lg, sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_alloc_L9GuJeznVR);
	}
	if (rank == 0) {
		auto f_movement_scPXEgmOVy = [&] () {
			cuda_host2device_wrapper(&GPU_Data_Ed9LRgR2Lg[0], &initial_UANbCb8XQf[0], sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_movement_scPXEgmOVy);
	}
	int32_t* GPU_Data_2JODpOIG2L;
	if (rank == 0) {
		auto f_alloc_vev5Cllekd = [&] () {
			cuda_alloc_wrapper(&GPU_Data_2JODpOIG2L, sizeof(int32_t) * 1000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_vev5Cllekd);
	}
	if (rank == 0) {
		auto f_gpu_rCQOyszoeH = [&] () {
			cuda_wrapper_sum_rCQOyszoeH(GPU_Data_Ed9LRgR2Lg, GPU_Data_2JODpOIG2L );
		};
		getGPUPool()->at(1).addWork(f_gpu_rCQOyszoeH);
	}
	int32_t* GPU_Data_YoEeYUaXEz;
	if (rank == 0) {
		auto f_alloc_y10OEhbVc9 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_YoEeYUaXEz, sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_alloc_y10OEhbVc9);
	}
	if (rank == 0) {
		auto f_movement_VuPyKYpeGL = [&] () {
			cuda_host2device_wrapper(&GPU_Data_YoEeYUaXEz[0], &initial_UANbCb8XQf[990000], sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_movement_VuPyKYpeGL);
	}
	int32_t* GPU_Data_prS8iheTNb;
	if (rank == 0) {
		auto f_alloc_xScyQt4pI5 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_prS8iheTNb, sizeof(int32_t) * 1000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_xScyQt4pI5);
	}
	if (rank == 0) {
		auto f_gpu_bYUinBGbIN = [&] () {
			cuda_wrapper_sum_bYUinBGbIN(GPU_Data_YoEeYUaXEz, GPU_Data_prS8iheTNb );
		};
		getGPUPool()->at(1).addWork(f_gpu_bYUinBGbIN);
	}
	if (rank == 0) {
		auto f_movement_0OZlTEn3R1 = [&] () {
			cuda_device2host_wrapper(&result_zQ0Xj2P8Lz[10000], &GPU_Data_2JODpOIG2L[10000], sizeof(int32_t) * 990000);
		};
		getGPUPool()->at(1).addWork(f_movement_0OZlTEn3R1);
	}
	if (rank == 0) {
		auto f_dealloc_iJuOvW066n = [&] () {
			cuda_dealloc_wrapper(GPU_Data_2JODpOIG2L);
		};
		getGPUPool()->at(1).addWork(f_dealloc_iJuOvW066n);
	}
	if (rank == 0) {
		auto f_movement_8tM5HrBOUU = [&] () {
			cuda_device2host_wrapper(&result_zQ0Xj2P8Lz[1000000], &GPU_Data_prS8iheTNb[10000], sizeof(int32_t) * 990000);
		};
		getGPUPool()->at(1).addWork(f_movement_8tM5HrBOUU);
	}
	if (rank == 0) {
		auto f_dealloc_hFJgGMpAi6 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_prS8iheTNb);
		};
		getGPUPool()->at(1).addWork(f_dealloc_hFJgGMpAi6);
	}
	if (rank == 0) {
		auto f_dealloc_1bnKP766KU = [&] () {
			cuda_dealloc_wrapper(GPU_Data_YoEeYUaXEz);
		};
		getGPUPool()->at(1).addWork(f_dealloc_1bnKP766KU);
	}
	if (rank == 0) {
		auto f_dealloc_nZJyB5tS5Y = [&] () {
			cuda_dealloc_wrapper(GPU_Data_Ed9LRgR2Lg);
		};
		getGPUPool()->at(1).addWork(f_dealloc_nZJyB5tS5Y);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_GUCrMEFcsf = new Bit_Mask(2,true);
		mask_ptr_GUCrMEFcsf->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_GUCrMEFcsf (mask_ptr_GUCrMEFcsf);
		cuda_sync_device(boost_mask_ptr_GUCrMEFcsf);
	}
	if (rank == 0) {
		for ( int32_t i = 1; i < 199; i++ ) {
			for ( int32_t j = 1; j < 99; j++ ) {
				for ( int32_t k = 1; k < 99; k++ ) {
					result_seq_X4AP4bCibh[100LL * 100LL * (i) + 100LL * (j) + (k)] = initial_UANbCb8XQf[100LL * 100LL * (i + 1) + 100LL * (j) + (k)] + initial_UANbCb8XQf[100LL * 100LL * (i) + 100LL * (j + 1) + (k)] + initial_UANbCb8XQf[100LL * 100LL * (i) + 100LL * (j) + (k + 1)] + initial_UANbCb8XQf[100LL * 100LL * (i - 1) + 100LL * (j) + (k)] + initial_UANbCb8XQf[100LL * 100LL * (i) + 100LL * (j - 1) + (k)] + initial_UANbCb8XQf[100LL * 100LL * (i) + 100LL * (j) + (k - 1)] + initial_UANbCb8XQf[100LL * 100LL * (i) + 100LL * (j) + (k)];
					if (result_zQ0Xj2P8Lz[100LL * 100LL * (i) + 100LL * (j) + (k)] != result_seq_X4AP4bCibh[100LL * 100LL * (i) + 100LL * (j) + (k)]) {
						print("Result at cell (", i, ",", j, ",", k, ") not correct!");
						MPI_Abort(MPI_COMM_WORLD, 1);
					}
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_zQ0Xj2P8Lz);
	std::free(result_seq_X4AP4bCibh);
	std::free(initial_UANbCb8XQf);
	MPI_Finalize();
	return 0;


}

