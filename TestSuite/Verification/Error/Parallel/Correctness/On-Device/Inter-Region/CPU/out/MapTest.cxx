/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapTest.hxx"
#include "includes/cuda_lib_MapTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_msYfkTcjTM;
	int32_t* result_seq_SGXzpe5jnE;
	int32_t* initial_DmnHW8NFqj;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_DmnHW8NFqj = Init_List(1, initial_DmnHW8NFqj, 200LL * 1LL);
	result_msYfkTcjTM = Init_List(result_msYfkTcjTM, 200LL * 1LL);
	result_seq_SGXzpe5jnE = Init_List(result_seq_SGXzpe5jnE, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 0; INDEX_7ndRqhK5Wj < 0 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_7ndRqhK5Wj);
		auto f_1_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 4; INDEX_7ndRqhK5Wj < 4 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_7ndRqhK5Wj);
		auto f_2_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 8; INDEX_7ndRqhK5Wj < 8 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_7ndRqhK5Wj);
		auto f_3_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 12; INDEX_7ndRqhK5Wj < 12 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_7ndRqhK5Wj);
		auto f_4_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 16; INDEX_7ndRqhK5Wj < 16 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_7ndRqhK5Wj);
		auto f_5_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 20; INDEX_7ndRqhK5Wj < 20 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_7ndRqhK5Wj);
		auto f_6_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 24; INDEX_7ndRqhK5Wj < 24 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_7ndRqhK5Wj);
		auto f_7_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 28; INDEX_7ndRqhK5Wj < 28 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_7ndRqhK5Wj);
		auto f_8_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 32; INDEX_7ndRqhK5Wj < 32 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_7ndRqhK5Wj);
		auto f_9_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 36; INDEX_7ndRqhK5Wj < 36 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_7ndRqhK5Wj);
		auto f_10_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 40; INDEX_7ndRqhK5Wj < 40 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_7ndRqhK5Wj);
		auto f_11_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 44; INDEX_7ndRqhK5Wj < 44 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_7ndRqhK5Wj);
		auto f_12_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 48; INDEX_7ndRqhK5Wj < 48 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_7ndRqhK5Wj);
		auto f_13_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 52; INDEX_7ndRqhK5Wj < 52 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_7ndRqhK5Wj);
		auto f_14_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 56; INDEX_7ndRqhK5Wj < 56 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_7ndRqhK5Wj);
		auto f_15_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 60; INDEX_7ndRqhK5Wj < 60 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_7ndRqhK5Wj);
		auto f_16_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 64; INDEX_7ndRqhK5Wj < 64 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_7ndRqhK5Wj);
		auto f_17_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 68; INDEX_7ndRqhK5Wj < 68 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_7ndRqhK5Wj);
		auto f_18_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 72; INDEX_7ndRqhK5Wj < 72 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_7ndRqhK5Wj);
		auto f_19_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 76; INDEX_7ndRqhK5Wj < 76 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_7ndRqhK5Wj);
		auto f_20_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 80; INDEX_7ndRqhK5Wj < 80 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_7ndRqhK5Wj);
		auto f_21_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 84; INDEX_7ndRqhK5Wj < 84 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_7ndRqhK5Wj);
		auto f_22_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 88; INDEX_7ndRqhK5Wj < 88 + 4; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_7ndRqhK5Wj);
		auto f_23_7ndRqhK5Wj = [&] () {
			for (size_t INDEX_7ndRqhK5Wj = 92; INDEX_7ndRqhK5Wj < 92 + 8; ++INDEX_7ndRqhK5Wj) {
				result_msYfkTcjTM[(INDEX_7ndRqhK5Wj)] = initial_DmnHW8NFqj[(INDEX_7ndRqhK5Wj)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_7ndRqhK5Wj);
	}
	if (rank == 0) {
		auto f_0_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 100; INDEX_a9eGfaqvl3 < 100 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(24).addWork(f_0_a9eGfaqvl3);
		auto f_1_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 104; INDEX_a9eGfaqvl3 < 104 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(25).addWork(f_1_a9eGfaqvl3);
		auto f_2_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 108; INDEX_a9eGfaqvl3 < 108 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(26).addWork(f_2_a9eGfaqvl3);
		auto f_3_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 112; INDEX_a9eGfaqvl3 < 112 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(27).addWork(f_3_a9eGfaqvl3);
		auto f_4_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 116; INDEX_a9eGfaqvl3 < 116 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(28).addWork(f_4_a9eGfaqvl3);
		auto f_5_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 120; INDEX_a9eGfaqvl3 < 120 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(29).addWork(f_5_a9eGfaqvl3);
		auto f_6_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 124; INDEX_a9eGfaqvl3 < 124 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(30).addWork(f_6_a9eGfaqvl3);
		auto f_7_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 128; INDEX_a9eGfaqvl3 < 128 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(31).addWork(f_7_a9eGfaqvl3);
		auto f_8_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 132; INDEX_a9eGfaqvl3 < 132 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(32).addWork(f_8_a9eGfaqvl3);
		auto f_9_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 136; INDEX_a9eGfaqvl3 < 136 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(33).addWork(f_9_a9eGfaqvl3);
		auto f_10_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 140; INDEX_a9eGfaqvl3 < 140 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(34).addWork(f_10_a9eGfaqvl3);
		auto f_11_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 144; INDEX_a9eGfaqvl3 < 144 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(35).addWork(f_11_a9eGfaqvl3);
		auto f_12_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 148; INDEX_a9eGfaqvl3 < 148 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(36).addWork(f_12_a9eGfaqvl3);
		auto f_13_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 152; INDEX_a9eGfaqvl3 < 152 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(37).addWork(f_13_a9eGfaqvl3);
		auto f_14_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 156; INDEX_a9eGfaqvl3 < 156 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(38).addWork(f_14_a9eGfaqvl3);
		auto f_15_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 160; INDEX_a9eGfaqvl3 < 160 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(39).addWork(f_15_a9eGfaqvl3);
		auto f_16_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 164; INDEX_a9eGfaqvl3 < 164 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(40).addWork(f_16_a9eGfaqvl3);
		auto f_17_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 168; INDEX_a9eGfaqvl3 < 168 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(41).addWork(f_17_a9eGfaqvl3);
		auto f_18_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 172; INDEX_a9eGfaqvl3 < 172 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(42).addWork(f_18_a9eGfaqvl3);
		auto f_19_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 176; INDEX_a9eGfaqvl3 < 176 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(43).addWork(f_19_a9eGfaqvl3);
		auto f_20_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 180; INDEX_a9eGfaqvl3 < 180 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(44).addWork(f_20_a9eGfaqvl3);
		auto f_21_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 184; INDEX_a9eGfaqvl3 < 184 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(45).addWork(f_21_a9eGfaqvl3);
		auto f_22_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 188; INDEX_a9eGfaqvl3 < 188 + 4; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(46).addWork(f_22_a9eGfaqvl3);
		auto f_23_a9eGfaqvl3 = [&] () {
			for (size_t INDEX_a9eGfaqvl3 = 192; INDEX_a9eGfaqvl3 < 192 + 8; ++INDEX_a9eGfaqvl3) {
				result_msYfkTcjTM[(INDEX_a9eGfaqvl3)] = initial_DmnHW8NFqj[(INDEX_a9eGfaqvl3)] + 1;
			}
		};
		getPool()->at(47).addWork(f_23_a9eGfaqvl3);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_VmmXiQZ0yc = new Bit_Mask(48,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_VmmXiQZ0yc (mask_ptr_VmmXiQZ0yc);
		self_barrier(boost_mask_ptr_VmmXiQZ0yc);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_SGXzpe5jnE[(i)] = initial_DmnHW8NFqj[(i)] + 1;
			if (result_seq_SGXzpe5jnE[(i)] != result_msYfkTcjTM[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_msYfkTcjTM);
	std::free(result_seq_SGXzpe5jnE);
	std::free(initial_DmnHW8NFqj);
	MPI_Finalize();
	return 0;


}

