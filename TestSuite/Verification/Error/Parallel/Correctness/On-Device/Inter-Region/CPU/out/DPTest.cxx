/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_eDkQiXzqfd;
	int32_t* initial_AKn30VGSkm;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_AKn30VGSkm = Init_List(1, initial_AKn30VGSkm, 200LL * 1LL);
	result_eDkQiXzqfd = Init_List(result_eDkQiXzqfd, 200LL * 1LL);
	for (size_t INDEX0_Rctv767sRE = 0; INDEX0_Rctv767sRE < 0 + 7; ++INDEX0_Rctv767sRE) {
		if (rank == 0) {
			auto f_0_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 0; INDEX1_Rctv767sRE < 0 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(0).addWork(f_0_Rctv767sRE);
			auto f_1_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 4; INDEX1_Rctv767sRE < 4 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(1).addWork(f_1_Rctv767sRE);
			auto f_2_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 8; INDEX1_Rctv767sRE < 8 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(2).addWork(f_2_Rctv767sRE);
			auto f_3_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 12; INDEX1_Rctv767sRE < 12 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(3).addWork(f_3_Rctv767sRE);
			auto f_4_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 16; INDEX1_Rctv767sRE < 16 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(4).addWork(f_4_Rctv767sRE);
			auto f_5_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 20; INDEX1_Rctv767sRE < 20 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(5).addWork(f_5_Rctv767sRE);
			auto f_6_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 24; INDEX1_Rctv767sRE < 24 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(6).addWork(f_6_Rctv767sRE);
			auto f_7_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 28; INDEX1_Rctv767sRE < 28 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(7).addWork(f_7_Rctv767sRE);
			auto f_8_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 32; INDEX1_Rctv767sRE < 32 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(8).addWork(f_8_Rctv767sRE);
			auto f_9_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 36; INDEX1_Rctv767sRE < 36 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(9).addWork(f_9_Rctv767sRE);
			auto f_10_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 40; INDEX1_Rctv767sRE < 40 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(10).addWork(f_10_Rctv767sRE);
			auto f_11_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 44; INDEX1_Rctv767sRE < 44 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(11).addWork(f_11_Rctv767sRE);
			auto f_12_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 48; INDEX1_Rctv767sRE < 48 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(12).addWork(f_12_Rctv767sRE);
			auto f_13_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 52; INDEX1_Rctv767sRE < 52 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(13).addWork(f_13_Rctv767sRE);
			auto f_14_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 56; INDEX1_Rctv767sRE < 56 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(14).addWork(f_14_Rctv767sRE);
			auto f_15_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 60; INDEX1_Rctv767sRE < 60 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(15).addWork(f_15_Rctv767sRE);
			auto f_16_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 64; INDEX1_Rctv767sRE < 64 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(16).addWork(f_16_Rctv767sRE);
			auto f_17_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 68; INDEX1_Rctv767sRE < 68 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(17).addWork(f_17_Rctv767sRE);
			auto f_18_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 72; INDEX1_Rctv767sRE < 72 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(18).addWork(f_18_Rctv767sRE);
			auto f_19_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 76; INDEX1_Rctv767sRE < 76 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(19).addWork(f_19_Rctv767sRE);
			auto f_20_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 80; INDEX1_Rctv767sRE < 80 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(20).addWork(f_20_Rctv767sRE);
			auto f_21_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 84; INDEX1_Rctv767sRE < 84 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(21).addWork(f_21_Rctv767sRE);
			auto f_22_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 88; INDEX1_Rctv767sRE < 88 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(22).addWork(f_22_Rctv767sRE);
			auto f_23_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 92; INDEX1_Rctv767sRE < 92 + 8; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(23).addWork(f_23_Rctv767sRE);
		}
		if (rank == 0) {
			auto f_0_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 100; INDEX1_Rctv767sRE < 100 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(24).addWork(f_0_Rctv767sRE);
			auto f_1_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 104; INDEX1_Rctv767sRE < 104 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(25).addWork(f_1_Rctv767sRE);
			auto f_2_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 108; INDEX1_Rctv767sRE < 108 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(26).addWork(f_2_Rctv767sRE);
			auto f_3_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 112; INDEX1_Rctv767sRE < 112 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(27).addWork(f_3_Rctv767sRE);
			auto f_4_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 116; INDEX1_Rctv767sRE < 116 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(28).addWork(f_4_Rctv767sRE);
			auto f_5_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 120; INDEX1_Rctv767sRE < 120 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(29).addWork(f_5_Rctv767sRE);
			auto f_6_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 124; INDEX1_Rctv767sRE < 124 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(30).addWork(f_6_Rctv767sRE);
			auto f_7_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 128; INDEX1_Rctv767sRE < 128 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(31).addWork(f_7_Rctv767sRE);
			auto f_8_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 132; INDEX1_Rctv767sRE < 132 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(32).addWork(f_8_Rctv767sRE);
			auto f_9_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 136; INDEX1_Rctv767sRE < 136 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(33).addWork(f_9_Rctv767sRE);
			auto f_10_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 140; INDEX1_Rctv767sRE < 140 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(34).addWork(f_10_Rctv767sRE);
			auto f_11_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 144; INDEX1_Rctv767sRE < 144 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(35).addWork(f_11_Rctv767sRE);
			auto f_12_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 148; INDEX1_Rctv767sRE < 148 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(36).addWork(f_12_Rctv767sRE);
			auto f_13_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 152; INDEX1_Rctv767sRE < 152 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(37).addWork(f_13_Rctv767sRE);
			auto f_14_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 156; INDEX1_Rctv767sRE < 156 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(38).addWork(f_14_Rctv767sRE);
			auto f_15_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 160; INDEX1_Rctv767sRE < 160 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(39).addWork(f_15_Rctv767sRE);
			auto f_16_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 164; INDEX1_Rctv767sRE < 164 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(40).addWork(f_16_Rctv767sRE);
			auto f_17_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 168; INDEX1_Rctv767sRE < 168 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(41).addWork(f_17_Rctv767sRE);
			auto f_18_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 172; INDEX1_Rctv767sRE < 172 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(42).addWork(f_18_Rctv767sRE);
			auto f_19_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 176; INDEX1_Rctv767sRE < 176 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(43).addWork(f_19_Rctv767sRE);
			auto f_20_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 180; INDEX1_Rctv767sRE < 180 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(44).addWork(f_20_Rctv767sRE);
			auto f_21_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 184; INDEX1_Rctv767sRE < 184 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(45).addWork(f_21_Rctv767sRE);
			auto f_22_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 188; INDEX1_Rctv767sRE < 188 + 4; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(46).addWork(f_22_Rctv767sRE);
			auto f_23_Rctv767sRE = [&] () {
				for (size_t INDEX1_Rctv767sRE = 192; INDEX1_Rctv767sRE < 192 + 8; ++INDEX1_Rctv767sRE) {
					result_eDkQiXzqfd[(INDEX1_Rctv767sRE)] = initial_AKn30VGSkm[(INDEX1_Rctv767sRE)] + 1;
				}
			};
			getPool()->at(47).addWork(f_23_Rctv767sRE);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_lVJx5kXOLC = new Bit_Mask(48,false);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_lVJx5kXOLC (mask_ptr_lVJx5kXOLC);
			self_barrier(boost_mask_ptr_lVJx5kXOLC);
		}
		Set_Partial_Array(initial_AKn30VGSkm, result_eDkQiXzqfd, 200);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_Tu3yrGpNgX = new Bit_Mask(48,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_Tu3yrGpNgX (mask_ptr_Tu3yrGpNgX);
		self_barrier(boost_mask_ptr_Tu3yrGpNgX);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_eDkQiXzqfd[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_eDkQiXzqfd);
	std::free(initial_AKn30VGSkm);
	MPI_Finalize();
	return 0;


}

