/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_kCPREMpoI1;
	int32_t* initial_1b2o85FlAH;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_1b2o85FlAH = Init_List(1, initial_1b2o85FlAH, 200LL * 1LL);
	if (rank == 0) {
		result_kCPREMpoI1 = 0;
	}
	pthread_mutex_t reduction_lock_02QRNPblbF = PTHREAD_MUTEX_INITIALIZER;
	int32_t temp_data_02QRNPblbF = 0;
	if (rank == 0) {
		int32_t* partialResult_hLRlrqLPRP;
		partialResult_hLRlrqLPRP = Init_List(result_kCPREMpoI1, partialResult_hLRlrqLPRP, 24);
		auto f_0_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 0; INDEX_hLRlrqLPRP < 0 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[0] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(0).addWork(f_0_hLRlrqLPRP);
		auto f_1_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 4; INDEX_hLRlrqLPRP < 4 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[1] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(1).addWork(f_1_hLRlrqLPRP);
		auto f_2_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 8; INDEX_hLRlrqLPRP < 8 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[2] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(2).addWork(f_2_hLRlrqLPRP);
		auto f_3_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 12; INDEX_hLRlrqLPRP < 12 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[3] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(3).addWork(f_3_hLRlrqLPRP);
		auto f_4_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 16; INDEX_hLRlrqLPRP < 16 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[4] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(4).addWork(f_4_hLRlrqLPRP);
		auto f_5_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 20; INDEX_hLRlrqLPRP < 20 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[5] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(5).addWork(f_5_hLRlrqLPRP);
		auto f_6_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 24; INDEX_hLRlrqLPRP < 24 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[6] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(6).addWork(f_6_hLRlrqLPRP);
		auto f_7_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 28; INDEX_hLRlrqLPRP < 28 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[7] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(7).addWork(f_7_hLRlrqLPRP);
		auto f_8_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 32; INDEX_hLRlrqLPRP < 32 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[8] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(8).addWork(f_8_hLRlrqLPRP);
		auto f_9_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 36; INDEX_hLRlrqLPRP < 36 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[9] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(9).addWork(f_9_hLRlrqLPRP);
		auto f_10_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 40; INDEX_hLRlrqLPRP < 40 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[10] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(10).addWork(f_10_hLRlrqLPRP);
		auto f_11_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 44; INDEX_hLRlrqLPRP < 44 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[11] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(11).addWork(f_11_hLRlrqLPRP);
		auto f_12_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 48; INDEX_hLRlrqLPRP < 48 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[12] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(12).addWork(f_12_hLRlrqLPRP);
		auto f_13_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 52; INDEX_hLRlrqLPRP < 52 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[13] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(13).addWork(f_13_hLRlrqLPRP);
		auto f_14_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 56; INDEX_hLRlrqLPRP < 56 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[14] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(14).addWork(f_14_hLRlrqLPRP);
		auto f_15_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 60; INDEX_hLRlrqLPRP < 60 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[15] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(15).addWork(f_15_hLRlrqLPRP);
		auto f_16_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 64; INDEX_hLRlrqLPRP < 64 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[16] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(16).addWork(f_16_hLRlrqLPRP);
		auto f_17_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 68; INDEX_hLRlrqLPRP < 68 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[17] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(17).addWork(f_17_hLRlrqLPRP);
		auto f_18_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 72; INDEX_hLRlrqLPRP < 72 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[18] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(18).addWork(f_18_hLRlrqLPRP);
		auto f_19_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 76; INDEX_hLRlrqLPRP < 76 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[19] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(19).addWork(f_19_hLRlrqLPRP);
		auto f_20_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 80; INDEX_hLRlrqLPRP < 80 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[20] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(20).addWork(f_20_hLRlrqLPRP);
		auto f_21_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 84; INDEX_hLRlrqLPRP < 84 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[21] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(21).addWork(f_21_hLRlrqLPRP);
		auto f_22_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 88; INDEX_hLRlrqLPRP < 88 + 4; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[22] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(22).addWork(f_22_hLRlrqLPRP);
		auto f_23_hLRlrqLPRP = [&] () {
			for (size_t INDEX_hLRlrqLPRP = 92; INDEX_hLRlrqLPRP < 92 + 8; ++INDEX_hLRlrqLPRP) {
				partialResult_hLRlrqLPRP[23] += initial_1b2o85FlAH[(INDEX_hLRlrqLPRP)];
			}
		};
		getPool()->at(23).addWork(f_23_hLRlrqLPRP);
		Bit_Mask * mask_ptr_hLRlrqLPRP = new Bit_Mask(48,false);
		for (size_t i_hLRlrqLPRP = 0; i_hLRlrqLPRP < 24; ++i_hLRlrqLPRP) {
			mask_ptr_hLRlrqLPRP->setBarrier(i_hLRlrqLPRP);
		}
		boost::shared_ptr<Bit_Mask>mask_hLRlrqLPRP (mask_ptr_hLRlrqLPRP);
		barrier(mask_hLRlrqLPRP);
		auto lambda_reduction_hLRlrqLPRP = [partialResult_hLRlrqLPRP, &temp_data_02QRNPblbF ,&reduction_lock_02QRNPblbF] () {
			pthread_mutex_lock(&reduction_lock_02QRNPblbF);
			temp_data_02QRNPblbF = reduction_sum(temp_data_02QRNPblbF, partialResult_hLRlrqLPRP, 24, 0);
			pthread_mutex_unlock(&reduction_lock_02QRNPblbF);
		};
		getPool()->at(0).addWork(lambda_reduction_hLRlrqLPRP);
	}
	if (rank == 0) {
		int32_t* partialResult_B4GEMW6Npg;
		partialResult_B4GEMW6Npg = Init_List(result_kCPREMpoI1, partialResult_B4GEMW6Npg, 24);
		auto f_0_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 100; INDEX_B4GEMW6Npg < 100 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[0] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(24).addWork(f_0_B4GEMW6Npg);
		auto f_1_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 104; INDEX_B4GEMW6Npg < 104 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[1] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(25).addWork(f_1_B4GEMW6Npg);
		auto f_2_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 108; INDEX_B4GEMW6Npg < 108 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[2] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(26).addWork(f_2_B4GEMW6Npg);
		auto f_3_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 112; INDEX_B4GEMW6Npg < 112 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[3] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(27).addWork(f_3_B4GEMW6Npg);
		auto f_4_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 116; INDEX_B4GEMW6Npg < 116 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[4] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(28).addWork(f_4_B4GEMW6Npg);
		auto f_5_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 120; INDEX_B4GEMW6Npg < 120 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[5] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(29).addWork(f_5_B4GEMW6Npg);
		auto f_6_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 124; INDEX_B4GEMW6Npg < 124 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[6] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(30).addWork(f_6_B4GEMW6Npg);
		auto f_7_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 128; INDEX_B4GEMW6Npg < 128 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[7] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(31).addWork(f_7_B4GEMW6Npg);
		auto f_8_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 132; INDEX_B4GEMW6Npg < 132 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[8] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(32).addWork(f_8_B4GEMW6Npg);
		auto f_9_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 136; INDEX_B4GEMW6Npg < 136 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[9] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(33).addWork(f_9_B4GEMW6Npg);
		auto f_10_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 140; INDEX_B4GEMW6Npg < 140 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[10] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(34).addWork(f_10_B4GEMW6Npg);
		auto f_11_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 144; INDEX_B4GEMW6Npg < 144 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[11] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(35).addWork(f_11_B4GEMW6Npg);
		auto f_12_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 148; INDEX_B4GEMW6Npg < 148 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[12] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(36).addWork(f_12_B4GEMW6Npg);
		auto f_13_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 152; INDEX_B4GEMW6Npg < 152 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[13] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(37).addWork(f_13_B4GEMW6Npg);
		auto f_14_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 156; INDEX_B4GEMW6Npg < 156 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[14] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(38).addWork(f_14_B4GEMW6Npg);
		auto f_15_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 160; INDEX_B4GEMW6Npg < 160 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[15] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(39).addWork(f_15_B4GEMW6Npg);
		auto f_16_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 164; INDEX_B4GEMW6Npg < 164 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[16] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(40).addWork(f_16_B4GEMW6Npg);
		auto f_17_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 168; INDEX_B4GEMW6Npg < 168 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[17] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(41).addWork(f_17_B4GEMW6Npg);
		auto f_18_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 172; INDEX_B4GEMW6Npg < 172 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[18] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(42).addWork(f_18_B4GEMW6Npg);
		auto f_19_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 176; INDEX_B4GEMW6Npg < 176 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[19] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(43).addWork(f_19_B4GEMW6Npg);
		auto f_20_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 180; INDEX_B4GEMW6Npg < 180 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[20] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(44).addWork(f_20_B4GEMW6Npg);
		auto f_21_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 184; INDEX_B4GEMW6Npg < 184 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[21] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(45).addWork(f_21_B4GEMW6Npg);
		auto f_22_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 188; INDEX_B4GEMW6Npg < 188 + 4; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[22] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(46).addWork(f_22_B4GEMW6Npg);
		auto f_23_B4GEMW6Npg = [&] () {
			for (size_t INDEX_B4GEMW6Npg = 192; INDEX_B4GEMW6Npg < 192 + 8; ++INDEX_B4GEMW6Npg) {
				partialResult_B4GEMW6Npg[23] += initial_1b2o85FlAH[(INDEX_B4GEMW6Npg)];
			}
		};
		getPool()->at(47).addWork(f_23_B4GEMW6Npg);
		Bit_Mask * mask_ptr_B4GEMW6Npg = new Bit_Mask(48,false);
		for (size_t i_B4GEMW6Npg = 24; i_B4GEMW6Npg < 48; ++i_B4GEMW6Npg) {
			mask_ptr_B4GEMW6Npg->setBarrier(i_B4GEMW6Npg);
		}
		boost::shared_ptr<Bit_Mask>mask_B4GEMW6Npg (mask_ptr_B4GEMW6Npg);
		barrier(mask_B4GEMW6Npg);
		auto lambda_reduction_B4GEMW6Npg = [partialResult_B4GEMW6Npg, &temp_data_02QRNPblbF ,&reduction_lock_02QRNPblbF] () {
			pthread_mutex_lock(&reduction_lock_02QRNPblbF);
			temp_data_02QRNPblbF = reduction_sum(temp_data_02QRNPblbF, partialResult_B4GEMW6Npg, 24, 0);
			pthread_mutex_unlock(&reduction_lock_02QRNPblbF);
		};
		getPool()->at(24).addWork(lambda_reduction_B4GEMW6Npg);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_u813eE1hub = new Bit_Mask(48,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_u813eE1hub (mask_ptr_u813eE1hub);
		self_barrier(boost_mask_ptr_u813eE1hub);
	}
	result_kCPREMpoI1 = temp_data_02QRNPblbF;
	if (rank == 0) {
		if (result_kCPREMpoI1 != 200) {
			print("summation not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_1b2o85FlAH);
	MPI_Finalize();
	return 0;


}

