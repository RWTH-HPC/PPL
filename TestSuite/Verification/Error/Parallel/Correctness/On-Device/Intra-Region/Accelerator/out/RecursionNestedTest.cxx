/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/RecursionNestedTest.hxx"
#include "includes/cuda_lib_RecursionNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_gJ1dDQWGX2;
	int32_t* initial_EbYenl3BrQ;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_EbYenl3BrQ = Init_List(1, initial_EbYenl3BrQ, 200LL * 1LL);
	result_gJ1dDQWGX2 = Init_List(1, result_gJ1dDQWGX2, 200LL * 1LL);
	int32_t* GPU_Data_fBkHXGElr9;
	if (rank == 0) {
		auto f_alloc_UVIhRiY150 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_fBkHXGElr9, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_UVIhRiY150);
	}
	if (rank == 0) {
		auto f_movement_LeZkoAAoDh = [&] () {
			cuda_host2device_wrapper(&GPU_Data_fBkHXGElr9[0], &initial_EbYenl3BrQ[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_LeZkoAAoDh);
	}
	int32_t* GPU_Data_WxZjF8tjj4;
	if (rank == 0) {
		auto f_alloc_fY9DaZ1a2I = [&] () {
			cuda_alloc_wrapper(&GPU_Data_WxZjF8tjj4, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_fY9DaZ1a2I);
	}
	if (rank == 0) {
		auto f_gpu_5S36YZbPJO = [&] () {
			cuda_wrapper_increment_5S36YZbPJO(GPU_Data_fBkHXGElr9, GPU_Data_WxZjF8tjj4 );
		};
		getGPUPool()->at(1).addWork(f_gpu_5S36YZbPJO);
	}
	if (rank == 0) {
		auto f_dealloc_S1IAhtPPEs = [&] () {
			cuda_dealloc_wrapper(GPU_Data_fBkHXGElr9);
		};
		getGPUPool()->at(1).addWork(f_dealloc_S1IAhtPPEs);
	}
	if (rank == 0) {
		auto f_movement_OsG1OX6ai6 = [&] () {
			cuda_device2host_wrapper(&result_gJ1dDQWGX2[0], &GPU_Data_WxZjF8tjj4[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_OsG1OX6ai6);
	}
	if (rank == 0) {
		auto f_dealloc_aEh7WHOJor = [&] () {
			cuda_dealloc_wrapper(GPU_Data_WxZjF8tjj4);
		};
		getGPUPool()->at(1).addWork(f_dealloc_aEh7WHOJor);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_zvDCGfbtaa = new Bit_Mask(2,true);
		mask_ptr_zvDCGfbtaa->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_zvDCGfbtaa (mask_ptr_zvDCGfbtaa);
		cuda_sync_device(boost_mask_ptr_zvDCGfbtaa);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if (result_gJ1dDQWGX2[(i)] != 4) {
				print("Recursion not correct! Error in element: ", i);
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_gJ1dDQWGX2);
	std::free(initial_EbYenl3BrQ);
	MPI_Finalize();
	return 0;


}

