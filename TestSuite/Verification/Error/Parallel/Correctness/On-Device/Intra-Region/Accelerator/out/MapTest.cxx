/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapTest.hxx"
#include "includes/cuda_lib_MapTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_qB8gMN6lDm;
	int32_t* result_seq_i9NXyt1oRA;
	int32_t* initial_fYXpDZdEol;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_fYXpDZdEol = Init_List(1, initial_fYXpDZdEol, 200LL * 1LL);
	result_qB8gMN6lDm = Init_List(result_qB8gMN6lDm, 200LL * 1LL);
	result_seq_i9NXyt1oRA = Init_List(result_seq_i9NXyt1oRA, 200LL * 1LL);
	int32_t* GPU_Data_ljRjoaxBJA;
	if (rank == 0) {
		auto f_alloc_Qk4jPA8xqq = [&] () {
			cuda_alloc_wrapper(&GPU_Data_ljRjoaxBJA, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_Qk4jPA8xqq);
	}
	if (rank == 0) {
		auto f_movement_bPOLYjHVT5 = [&] () {
			cuda_host2device_wrapper(&GPU_Data_ljRjoaxBJA[0], &initial_fYXpDZdEol[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_bPOLYjHVT5);
	}
	int32_t* GPU_Data_WRBpQv4Et5;
	if (rank == 0) {
		auto f_alloc_WEK1m5YtPT = [&] () {
			cuda_alloc_wrapper(&GPU_Data_WRBpQv4Et5, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_WEK1m5YtPT);
	}
	if (rank == 0) {
		auto f_gpu_Nsskf7AveP = [&] () {
			cuda_wrapper_increment_Nsskf7AveP(GPU_Data_ljRjoaxBJA, GPU_Data_WRBpQv4Et5 );
		};
		getGPUPool()->at(1).addWork(f_gpu_Nsskf7AveP);
	}
	if (rank == 0) {
		auto f_movement_sAlXDFA8WD = [&] () {
			cuda_device2host_wrapper(&result_qB8gMN6lDm[0], &GPU_Data_WRBpQv4Et5[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_sAlXDFA8WD);
	}
	if (rank == 0) {
		auto f_dealloc_Ql9COOf3J5 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_WRBpQv4Et5);
		};
		getGPUPool()->at(1).addWork(f_dealloc_Ql9COOf3J5);
	}
	if (rank == 0) {
		auto f_dealloc_uWDsXPxHjW = [&] () {
			cuda_dealloc_wrapper(GPU_Data_ljRjoaxBJA);
		};
		getGPUPool()->at(1).addWork(f_dealloc_uWDsXPxHjW);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_MWAY5VHM6n = new Bit_Mask(2,true);
		mask_ptr_MWAY5VHM6n->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_MWAY5VHM6n (mask_ptr_MWAY5VHM6n);
		cuda_sync_device(boost_mask_ptr_MWAY5VHM6n);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_i9NXyt1oRA[(i)] = initial_fYXpDZdEol[(i)] + 1;
			if (result_seq_i9NXyt1oRA[(i)] != result_qB8gMN6lDm[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_qB8gMN6lDm);
	std::free(result_seq_i9NXyt1oRA);
	std::free(initial_fYXpDZdEol);
	MPI_Finalize();
	return 0;


}

