/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapNestedTest.hxx"
#include "includes/cuda_lib_MapNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_NcgNP2jlMG;
	int32_t* result_seq_BQOvbpjQaq;
	int32_t* initial_4p4ktWJZxo;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_4p4ktWJZxo = Init_List(1, initial_4p4ktWJZxo, 200LL * 200LL * 1LL);
	result_NcgNP2jlMG = Init_List(result_NcgNP2jlMG, 200LL * 200LL * 1LL);
	result_seq_BQOvbpjQaq = Init_List(result_seq_BQOvbpjQaq, 200LL * 200LL * 1LL);
	int32_t* GPU_Data_E2dvlS8Usb;
	if (rank == 0) {
		auto f_alloc_uAhX4TYAnU = [&] () {
			cuda_alloc_wrapper(&GPU_Data_E2dvlS8Usb, sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_alloc_uAhX4TYAnU);
	}
	if (rank == 0) {
		auto f_movement_qtGOVJ6Moe = [&] () {
			cuda_host2device_wrapper(&GPU_Data_E2dvlS8Usb[0], &initial_4p4ktWJZxo[0], sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_movement_qtGOVJ6Moe);
	}
	int32_t* GPU_Data_2RCJHf6RiD;
	if (rank == 0) {
		auto f_alloc_R4CevDZQhb = [&] () {
			cuda_alloc_wrapper(&GPU_Data_2RCJHf6RiD, sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_alloc_R4CevDZQhb);
	}
	if (rank == 0) {
		auto f_gpu_FU1WgUdkbG = [&] () {
			cuda_wrapper_matrixIncrement_FU1WgUdkbG(GPU_Data_E2dvlS8Usb, GPU_Data_2RCJHf6RiD );
		};
		getGPUPool()->at(1).addWork(f_gpu_FU1WgUdkbG);
	}
	if (rank == 0) {
		auto f_dealloc_LYeg19Gu9H = [&] () {
			cuda_dealloc_wrapper(GPU_Data_E2dvlS8Usb);
		};
		getGPUPool()->at(1).addWork(f_dealloc_LYeg19Gu9H);
	}
	if (rank == 0) {
		auto f_movement_al8EtDGMN3 = [&] () {
			cuda_device2host_wrapper(&result_NcgNP2jlMG[0], &GPU_Data_2RCJHf6RiD[0], sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_movement_al8EtDGMN3);
	}
	if (rank == 0) {
		auto f_dealloc_VN7afYDTyW = [&] () {
			cuda_dealloc_wrapper(GPU_Data_2RCJHf6RiD);
		};
		getGPUPool()->at(1).addWork(f_dealloc_VN7afYDTyW);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_M3lFzNsKPD = new Bit_Mask(2,true);
		mask_ptr_M3lFzNsKPD->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_M3lFzNsKPD (mask_ptr_M3lFzNsKPD);
		cuda_sync_device(boost_mask_ptr_M3lFzNsKPD);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			for ( int32_t j = 0; j < 200; j++ ) {
				result_seq_BQOvbpjQaq[200LL * (i) + (j)] = initial_4p4ktWJZxo[200LL * (i) + (j)] + 1;
				if (result_seq_BQOvbpjQaq[200LL * (i) + (j)] != result_NcgNP2jlMG[200LL * (i) + (j)]) {
					print("value at element ", i, ",", j, " is wrong!");
					MPI_Abort(MPI_COMM_WORLD, 1);
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_NcgNP2jlMG);
	std::free(result_seq_BQOvbpjQaq);
	std::free(initial_4p4ktWJZxo);
	MPI_Finalize();
	return 0;


}

