/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPNestedTest.hxx"
#include "includes/cuda_lib_DPNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_D7HcKyZsyA;
	int32_t* result_seq_8ZZFzXSfCi;
	int32_t* initial_O7UVdy8jFf;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_O7UVdy8jFf = Init_List(1, initial_O7UVdy8jFf, 200LL * 200LL * 1LL);
	result_D7HcKyZsyA = Init_List(result_D7HcKyZsyA, 200LL * 200LL * 1LL);
	result_seq_8ZZFzXSfCi = Init_List(result_seq_8ZZFzXSfCi, 200LL * 200LL * 1LL);
	int32_t* GPU_Data_LorjXrda5A;
	if (rank == 0) {
		auto f_alloc_FGKQUqL117 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_LorjXrda5A, sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_alloc_FGKQUqL117);
	}
	if (rank == 0) {
		auto f_movement_fYJHjStQZz = [&] () {
			cuda_host2device_wrapper(&GPU_Data_LorjXrda5A[0], &initial_O7UVdy8jFf[0], sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_movement_fYJHjStQZz);
	}
	int32_t* GPU_Data_8oodUym7AZ;
	if (rank == 0) {
		auto f_alloc_pBrRa1v7Qx = [&] () {
			cuda_alloc_wrapper(&GPU_Data_8oodUym7AZ, sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_alloc_pBrRa1v7Qx);
	}
	if (rank == 0) {
		auto f_gpu_eqctmEcrHD = [&] () {
			cuda_wrapper_matrixIncrement_eqctmEcrHD(GPU_Data_LorjXrda5A, GPU_Data_8oodUym7AZ );
		};
		getGPUPool()->at(1).addWork(f_gpu_eqctmEcrHD);
	}
	if (rank == 0) {
		auto f_movement_eNK4fj65MS = [&] () {
			cuda_device2host_wrapper(&result_D7HcKyZsyA[0], &GPU_Data_8oodUym7AZ[0], sizeof(int32_t) * 40000);
		};
		getGPUPool()->at(1).addWork(f_movement_eNK4fj65MS);
	}
	if (rank == 0) {
		auto f_dealloc_dvcPH28NEp = [&] () {
			cuda_dealloc_wrapper(GPU_Data_8oodUym7AZ);
		};
		getGPUPool()->at(1).addWork(f_dealloc_dvcPH28NEp);
	}
	if (rank == 0) {
		auto f_dealloc_1lcyds7VPH = [&] () {
			cuda_dealloc_wrapper(GPU_Data_LorjXrda5A);
		};
		getGPUPool()->at(1).addWork(f_dealloc_1lcyds7VPH);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_VxM3lRG9RB = new Bit_Mask(2,true);
		mask_ptr_VxM3lRG9RB->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_VxM3lRG9RB (mask_ptr_VxM3lRG9RB);
		cuda_sync_device(boost_mask_ptr_VxM3lRG9RB);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			for ( int32_t j = 0; j < 200; j++ ) {
				result_seq_8ZZFzXSfCi[200LL * (i) + (j)] = 11;
				if (result_seq_8ZZFzXSfCi[200LL * (i) + (j)] != result_D7HcKyZsyA[200LL * (i) + (j)]) {
					print("value at element ", i, ",", j, " is wrong!");
					MPI_Abort(MPI_COMM_WORLD, 1);
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_D7HcKyZsyA);
	std::free(result_seq_8ZZFzXSfCi);
	std::free(initial_O7UVdy8jFf);
	MPI_Finalize();
	return 0;


}

