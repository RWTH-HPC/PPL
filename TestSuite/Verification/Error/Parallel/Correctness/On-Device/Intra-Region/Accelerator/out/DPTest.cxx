/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_O5snY1gmaG;
	int32_t* initial_4q9liNyhoj;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_4q9liNyhoj = Init_List(1, initial_4q9liNyhoj, 200LL * 1LL);
	result_O5snY1gmaG = Init_List(result_O5snY1gmaG, 200LL * 1LL);
	int32_t* GPU_Data_ZW2hJPScD7;
	if (rank == 0) {
		auto f_alloc_uTONGgEy5q = [&] () {
			cuda_alloc_wrapper(&GPU_Data_ZW2hJPScD7, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_uTONGgEy5q);
	}
	if (rank == 0) {
		auto f_movement_jkrpDWcOtY = [&] () {
			cuda_host2device_wrapper(&GPU_Data_ZW2hJPScD7[0], &initial_4q9liNyhoj[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_jkrpDWcOtY);
	}
	int32_t* GPU_Data_rNSCKnG9ug;
	if (rank == 0) {
		auto f_alloc_ybPCIR46DN = [&] () {
			cuda_alloc_wrapper(&GPU_Data_rNSCKnG9ug, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_ybPCIR46DN);
	}
	for (size_t INDEX0_307FHaZTU5 = 0; INDEX0_307FHaZTU5 < 0 + 7; ++INDEX0_307FHaZTU5) {
		if (rank == 0) {
			auto f_gpu_ektUFQFpO1 = [&] () mutable {
				cuda_wrapper_incr_ektUFQFpO1(GPU_Data_ZW2hJPScD7, GPU_Data_rNSCKnG9ug, INDEX0_307FHaZTU5);
			};
			getGPUPool()->at(1).addWork(f_gpu_ektUFQFpO1);
		}
		if (rank == 0) {
			auto f_movement_TGmZJEy7pD = [&] () {
				cuda_device2host_wrapper(&result_O5snY1gmaG[0], &GPU_Data_rNSCKnG9ug[0], sizeof(int32_t) * 200);
			};
			getGPUPool()->at(1).addWork(f_movement_TGmZJEy7pD);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_3jGcmMK5Qo = new Bit_Mask(2,true);
			mask_ptr_3jGcmMK5Qo->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_3jGcmMK5Qo (mask_ptr_3jGcmMK5Qo);
			cuda_sync_device(boost_mask_ptr_3jGcmMK5Qo);
		}
		Set_Partial_Array(initial_4q9liNyhoj, result_O5snY1gmaG, 200);
		if (rank == 0) {
			auto f_movement_oxI5FtmB3z = [&] () {
				cuda_host2device_wrapper(&GPU_Data_ZW2hJPScD7[0], &initial_4q9liNyhoj[0], sizeof(int32_t) * 200);
			};
			getGPUPool()->at(1).addWork(f_movement_oxI5FtmB3z);
		}
	}
	if (rank == 0) {
		auto f_dealloc_qOTLcQHjxb = [&] () {
			cuda_dealloc_wrapper(GPU_Data_ZW2hJPScD7);
		};
		getGPUPool()->at(1).addWork(f_dealloc_qOTLcQHjxb);
	}
	if (rank == 0) {
		auto f_movement_tQIqUqBnA0 = [&] () {
			cuda_device2host_wrapper(&result_O5snY1gmaG[0], &GPU_Data_rNSCKnG9ug[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_tQIqUqBnA0);
	}
	if (rank == 0) {
		auto f_dealloc_hXEtXLzTdK = [&] () {
			cuda_dealloc_wrapper(GPU_Data_rNSCKnG9ug);
		};
		getGPUPool()->at(1).addWork(f_dealloc_hXEtXLzTdK);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_l5OCZvpUMg = new Bit_Mask(2,true);
		mask_ptr_l5OCZvpUMg->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_l5OCZvpUMg (mask_ptr_l5OCZvpUMg);
		cuda_sync_device(boost_mask_ptr_l5OCZvpUMg);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_O5snY1gmaG[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_O5snY1gmaG);
	std::free(initial_4q9liNyhoj);
	MPI_Finalize();
	return 0;


}

