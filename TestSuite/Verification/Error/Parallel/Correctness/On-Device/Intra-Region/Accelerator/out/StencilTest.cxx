/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/StencilTest.hxx"
#include "includes/cuda_lib_StencilTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_fPrqt0iey2;
	int32_t* result_seq_108pbpZNRi;
	int32_t* initial_AE8KeHIIpH;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_AE8KeHIIpH = Init_List(1, initial_AE8KeHIIpH, 200LL * 100LL * 100LL * 1LL);
	result_fPrqt0iey2 = Init_List(result_fPrqt0iey2, 200LL * 100LL * 100LL * 1LL);
	result_seq_108pbpZNRi = Init_List(result_seq_108pbpZNRi, 200LL * 100LL * 100LL * 1LL);
	int32_t* GPU_Data_Z1mLZQx9Rz;
	if (rank == 0) {
		auto f_alloc_fkNegoXuQZ = [&] () {
			cuda_alloc_wrapper(&GPU_Data_Z1mLZQx9Rz, sizeof(int32_t) * 2000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_fkNegoXuQZ);
	}
	if (rank == 0) {
		auto f_movement_usYOykNiSn = [&] () {
			cuda_host2device_wrapper(&GPU_Data_Z1mLZQx9Rz[0], &initial_AE8KeHIIpH[0], sizeof(int32_t) * 2000000);
		};
		getGPUPool()->at(1).addWork(f_movement_usYOykNiSn);
	}
	int32_t* GPU_Data_it4D6SeGgt;
	if (rank == 0) {
		auto f_alloc_zKFXJTK0ap = [&] () {
			cuda_alloc_wrapper(&GPU_Data_it4D6SeGgt, sizeof(int32_t) * 1990000);
		};
		getGPUPool()->at(1).addWork(f_alloc_zKFXJTK0ap);
	}
	if (rank == 0) {
		auto f_gpu_SqbO3lxnl4 = [&] () {
			cuda_wrapper_sum_SqbO3lxnl4(GPU_Data_Z1mLZQx9Rz, GPU_Data_it4D6SeGgt );
		};
		getGPUPool()->at(1).addWork(f_gpu_SqbO3lxnl4);
	}
	if (rank == 0) {
		auto f_movement_xCOIXpo1as = [&] () {
			cuda_device2host_wrapper(&result_fPrqt0iey2[10000], &GPU_Data_it4D6SeGgt[10000], sizeof(int32_t) * 1980000);
		};
		getGPUPool()->at(1).addWork(f_movement_xCOIXpo1as);
	}
	if (rank == 0) {
		auto f_dealloc_J4OyWu7KGC = [&] () {
			cuda_dealloc_wrapper(GPU_Data_it4D6SeGgt);
		};
		getGPUPool()->at(1).addWork(f_dealloc_J4OyWu7KGC);
	}
	if (rank == 0) {
		auto f_dealloc_MLkyfGqn8i = [&] () {
			cuda_dealloc_wrapper(GPU_Data_Z1mLZQx9Rz);
		};
		getGPUPool()->at(1).addWork(f_dealloc_MLkyfGqn8i);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_NSyTYOMmc8 = new Bit_Mask(2,true);
		mask_ptr_NSyTYOMmc8->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_NSyTYOMmc8 (mask_ptr_NSyTYOMmc8);
		cuda_sync_device(boost_mask_ptr_NSyTYOMmc8);
	}
	if (rank == 0) {
		for ( int32_t i = 1; i < 199; i++ ) {
			for ( int32_t j = 1; j < 99; j++ ) {
				for ( int32_t k = 1; k < 99; k++ ) {
					result_seq_108pbpZNRi[100LL * 100LL * (i) + 100LL * (j) + (k)] = initial_AE8KeHIIpH[100LL * 100LL * (i + 1) + 100LL * (j) + (k)] + initial_AE8KeHIIpH[100LL * 100LL * (i) + 100LL * (j + 1) + (k)] + initial_AE8KeHIIpH[100LL * 100LL * (i) + 100LL * (j) + (k + 1)] + initial_AE8KeHIIpH[100LL * 100LL * (i - 1) + 100LL * (j) + (k)] + initial_AE8KeHIIpH[100LL * 100LL * (i) + 100LL * (j - 1) + (k)] + initial_AE8KeHIIpH[100LL * 100LL * (i) + 100LL * (j) + (k - 1)] + initial_AE8KeHIIpH[100LL * 100LL * (i) + 100LL * (j) + (k)];
					if (result_fPrqt0iey2[100LL * 100LL * (i) + 100LL * (j) + (k)] != result_seq_108pbpZNRi[100LL * 100LL * (i) + 100LL * (j) + (k)]) {
						print("Result at cell (", i, ",", j, ",", k, ") not correct!");
						MPI_Abort(MPI_COMM_WORLD, 1);
					}
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_fPrqt0iey2);
	std::free(result_seq_108pbpZNRi);
	std::free(initial_AE8KeHIIpH);
	MPI_Finalize();
	return 0;


}

