/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_Bd5XrVmTLu;
	int32_t* initial_1ROPqFElvp;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_1ROPqFElvp = Init_List(1, initial_1ROPqFElvp, 200LL * 1LL);
	if (rank == 0) {
		result_Bd5XrVmTLu = 0;
	}
	int32_t* GPU_Data_QguhGdu7y2;
	if (rank == 0) {
		auto f_alloc_A1Z7imDYl6 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_QguhGdu7y2, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_A1Z7imDYl6);
	}
	if (rank == 0) {
		auto f_movement_Bct891ppj9 = [&] () {
			cuda_host2device_wrapper(&GPU_Data_QguhGdu7y2[0], &initial_1ROPqFElvp[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_Bct891ppj9);
	}
	int32_t* GPU_Data_fPyln2KQIH;
	if (rank == 0) {
		auto f_alloc_XzhcM8luDW = [&] () {
			cuda_alloc_wrapper(&GPU_Data_fPyln2KQIH, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_alloc_XzhcM8luDW);
	}
	if (rank == 0) {
		auto f_gpu_5X7iW6ACAt = [&] () {
			cuda_wrapper_sum_5X7iW6ACAt(GPU_Data_QguhGdu7y2, GPU_Data_fPyln2KQIH );
		};
		getGPUPool()->at(1).addWork(f_gpu_5X7iW6ACAt);
	}
	if (rank == 0) {
		auto f_dealloc_f96Kku6L5U = [&] () {
			cuda_dealloc_wrapper(GPU_Data_QguhGdu7y2);
		};
		getGPUPool()->at(1).addWork(f_dealloc_f96Kku6L5U);
	}
	if (rank == 0) {
		auto f_movement_uiSSlHdO9E = [&] () {
			cuda_device2host_wrapper(&result_Bd5XrVmTLu, &GPU_Data_fPyln2KQIH[0], sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_movement_uiSSlHdO9E);
	}
	if (rank == 0) {
		auto f_dealloc_mg9AG6gDrl = [&] () {
			cuda_dealloc_wrapper(GPU_Data_fPyln2KQIH);
		};
		getGPUPool()->at(1).addWork(f_dealloc_mg9AG6gDrl);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_5Am39VvY3M = new Bit_Mask(2,true);
		mask_ptr_5Am39VvY3M->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_5Am39VvY3M (mask_ptr_5Am39VvY3M);
		cuda_sync_device(boost_mask_ptr_5Am39VvY3M);
	}
	if (rank == 0) {
		if (result_Bd5XrVmTLu != 200) {
			print("summation not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_1ROPqFElvp);
	MPI_Finalize();
	return 0;


}

