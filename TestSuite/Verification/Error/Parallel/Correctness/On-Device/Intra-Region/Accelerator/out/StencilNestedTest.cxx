/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/StencilNestedTest.hxx"
#include "includes/cuda_lib_StencilNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_qN04jyEyY1;
	int32_t* result_seq_4mTpnmY96J;
	int32_t* initial_PiJdo0ggGx;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_PiJdo0ggGx = Init_List(1, initial_PiJdo0ggGx, 200LL * 100LL * 100LL * 1LL);
	result_qN04jyEyY1 = Init_List(result_qN04jyEyY1, 200LL * 100LL * 100LL * 1LL);
	result_seq_4mTpnmY96J = Init_List(result_seq_4mTpnmY96J, 200LL * 100LL * 100LL * 1LL);
	int32_t* GPU_Data_9DxFhhCGUT;
	if (rank == 0) {
		auto f_alloc_0rhCM8DtfT = [&] () {
			cuda_alloc_wrapper(&GPU_Data_9DxFhhCGUT, sizeof(int32_t) * 2000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_0rhCM8DtfT);
	}
	if (rank == 0) {
		auto f_movement_253ZaZVMr4 = [&] () {
			cuda_host2device_wrapper(&GPU_Data_9DxFhhCGUT[0], &initial_PiJdo0ggGx[0], sizeof(int32_t) * 2000000);
		};
		getGPUPool()->at(1).addWork(f_movement_253ZaZVMr4);
	}
	int32_t* GPU_Data_7llNLRaeo1;
	if (rank == 0) {
		auto f_alloc_k2vXErk8P3 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_7llNLRaeo1, sizeof(int32_t) * 2000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_k2vXErk8P3);
	}
	if (rank == 0) {
		auto f_gpu_pLNuzDlBWy = [&] () {
			cuda_wrapper_partialStencil_pLNuzDlBWy(GPU_Data_9DxFhhCGUT, GPU_Data_7llNLRaeo1 );
		};
		getGPUPool()->at(1).addWork(f_gpu_pLNuzDlBWy);
	}
	if (rank == 0) {
		auto f_dealloc_ij6xBAHdcr = [&] () {
			cuda_dealloc_wrapper(GPU_Data_9DxFhhCGUT);
		};
		getGPUPool()->at(1).addWork(f_dealloc_ij6xBAHdcr);
	}
	if (rank == 0) {
		auto f_movement_vLjrdGj7vR = [&] () {
			cuda_device2host_wrapper(&result_qN04jyEyY1[0], &GPU_Data_7llNLRaeo1[0], sizeof(int32_t) * 2000000);
		};
		getGPUPool()->at(1).addWork(f_movement_vLjrdGj7vR);
	}
	if (rank == 0) {
		auto f_dealloc_J2eZQXrhMH = [&] () {
			cuda_dealloc_wrapper(GPU_Data_7llNLRaeo1);
		};
		getGPUPool()->at(1).addWork(f_dealloc_J2eZQXrhMH);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_gNSWPvZMvQ = new Bit_Mask(2,true);
		mask_ptr_gNSWPvZMvQ->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_gNSWPvZMvQ (mask_ptr_gNSWPvZMvQ);
		cuda_sync_device(boost_mask_ptr_gNSWPvZMvQ);
	}
	if (rank == 0) {
		for ( int32_t i = 1; i < 199; i++ ) {
			for ( int32_t j = 1; j < 99; j++ ) {
				for ( int32_t k = 1; k < 99; k++ ) {
					result_seq_4mTpnmY96J[100LL * 100LL * (i) + 100LL * (j) + (k)] = initial_PiJdo0ggGx[100LL * 100LL * (i) + 100LL * (j) + (k)] + initial_PiJdo0ggGx[100LL * 100LL * (i) + 100LL * (j + 1) + (k)] + initial_PiJdo0ggGx[100LL * 100LL * (i) + 100LL * (j) + (k + 1)] + initial_PiJdo0ggGx[100LL * 100LL * (i) + 100LL * (j - 1) + (k)] + initial_PiJdo0ggGx[100LL * 100LL * (i) + 100LL * (j) + (k - 1)];
					if (result_qN04jyEyY1[100LL * 100LL * (i) + 100LL * (j) + (k)] != result_seq_4mTpnmY96J[100LL * 100LL * (i) + 100LL * (j) + (k)]) {
						print("Result at cell (", i, ",", j, ",", k, ") not correct!");
						MPI_Abort(MPI_COMM_WORLD, 1);
					}
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_qN04jyEyY1);
	std::free(result_seq_4mTpnmY96J);
	std::free(initial_PiJdo0ggGx);
	MPI_Finalize();
	return 0;


}

