/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/RecursionNestedTest.hxx"
#include "includes/cuda_lib_RecursionNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_RIequQpmat;
	int32_t* initial_PPryfKpfns;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_PPryfKpfns = Init_List(1, initial_PPryfKpfns, 200LL * 1LL);
	result_RIequQpmat = Init_List(1, result_RIequQpmat, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 0; INDEX_SVL9mZfQfZ < 0 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(0).addWork(f_0_SVL9mZfQfZ);
		auto f_1_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 8; INDEX_SVL9mZfQfZ < 8 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(1).addWork(f_1_SVL9mZfQfZ);
		auto f_2_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 16; INDEX_SVL9mZfQfZ < 16 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(2).addWork(f_2_SVL9mZfQfZ);
		auto f_3_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 24; INDEX_SVL9mZfQfZ < 24 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(3).addWork(f_3_SVL9mZfQfZ);
		auto f_4_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 32; INDEX_SVL9mZfQfZ < 32 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(4).addWork(f_4_SVL9mZfQfZ);
		auto f_5_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 40; INDEX_SVL9mZfQfZ < 40 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(5).addWork(f_5_SVL9mZfQfZ);
		auto f_6_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 48; INDEX_SVL9mZfQfZ < 48 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(6).addWork(f_6_SVL9mZfQfZ);
		auto f_7_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 56; INDEX_SVL9mZfQfZ < 56 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(7).addWork(f_7_SVL9mZfQfZ);
		auto f_8_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 64; INDEX_SVL9mZfQfZ < 64 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(8).addWork(f_8_SVL9mZfQfZ);
		auto f_9_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 72; INDEX_SVL9mZfQfZ < 72 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(9).addWork(f_9_SVL9mZfQfZ);
		auto f_10_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 80; INDEX_SVL9mZfQfZ < 80 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(10).addWork(f_10_SVL9mZfQfZ);
		auto f_11_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 88; INDEX_SVL9mZfQfZ < 88 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(11).addWork(f_11_SVL9mZfQfZ);
		auto f_12_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 96; INDEX_SVL9mZfQfZ < 96 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(12).addWork(f_12_SVL9mZfQfZ);
		auto f_13_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 104; INDEX_SVL9mZfQfZ < 104 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(13).addWork(f_13_SVL9mZfQfZ);
		auto f_14_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 112; INDEX_SVL9mZfQfZ < 112 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(14).addWork(f_14_SVL9mZfQfZ);
		auto f_15_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 120; INDEX_SVL9mZfQfZ < 120 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(15).addWork(f_15_SVL9mZfQfZ);
		auto f_16_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 128; INDEX_SVL9mZfQfZ < 128 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(16).addWork(f_16_SVL9mZfQfZ);
		auto f_17_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 136; INDEX_SVL9mZfQfZ < 136 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(17).addWork(f_17_SVL9mZfQfZ);
		auto f_18_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 144; INDEX_SVL9mZfQfZ < 144 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(18).addWork(f_18_SVL9mZfQfZ);
		auto f_19_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 152; INDEX_SVL9mZfQfZ < 152 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(19).addWork(f_19_SVL9mZfQfZ);
		auto f_20_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 160; INDEX_SVL9mZfQfZ < 160 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(20).addWork(f_20_SVL9mZfQfZ);
		auto f_21_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 168; INDEX_SVL9mZfQfZ < 168 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(21).addWork(f_21_SVL9mZfQfZ);
		auto f_22_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 176; INDEX_SVL9mZfQfZ < 176 + 8; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(22).addWork(f_22_SVL9mZfQfZ);
		auto f_23_SVL9mZfQfZ = [&] () {
			for (size_t INDEX_SVL9mZfQfZ = 184; INDEX_SVL9mZfQfZ < 184 + 16; ++INDEX_SVL9mZfQfZ) {
				result_RIequQpmat[(INDEX_SVL9mZfQfZ)] = counter(initial_PPryfKpfns[(INDEX_SVL9mZfQfZ)]);
			}
		};
		getPool()->at(23).addWork(f_23_SVL9mZfQfZ);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_s2r2srbV9z = new Bit_Mask(48,true);
		for (size_t i_Cp6H07HgkH = 0; i_Cp6H07HgkH < 24; ++i_Cp6H07HgkH) {
			mask_ptr_s2r2srbV9z->setBarrier(i_Cp6H07HgkH);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_s2r2srbV9z (mask_ptr_s2r2srbV9z);
		self_barrier(boost_mask_ptr_s2r2srbV9z);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if (result_RIequQpmat[(i)] != 4) {
				print("Recursion not correct! Error in element: ", i);
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_RIequQpmat);
	std::free(initial_PPryfKpfns);
	MPI_Finalize();
	return 0;


}

