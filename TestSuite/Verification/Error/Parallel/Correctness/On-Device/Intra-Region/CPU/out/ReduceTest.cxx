/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_o3GD86Fahb;
	int32_t* initial_C6skVKoFl5;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_C6skVKoFl5 = Init_List(1, initial_C6skVKoFl5, 200LL * 1LL);
	if (rank == 0) {
		result_o3GD86Fahb = 0;
	}
	if (rank == 0) {
		int32_t* partialResult_9hidlLoeKH;
		partialResult_9hidlLoeKH = Init_List(result_o3GD86Fahb, partialResult_9hidlLoeKH, 24);
		auto f_0_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 0; INDEX_9hidlLoeKH < 0 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[0] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(0).addWork(f_0_9hidlLoeKH);
		auto f_1_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 8; INDEX_9hidlLoeKH < 8 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[1] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(1).addWork(f_1_9hidlLoeKH);
		auto f_2_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 16; INDEX_9hidlLoeKH < 16 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[2] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(2).addWork(f_2_9hidlLoeKH);
		auto f_3_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 24; INDEX_9hidlLoeKH < 24 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[3] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(3).addWork(f_3_9hidlLoeKH);
		auto f_4_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 32; INDEX_9hidlLoeKH < 32 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[4] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(4).addWork(f_4_9hidlLoeKH);
		auto f_5_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 40; INDEX_9hidlLoeKH < 40 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[5] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(5).addWork(f_5_9hidlLoeKH);
		auto f_6_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 48; INDEX_9hidlLoeKH < 48 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[6] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(6).addWork(f_6_9hidlLoeKH);
		auto f_7_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 56; INDEX_9hidlLoeKH < 56 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[7] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(7).addWork(f_7_9hidlLoeKH);
		auto f_8_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 64; INDEX_9hidlLoeKH < 64 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[8] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(8).addWork(f_8_9hidlLoeKH);
		auto f_9_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 72; INDEX_9hidlLoeKH < 72 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[9] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(9).addWork(f_9_9hidlLoeKH);
		auto f_10_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 80; INDEX_9hidlLoeKH < 80 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[10] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(10).addWork(f_10_9hidlLoeKH);
		auto f_11_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 88; INDEX_9hidlLoeKH < 88 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[11] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(11).addWork(f_11_9hidlLoeKH);
		auto f_12_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 96; INDEX_9hidlLoeKH < 96 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[12] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(12).addWork(f_12_9hidlLoeKH);
		auto f_13_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 104; INDEX_9hidlLoeKH < 104 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[13] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(13).addWork(f_13_9hidlLoeKH);
		auto f_14_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 112; INDEX_9hidlLoeKH < 112 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[14] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(14).addWork(f_14_9hidlLoeKH);
		auto f_15_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 120; INDEX_9hidlLoeKH < 120 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[15] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(15).addWork(f_15_9hidlLoeKH);
		auto f_16_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 128; INDEX_9hidlLoeKH < 128 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[16] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(16).addWork(f_16_9hidlLoeKH);
		auto f_17_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 136; INDEX_9hidlLoeKH < 136 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[17] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(17).addWork(f_17_9hidlLoeKH);
		auto f_18_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 144; INDEX_9hidlLoeKH < 144 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[18] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(18).addWork(f_18_9hidlLoeKH);
		auto f_19_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 152; INDEX_9hidlLoeKH < 152 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[19] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(19).addWork(f_19_9hidlLoeKH);
		auto f_20_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 160; INDEX_9hidlLoeKH < 160 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[20] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(20).addWork(f_20_9hidlLoeKH);
		auto f_21_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 168; INDEX_9hidlLoeKH < 168 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[21] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(21).addWork(f_21_9hidlLoeKH);
		auto f_22_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 176; INDEX_9hidlLoeKH < 176 + 8; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[22] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(22).addWork(f_22_9hidlLoeKH);
		auto f_23_9hidlLoeKH = [&] () {
			for (size_t INDEX_9hidlLoeKH = 184; INDEX_9hidlLoeKH < 184 + 16; ++INDEX_9hidlLoeKH) {
				partialResult_9hidlLoeKH[23] += initial_C6skVKoFl5[(INDEX_9hidlLoeKH)];
			}
		};
		getPool()->at(23).addWork(f_23_9hidlLoeKH);
		Bit_Mask * mask_ptr_9hidlLoeKH = new Bit_Mask(48,false);
		for (size_t i_9hidlLoeKH = 0; i_9hidlLoeKH < 24; ++i_9hidlLoeKH) {
			mask_ptr_9hidlLoeKH->setBarrier(i_9hidlLoeKH);
		}
		boost::shared_ptr<Bit_Mask>mask_9hidlLoeKH (mask_ptr_9hidlLoeKH);
		barrier(mask_9hidlLoeKH);
		auto lambda_reduction_9hidlLoeKH = [partialResult_9hidlLoeKH, &result_o3GD86Fahb] () {
			result_o3GD86Fahb = reduction_sum(result_o3GD86Fahb, partialResult_9hidlLoeKH, 24, 0);
		};
		getPool()->at(0).addWork(lambda_reduction_9hidlLoeKH);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_99tTNvjbxq = new Bit_Mask(48,true);
		for (size_t i_zT0RlYHgvc = 0; i_zT0RlYHgvc < 24; ++i_zT0RlYHgvc) {
			mask_ptr_99tTNvjbxq->setBarrier(i_zT0RlYHgvc);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_99tTNvjbxq (mask_ptr_99tTNvjbxq);
		self_barrier(boost_mask_ptr_99tTNvjbxq);
	}
	if (rank == 0) {
		if (result_o3GD86Fahb != 200) {
			print("summation not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_C6skVKoFl5);
	MPI_Finalize();
	return 0;


}

