/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceNestedTest.hxx"
#include "includes/cuda_lib_ReduceNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_QO5WgOKKJt;
	int32_t* result_seq_relujKdpk1;
	int32_t* initial_YVTJjy4TVc;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_YVTJjy4TVc = Init_List(1, initial_YVTJjy4TVc, 200LL * 200LL * 1LL);
	result_QO5WgOKKJt = Init_List(0, result_QO5WgOKKJt, 200LL * 1LL);
	result_seq_relujKdpk1 = Init_List(0, result_seq_relujKdpk1, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 0; INDEX_0zpco4x4Z8 < 0 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_4nsDseuIua = 0; INDEX_4nsDseuIua < 0 + 200; ++INDEX_4nsDseuIua) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_4nsDseuIua)] + 1;
				}
			}
		};
		getPool()->at(0).addWork(f_0_0zpco4x4Z8);
		auto f_1_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 8; INDEX_0zpco4x4Z8 < 8 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_PWQsUVczWv = 0; INDEX_PWQsUVczWv < 0 + 200; ++INDEX_PWQsUVczWv) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_PWQsUVczWv)] + 1;
				}
			}
		};
		getPool()->at(1).addWork(f_1_0zpco4x4Z8);
		auto f_2_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 16; INDEX_0zpco4x4Z8 < 16 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_HOmobjUQQD = 0; INDEX_HOmobjUQQD < 0 + 200; ++INDEX_HOmobjUQQD) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_HOmobjUQQD)] + 1;
				}
			}
		};
		getPool()->at(2).addWork(f_2_0zpco4x4Z8);
		auto f_3_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 24; INDEX_0zpco4x4Z8 < 24 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_4jzf7MW6R1 = 0; INDEX_4jzf7MW6R1 < 0 + 200; ++INDEX_4jzf7MW6R1) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_4jzf7MW6R1)] + 1;
				}
			}
		};
		getPool()->at(3).addWork(f_3_0zpco4x4Z8);
		auto f_4_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 32; INDEX_0zpco4x4Z8 < 32 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_Sl2ZVxjB0z = 0; INDEX_Sl2ZVxjB0z < 0 + 200; ++INDEX_Sl2ZVxjB0z) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_Sl2ZVxjB0z)] + 1;
				}
			}
		};
		getPool()->at(4).addWork(f_4_0zpco4x4Z8);
		auto f_5_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 40; INDEX_0zpco4x4Z8 < 40 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_y3aDWdCWkC = 0; INDEX_y3aDWdCWkC < 0 + 200; ++INDEX_y3aDWdCWkC) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_y3aDWdCWkC)] + 1;
				}
			}
		};
		getPool()->at(5).addWork(f_5_0zpco4x4Z8);
		auto f_6_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 48; INDEX_0zpco4x4Z8 < 48 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_ooasRMunTz = 0; INDEX_ooasRMunTz < 0 + 200; ++INDEX_ooasRMunTz) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_ooasRMunTz)] + 1;
				}
			}
		};
		getPool()->at(6).addWork(f_6_0zpco4x4Z8);
		auto f_7_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 56; INDEX_0zpco4x4Z8 < 56 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_2RcO43mvaC = 0; INDEX_2RcO43mvaC < 0 + 200; ++INDEX_2RcO43mvaC) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_2RcO43mvaC)] + 1;
				}
			}
		};
		getPool()->at(7).addWork(f_7_0zpco4x4Z8);
		auto f_8_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 64; INDEX_0zpco4x4Z8 < 64 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_0yfu1dZbbl = 0; INDEX_0yfu1dZbbl < 0 + 200; ++INDEX_0yfu1dZbbl) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_0yfu1dZbbl)] + 1;
				}
			}
		};
		getPool()->at(8).addWork(f_8_0zpco4x4Z8);
		auto f_9_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 72; INDEX_0zpco4x4Z8 < 72 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_FolCCTSUJP = 0; INDEX_FolCCTSUJP < 0 + 200; ++INDEX_FolCCTSUJP) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_FolCCTSUJP)] + 1;
				}
			}
		};
		getPool()->at(9).addWork(f_9_0zpco4x4Z8);
		auto f_10_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 80; INDEX_0zpco4x4Z8 < 80 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_GpJ577cVyl = 0; INDEX_GpJ577cVyl < 0 + 200; ++INDEX_GpJ577cVyl) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_GpJ577cVyl)] + 1;
				}
			}
		};
		getPool()->at(10).addWork(f_10_0zpco4x4Z8);
		auto f_11_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 88; INDEX_0zpco4x4Z8 < 88 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_iuZvfNHdcz = 0; INDEX_iuZvfNHdcz < 0 + 200; ++INDEX_iuZvfNHdcz) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_iuZvfNHdcz)] + 1;
				}
			}
		};
		getPool()->at(11).addWork(f_11_0zpco4x4Z8);
		auto f_12_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 96; INDEX_0zpco4x4Z8 < 96 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_APElOlJ1Gp = 0; INDEX_APElOlJ1Gp < 0 + 200; ++INDEX_APElOlJ1Gp) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_APElOlJ1Gp)] + 1;
				}
			}
		};
		getPool()->at(12).addWork(f_12_0zpco4x4Z8);
		auto f_13_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 104; INDEX_0zpco4x4Z8 < 104 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_3NrnYbrfAN = 0; INDEX_3NrnYbrfAN < 0 + 200; ++INDEX_3NrnYbrfAN) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_3NrnYbrfAN)] + 1;
				}
			}
		};
		getPool()->at(13).addWork(f_13_0zpco4x4Z8);
		auto f_14_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 112; INDEX_0zpco4x4Z8 < 112 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_8hfq5cHx3c = 0; INDEX_8hfq5cHx3c < 0 + 200; ++INDEX_8hfq5cHx3c) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_8hfq5cHx3c)] + 1;
				}
			}
		};
		getPool()->at(14).addWork(f_14_0zpco4x4Z8);
		auto f_15_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 120; INDEX_0zpco4x4Z8 < 120 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_6U7xxr4vLI = 0; INDEX_6U7xxr4vLI < 0 + 200; ++INDEX_6U7xxr4vLI) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_6U7xxr4vLI)] + 1;
				}
			}
		};
		getPool()->at(15).addWork(f_15_0zpco4x4Z8);
		auto f_16_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 128; INDEX_0zpco4x4Z8 < 128 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_sKa116KGMv = 0; INDEX_sKa116KGMv < 0 + 200; ++INDEX_sKa116KGMv) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_sKa116KGMv)] + 1;
				}
			}
		};
		getPool()->at(16).addWork(f_16_0zpco4x4Z8);
		auto f_17_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 136; INDEX_0zpco4x4Z8 < 136 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_29sQjJT67R = 0; INDEX_29sQjJT67R < 0 + 200; ++INDEX_29sQjJT67R) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_29sQjJT67R)] + 1;
				}
			}
		};
		getPool()->at(17).addWork(f_17_0zpco4x4Z8);
		auto f_18_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 144; INDEX_0zpco4x4Z8 < 144 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_kESxCu4saN = 0; INDEX_kESxCu4saN < 0 + 200; ++INDEX_kESxCu4saN) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_kESxCu4saN)] + 1;
				}
			}
		};
		getPool()->at(18).addWork(f_18_0zpco4x4Z8);
		auto f_19_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 152; INDEX_0zpco4x4Z8 < 152 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_eDUeEjSeQy = 0; INDEX_eDUeEjSeQy < 0 + 200; ++INDEX_eDUeEjSeQy) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_eDUeEjSeQy)] + 1;
				}
			}
		};
		getPool()->at(19).addWork(f_19_0zpco4x4Z8);
		auto f_20_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 160; INDEX_0zpco4x4Z8 < 160 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_hOgQa15oXK = 0; INDEX_hOgQa15oXK < 0 + 200; ++INDEX_hOgQa15oXK) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_hOgQa15oXK)] + 1;
				}
			}
		};
		getPool()->at(20).addWork(f_20_0zpco4x4Z8);
		auto f_21_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 168; INDEX_0zpco4x4Z8 < 168 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_9Akf96a2Ga = 0; INDEX_9Akf96a2Ga < 0 + 200; ++INDEX_9Akf96a2Ga) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_9Akf96a2Ga)] + 1;
				}
			}
		};
		getPool()->at(21).addWork(f_21_0zpco4x4Z8);
		auto f_22_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 176; INDEX_0zpco4x4Z8 < 176 + 8; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_B8m5BsSPtU = 0; INDEX_B8m5BsSPtU < 0 + 200; ++INDEX_B8m5BsSPtU) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_B8m5BsSPtU)] + 1;
				}
			}
		};
		getPool()->at(22).addWork(f_22_0zpco4x4Z8);
		auto f_23_0zpco4x4Z8 = [&] () {
			for (size_t INDEX_0zpco4x4Z8 = 184; INDEX_0zpco4x4Z8 < 184 + 16; ++INDEX_0zpco4x4Z8) {
				for (size_t INDEX_S8RZ7r6OV2 = 0; INDEX_S8RZ7r6OV2 < 0 + 200; ++INDEX_S8RZ7r6OV2) {
					result_QO5WgOKKJt[(INDEX_0zpco4x4Z8)] += initial_YVTJjy4TVc[200LL * (INDEX_0zpco4x4Z8) + (INDEX_S8RZ7r6OV2)] + 1;
				}
			}
		};
		getPool()->at(23).addWork(f_23_0zpco4x4Z8);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_o9qyStlFug = new Bit_Mask(48,true);
		for (size_t i_2OigWYST1A = 0; i_2OigWYST1A < 24; ++i_2OigWYST1A) {
			mask_ptr_o9qyStlFug->setBarrier(i_2OigWYST1A);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_o9qyStlFug (mask_ptr_o9qyStlFug);
		self_barrier(boost_mask_ptr_o9qyStlFug);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			for ( int32_t j = 0; j < 200; j++ ) {
				result_seq_relujKdpk1[(i)] += initial_YVTJjy4TVc[200LL * (i) + (j)] + 1;
			}
			if (result_seq_relujKdpk1[(i)] != result_QO5WgOKKJt[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_QO5WgOKKJt);
	std::free(result_seq_relujKdpk1);
	std::free(initial_YVTJjy4TVc);
	MPI_Finalize();
	return 0;


}

