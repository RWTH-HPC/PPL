/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_ZdEOP40xYC;
	int32_t* initial_Cl6WmAxul9;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_Cl6WmAxul9 = Init_List(1, initial_Cl6WmAxul9, 2LL * 1LL);
	result_ZdEOP40xYC = Init_List(result_ZdEOP40xYC, 2LL * 1LL);
	for (size_t INDEX0_RhRV5u8u1p = 0; INDEX0_RhRV5u8u1p < 0 + 7; ++INDEX0_RhRV5u8u1p) {
		if (rank == 0) {
			auto f_0_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(0).addWork(f_0_RhRV5u8u1p);
			auto f_1_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(1).addWork(f_1_RhRV5u8u1p);
			auto f_2_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(2).addWork(f_2_RhRV5u8u1p);
			auto f_3_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(3).addWork(f_3_RhRV5u8u1p);
			auto f_4_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(4).addWork(f_4_RhRV5u8u1p);
			auto f_5_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(5).addWork(f_5_RhRV5u8u1p);
			auto f_6_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(6).addWork(f_6_RhRV5u8u1p);
			auto f_7_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(7).addWork(f_7_RhRV5u8u1p);
			auto f_8_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(8).addWork(f_8_RhRV5u8u1p);
			auto f_9_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(9).addWork(f_9_RhRV5u8u1p);
			auto f_10_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(10).addWork(f_10_RhRV5u8u1p);
			auto f_11_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(11).addWork(f_11_RhRV5u8u1p);
			auto f_12_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(12).addWork(f_12_RhRV5u8u1p);
			auto f_13_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(13).addWork(f_13_RhRV5u8u1p);
			auto f_14_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(14).addWork(f_14_RhRV5u8u1p);
			auto f_15_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(15).addWork(f_15_RhRV5u8u1p);
			auto f_16_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(16).addWork(f_16_RhRV5u8u1p);
			auto f_17_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(17).addWork(f_17_RhRV5u8u1p);
			auto f_18_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(18).addWork(f_18_RhRV5u8u1p);
			auto f_19_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(19).addWork(f_19_RhRV5u8u1p);
			auto f_20_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(20).addWork(f_20_RhRV5u8u1p);
			auto f_21_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(21).addWork(f_21_RhRV5u8u1p);
			auto f_22_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 0; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(22).addWork(f_22_RhRV5u8u1p);
			auto f_23_RhRV5u8u1p = [&] () {
				for (size_t INDEX1_RhRV5u8u1p = 0; INDEX1_RhRV5u8u1p < 0 + 1; ++INDEX1_RhRV5u8u1p) {
					result_ZdEOP40xYC[(0)] = initial_Cl6WmAxul9[(1)];
					result_ZdEOP40xYC[(1)] = initial_Cl6WmAxul9[(0)] + initial_Cl6WmAxul9[(1)];
				}
			};
			getPool()->at(23).addWork(f_23_RhRV5u8u1p);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_HVjyyhdx6D = new Bit_Mask(48,true);
			for (size_t i_lRMUaDnZyF = 0; i_lRMUaDnZyF < 24; ++i_lRMUaDnZyF) {
				mask_ptr_HVjyyhdx6D->setBarrier(i_lRMUaDnZyF);
			}
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_HVjyyhdx6D (mask_ptr_HVjyyhdx6D);
			self_barrier(boost_mask_ptr_HVjyyhdx6D);
		}
		Set_Partial_Array(initial_Cl6WmAxul9, result_ZdEOP40xYC, 2);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_ubJr53bDDf = new Bit_Mask(48,true);
		for (size_t i_dRqX3PmRfl = 0; i_dRqX3PmRfl < 24; ++i_dRqX3PmRfl) {
			mask_ptr_ubJr53bDDf->setBarrier(i_dRqX3PmRfl);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_ubJr53bDDf (mask_ptr_ubJr53bDDf);
		self_barrier(boost_mask_ptr_ubJr53bDDf);
	}
	if (rank == 0) {
		if (result_ZdEOP40xYC[(0)] != 21) {
			print("The 8th fibonacci number is not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	if (rank == 0) {
		if (result_ZdEOP40xYC[(1)] != 34) {
			print("The 9th fibonacci number is not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_ZdEOP40xYC);
	std::free(initial_Cl6WmAxul9);
	MPI_Finalize();
	return 0;


}

