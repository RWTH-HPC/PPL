/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapNestedTest.hxx"
#include "includes/cuda_lib_MapNestedTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_uOMRG8cQPi;
	int32_t* result_seq_IzqVLZMGHf;
	int32_t* initial_aRKFdUG3S4;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_aRKFdUG3S4 = Init_List(1, initial_aRKFdUG3S4, 200LL * 200LL * 1LL);
	result_uOMRG8cQPi = Init_List(result_uOMRG8cQPi, 200LL * 200LL * 1LL);
	result_seq_IzqVLZMGHf = Init_List(result_seq_IzqVLZMGHf, 200LL * 200LL * 1LL);
	if (rank == 0) {
		auto f_0_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 0; INDEX_4YSCR6QgNS < 0 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_EX9GmC3N2L = 0; INDEX_EX9GmC3N2L < 0 + 200; ++INDEX_EX9GmC3N2L) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_EX9GmC3N2L)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_EX9GmC3N2L)] + 1;
				}
			}
		};
		getPool()->at(0).addWork(f_0_4YSCR6QgNS);
		auto f_1_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 8; INDEX_4YSCR6QgNS < 8 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_bFJvl4lZyU = 0; INDEX_bFJvl4lZyU < 0 + 200; ++INDEX_bFJvl4lZyU) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_bFJvl4lZyU)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_bFJvl4lZyU)] + 1;
				}
			}
		};
		getPool()->at(1).addWork(f_1_4YSCR6QgNS);
		auto f_2_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 16; INDEX_4YSCR6QgNS < 16 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_IIvFkCZ35p = 0; INDEX_IIvFkCZ35p < 0 + 200; ++INDEX_IIvFkCZ35p) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_IIvFkCZ35p)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_IIvFkCZ35p)] + 1;
				}
			}
		};
		getPool()->at(2).addWork(f_2_4YSCR6QgNS);
		auto f_3_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 24; INDEX_4YSCR6QgNS < 24 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_i6ckCzrsUt = 0; INDEX_i6ckCzrsUt < 0 + 200; ++INDEX_i6ckCzrsUt) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_i6ckCzrsUt)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_i6ckCzrsUt)] + 1;
				}
			}
		};
		getPool()->at(3).addWork(f_3_4YSCR6QgNS);
		auto f_4_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 32; INDEX_4YSCR6QgNS < 32 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_6m5veDv6FK = 0; INDEX_6m5veDv6FK < 0 + 200; ++INDEX_6m5veDv6FK) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_6m5veDv6FK)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_6m5veDv6FK)] + 1;
				}
			}
		};
		getPool()->at(4).addWork(f_4_4YSCR6QgNS);
		auto f_5_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 40; INDEX_4YSCR6QgNS < 40 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_O7gJIMfFg2 = 0; INDEX_O7gJIMfFg2 < 0 + 200; ++INDEX_O7gJIMfFg2) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_O7gJIMfFg2)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_O7gJIMfFg2)] + 1;
				}
			}
		};
		getPool()->at(5).addWork(f_5_4YSCR6QgNS);
		auto f_6_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 48; INDEX_4YSCR6QgNS < 48 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_yaAlIA80EN = 0; INDEX_yaAlIA80EN < 0 + 200; ++INDEX_yaAlIA80EN) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_yaAlIA80EN)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_yaAlIA80EN)] + 1;
				}
			}
		};
		getPool()->at(6).addWork(f_6_4YSCR6QgNS);
		auto f_7_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 56; INDEX_4YSCR6QgNS < 56 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_BA7vNhMqEq = 0; INDEX_BA7vNhMqEq < 0 + 200; ++INDEX_BA7vNhMqEq) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_BA7vNhMqEq)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_BA7vNhMqEq)] + 1;
				}
			}
		};
		getPool()->at(7).addWork(f_7_4YSCR6QgNS);
		auto f_8_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 64; INDEX_4YSCR6QgNS < 64 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_zrl7czYO7Q = 0; INDEX_zrl7czYO7Q < 0 + 200; ++INDEX_zrl7czYO7Q) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_zrl7czYO7Q)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_zrl7czYO7Q)] + 1;
				}
			}
		};
		getPool()->at(8).addWork(f_8_4YSCR6QgNS);
		auto f_9_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 72; INDEX_4YSCR6QgNS < 72 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_n0IFKWtKQq = 0; INDEX_n0IFKWtKQq < 0 + 200; ++INDEX_n0IFKWtKQq) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_n0IFKWtKQq)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_n0IFKWtKQq)] + 1;
				}
			}
		};
		getPool()->at(9).addWork(f_9_4YSCR6QgNS);
		auto f_10_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 80; INDEX_4YSCR6QgNS < 80 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_rCpMSX6I6L = 0; INDEX_rCpMSX6I6L < 0 + 200; ++INDEX_rCpMSX6I6L) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_rCpMSX6I6L)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_rCpMSX6I6L)] + 1;
				}
			}
		};
		getPool()->at(10).addWork(f_10_4YSCR6QgNS);
		auto f_11_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 88; INDEX_4YSCR6QgNS < 88 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_oIhiKJgNpY = 0; INDEX_oIhiKJgNpY < 0 + 200; ++INDEX_oIhiKJgNpY) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_oIhiKJgNpY)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_oIhiKJgNpY)] + 1;
				}
			}
		};
		getPool()->at(11).addWork(f_11_4YSCR6QgNS);
		auto f_12_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 96; INDEX_4YSCR6QgNS < 96 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_aHQSKGGCZ0 = 0; INDEX_aHQSKGGCZ0 < 0 + 200; ++INDEX_aHQSKGGCZ0) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_aHQSKGGCZ0)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_aHQSKGGCZ0)] + 1;
				}
			}
		};
		getPool()->at(12).addWork(f_12_4YSCR6QgNS);
		auto f_13_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 104; INDEX_4YSCR6QgNS < 104 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_LsGIT5qyDm = 0; INDEX_LsGIT5qyDm < 0 + 200; ++INDEX_LsGIT5qyDm) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_LsGIT5qyDm)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_LsGIT5qyDm)] + 1;
				}
			}
		};
		getPool()->at(13).addWork(f_13_4YSCR6QgNS);
		auto f_14_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 112; INDEX_4YSCR6QgNS < 112 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_7aoG7KcOnC = 0; INDEX_7aoG7KcOnC < 0 + 200; ++INDEX_7aoG7KcOnC) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_7aoG7KcOnC)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_7aoG7KcOnC)] + 1;
				}
			}
		};
		getPool()->at(14).addWork(f_14_4YSCR6QgNS);
		auto f_15_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 120; INDEX_4YSCR6QgNS < 120 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_en2sxnZZVW = 0; INDEX_en2sxnZZVW < 0 + 200; ++INDEX_en2sxnZZVW) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_en2sxnZZVW)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_en2sxnZZVW)] + 1;
				}
			}
		};
		getPool()->at(15).addWork(f_15_4YSCR6QgNS);
		auto f_16_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 128; INDEX_4YSCR6QgNS < 128 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_c1OIAe282D = 0; INDEX_c1OIAe282D < 0 + 200; ++INDEX_c1OIAe282D) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_c1OIAe282D)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_c1OIAe282D)] + 1;
				}
			}
		};
		getPool()->at(16).addWork(f_16_4YSCR6QgNS);
		auto f_17_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 136; INDEX_4YSCR6QgNS < 136 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_qCAz4zQ3Kf = 0; INDEX_qCAz4zQ3Kf < 0 + 200; ++INDEX_qCAz4zQ3Kf) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_qCAz4zQ3Kf)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_qCAz4zQ3Kf)] + 1;
				}
			}
		};
		getPool()->at(17).addWork(f_17_4YSCR6QgNS);
		auto f_18_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 144; INDEX_4YSCR6QgNS < 144 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_HdcyQMoZM5 = 0; INDEX_HdcyQMoZM5 < 0 + 200; ++INDEX_HdcyQMoZM5) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_HdcyQMoZM5)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_HdcyQMoZM5)] + 1;
				}
			}
		};
		getPool()->at(18).addWork(f_18_4YSCR6QgNS);
		auto f_19_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 152; INDEX_4YSCR6QgNS < 152 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_DJ5BfSagZJ = 0; INDEX_DJ5BfSagZJ < 0 + 200; ++INDEX_DJ5BfSagZJ) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_DJ5BfSagZJ)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_DJ5BfSagZJ)] + 1;
				}
			}
		};
		getPool()->at(19).addWork(f_19_4YSCR6QgNS);
		auto f_20_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 160; INDEX_4YSCR6QgNS < 160 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_dLVDTXTKm4 = 0; INDEX_dLVDTXTKm4 < 0 + 200; ++INDEX_dLVDTXTKm4) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_dLVDTXTKm4)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_dLVDTXTKm4)] + 1;
				}
			}
		};
		getPool()->at(20).addWork(f_20_4YSCR6QgNS);
		auto f_21_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 168; INDEX_4YSCR6QgNS < 168 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_I5dQk4kpBe = 0; INDEX_I5dQk4kpBe < 0 + 200; ++INDEX_I5dQk4kpBe) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_I5dQk4kpBe)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_I5dQk4kpBe)] + 1;
				}
			}
		};
		getPool()->at(21).addWork(f_21_4YSCR6QgNS);
		auto f_22_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 176; INDEX_4YSCR6QgNS < 176 + 8; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_qWUTxCbYOP = 0; INDEX_qWUTxCbYOP < 0 + 200; ++INDEX_qWUTxCbYOP) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_qWUTxCbYOP)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_qWUTxCbYOP)] + 1;
				}
			}
		};
		getPool()->at(22).addWork(f_22_4YSCR6QgNS);
		auto f_23_4YSCR6QgNS = [&] () {
			for (size_t INDEX_4YSCR6QgNS = 184; INDEX_4YSCR6QgNS < 184 + 16; ++INDEX_4YSCR6QgNS) {
				for (size_t INDEX_WK7LYQmnKD = 0; INDEX_WK7LYQmnKD < 0 + 200; ++INDEX_WK7LYQmnKD) {
					result_uOMRG8cQPi[200LL * (INDEX_4YSCR6QgNS) + (INDEX_WK7LYQmnKD)] = initial_aRKFdUG3S4[200LL * (INDEX_4YSCR6QgNS) + (INDEX_WK7LYQmnKD)] + 1;
				}
			}
		};
		getPool()->at(23).addWork(f_23_4YSCR6QgNS);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_Kiq1qBWCxv = new Bit_Mask(48,true);
		for (size_t i_D5yennifpY = 0; i_D5yennifpY < 24; ++i_D5yennifpY) {
			mask_ptr_Kiq1qBWCxv->setBarrier(i_D5yennifpY);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_Kiq1qBWCxv (mask_ptr_Kiq1qBWCxv);
		self_barrier(boost_mask_ptr_Kiq1qBWCxv);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			for ( int32_t j = 0; j < 200; j++ ) {
				result_seq_IzqVLZMGHf[200LL * (i) + (j)] = initial_aRKFdUG3S4[200LL * (i) + (j)] + 1;
				if (result_seq_IzqVLZMGHf[200LL * (i) + (j)] != result_uOMRG8cQPi[200LL * (i) + (j)]) {
					print("value at element ", i, ",", j, " is wrong!");
					MPI_Abort(MPI_COMM_WORLD, 1);
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_uOMRG8cQPi);
	std::free(result_seq_IzqVLZMGHf);
	std::free(initial_aRKFdUG3S4);
	MPI_Finalize();
	return 0;


}

