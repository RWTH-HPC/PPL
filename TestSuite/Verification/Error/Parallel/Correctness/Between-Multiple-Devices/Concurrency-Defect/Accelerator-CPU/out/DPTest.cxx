/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_W9UGyjNjLb;
	int32_t* initial_QML7k7jnuO;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_QML7k7jnuO = Init_List(1, initial_QML7k7jnuO, 200LL * 1LL);
	result_W9UGyjNjLb = Init_List(result_W9UGyjNjLb, 200LL * 1LL);
	int32_t* GPU_Data_R3hQFjRkGK;
	if (rank == 0) {
		auto f_alloc_5GgRpbrChp = [&] () {
			cuda_alloc_wrapper(&GPU_Data_R3hQFjRkGK, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_5GgRpbrChp);
	}
	if (rank == 0) {
		auto f_movement_G2QEnTRUzB = [&] () {
			cuda_host2device_wrapper(&GPU_Data_R3hQFjRkGK[0], &initial_QML7k7jnuO[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_G2QEnTRUzB);
	}
	int32_t* GPU_Data_viPEnjq4Gm;
	if (rank == 0) {
		auto f_alloc_Wsrxrgse3D = [&] () {
			cuda_alloc_wrapper(&GPU_Data_viPEnjq4Gm, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_Wsrxrgse3D);
	}
	for (size_t INDEX0_oGtVqnLsp9 = 0; INDEX0_oGtVqnLsp9 < 0 + 7; ++INDEX0_oGtVqnLsp9) {
		if (rank == 0) {
			auto f_0_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(0).addWork(f_0_oGtVqnLsp9);
			auto f_1_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(1).addWork(f_1_oGtVqnLsp9);
			auto f_2_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(2).addWork(f_2_oGtVqnLsp9);
			auto f_3_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(3).addWork(f_3_oGtVqnLsp9);
			auto f_4_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(4).addWork(f_4_oGtVqnLsp9);
			auto f_5_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(5).addWork(f_5_oGtVqnLsp9);
			auto f_6_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(6).addWork(f_6_oGtVqnLsp9);
			auto f_7_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(7).addWork(f_7_oGtVqnLsp9);
			auto f_8_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(8).addWork(f_8_oGtVqnLsp9);
			auto f_9_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(9).addWork(f_9_oGtVqnLsp9);
			auto f_10_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(10).addWork(f_10_oGtVqnLsp9);
			auto f_11_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(11).addWork(f_11_oGtVqnLsp9);
			auto f_12_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(12).addWork(f_12_oGtVqnLsp9);
			auto f_13_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(13).addWork(f_13_oGtVqnLsp9);
			auto f_14_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(14).addWork(f_14_oGtVqnLsp9);
			auto f_15_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(15).addWork(f_15_oGtVqnLsp9);
			auto f_16_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(16).addWork(f_16_oGtVqnLsp9);
			auto f_17_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(17).addWork(f_17_oGtVqnLsp9);
			auto f_18_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(18).addWork(f_18_oGtVqnLsp9);
			auto f_19_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(19).addWork(f_19_oGtVqnLsp9);
			auto f_20_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(20).addWork(f_20_oGtVqnLsp9);
			auto f_21_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(21).addWork(f_21_oGtVqnLsp9);
			auto f_22_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 0; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(22).addWork(f_22_oGtVqnLsp9);
			auto f_23_oGtVqnLsp9 = [&] () {
				for (size_t INDEX1_oGtVqnLsp9 = 0; INDEX1_oGtVqnLsp9 < 0 + 100; ++INDEX1_oGtVqnLsp9) {
					result_W9UGyjNjLb[(INDEX1_oGtVqnLsp9)] = initial_QML7k7jnuO[(INDEX1_oGtVqnLsp9)] + 1;
				}
			};
			getPool()->at(23).addWork(f_23_oGtVqnLsp9);
		}
		if (rank == 0) {
			auto f_gpu_Um8n4qBVfX = [&] () mutable {
				cuda_wrapper_incr_Um8n4qBVfX(GPU_Data_R3hQFjRkGK, GPU_Data_viPEnjq4Gm, INDEX0_oGtVqnLsp9);
			};
			getGPUPool()->at(1).addWork(f_gpu_Um8n4qBVfX);
		}
		if (rank == 0) {
			auto f_movement_4xhjp8bdbl = [&] () {
				cuda_device2host_wrapper(&result_W9UGyjNjLb[100], &GPU_Data_viPEnjq4Gm[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_4xhjp8bdbl);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_Q3U9xM2y3l = new Bit_Mask(48,true);
			for (size_t i_b06eimUR3a = 0; i_b06eimUR3a < 24; ++i_b06eimUR3a) {
				mask_ptr_Q3U9xM2y3l->setBarrier(i_b06eimUR3a);
			}
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_Q3U9xM2y3l (mask_ptr_Q3U9xM2y3l);
			self_barrier(boost_mask_ptr_Q3U9xM2y3l);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_fQG7ZXO5L2 = new Bit_Mask(2,true);
			mask_ptr_fQG7ZXO5L2->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_fQG7ZXO5L2 (mask_ptr_fQG7ZXO5L2);
			cuda_sync_device(boost_mask_ptr_fQG7ZXO5L2);
		}
		Set_Partial_Array(initial_QML7k7jnuO, result_W9UGyjNjLb, 200);
		if (rank == 0) {
			auto f_movement_JssKfINm4g = [&] () {
				cuda_host2device_wrapper(&GPU_Data_R3hQFjRkGK[0], &initial_QML7k7jnuO[100], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_JssKfINm4g);
		}
	}
	if (rank == 0) {
		auto f_dealloc_Tphca5scbM = [&] () {
			cuda_dealloc_wrapper(GPU_Data_R3hQFjRkGK);
		};
		getGPUPool()->at(1).addWork(f_dealloc_Tphca5scbM);
	}
	if (rank == 0) {
		auto f_movement_80ek9nqURG = [&] () {
			cuda_device2host_wrapper(&result_W9UGyjNjLb[100], &GPU_Data_viPEnjq4Gm[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_80ek9nqURG);
	}
	if (rank == 0) {
		auto f_dealloc_6XZBWT0jY5 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_viPEnjq4Gm);
		};
		getGPUPool()->at(1).addWork(f_dealloc_6XZBWT0jY5);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_C9UgnpQmu8 = new Bit_Mask(48,true);
		for (size_t i_EKnDK7AOa3 = 0; i_EKnDK7AOa3 < 24; ++i_EKnDK7AOa3) {
			mask_ptr_C9UgnpQmu8->setBarrier(i_EKnDK7AOa3);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_C9UgnpQmu8 (mask_ptr_C9UgnpQmu8);
		self_barrier(boost_mask_ptr_C9UgnpQmu8);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_ksmV3myeHb = new Bit_Mask(2,true);
		mask_ptr_ksmV3myeHb->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_ksmV3myeHb (mask_ptr_ksmV3myeHb);
		cuda_sync_device(boost_mask_ptr_ksmV3myeHb);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_W9UGyjNjLb[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_W9UGyjNjLb);
	std::free(initial_QML7k7jnuO);
	MPI_Finalize();
	return 0;


}

