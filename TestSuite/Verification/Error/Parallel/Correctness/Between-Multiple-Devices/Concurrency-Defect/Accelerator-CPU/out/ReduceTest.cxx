/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_5DL2WgWjPX;
	int32_t* initial_BVKSvzi7ir;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_BVKSvzi7ir = Init_List(1, initial_BVKSvzi7ir, 200LL * 1LL);
	if (rank == 0) {
		result_5DL2WgWjPX = 0;
	}
	pthread_mutex_t reduction_lock_I1I6zM1RRo = PTHREAD_MUTEX_INITIALIZER;
	int32_t temp_data_I1I6zM1RRo = 0;
	if (rank == 0) {
		int32_t* partialResult_Zf8iOQE0B6;
		partialResult_Zf8iOQE0B6 = Init_List(result_5DL2WgWjPX, partialResult_Zf8iOQE0B6, 24);
		auto f_0_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 0; INDEX_Zf8iOQE0B6 < 0 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[0] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(0).addWork(f_0_Zf8iOQE0B6);
		auto f_1_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 4; INDEX_Zf8iOQE0B6 < 4 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[1] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(1).addWork(f_1_Zf8iOQE0B6);
		auto f_2_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 8; INDEX_Zf8iOQE0B6 < 8 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[2] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(2).addWork(f_2_Zf8iOQE0B6);
		auto f_3_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 12; INDEX_Zf8iOQE0B6 < 12 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[3] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(3).addWork(f_3_Zf8iOQE0B6);
		auto f_4_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 16; INDEX_Zf8iOQE0B6 < 16 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[4] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(4).addWork(f_4_Zf8iOQE0B6);
		auto f_5_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 20; INDEX_Zf8iOQE0B6 < 20 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[5] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(5).addWork(f_5_Zf8iOQE0B6);
		auto f_6_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 24; INDEX_Zf8iOQE0B6 < 24 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[6] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(6).addWork(f_6_Zf8iOQE0B6);
		auto f_7_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 28; INDEX_Zf8iOQE0B6 < 28 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[7] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(7).addWork(f_7_Zf8iOQE0B6);
		auto f_8_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 32; INDEX_Zf8iOQE0B6 < 32 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[8] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(8).addWork(f_8_Zf8iOQE0B6);
		auto f_9_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 36; INDEX_Zf8iOQE0B6 < 36 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[9] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(9).addWork(f_9_Zf8iOQE0B6);
		auto f_10_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 40; INDEX_Zf8iOQE0B6 < 40 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[10] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(10).addWork(f_10_Zf8iOQE0B6);
		auto f_11_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 44; INDEX_Zf8iOQE0B6 < 44 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[11] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(11).addWork(f_11_Zf8iOQE0B6);
		auto f_12_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 48; INDEX_Zf8iOQE0B6 < 48 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[12] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(12).addWork(f_12_Zf8iOQE0B6);
		auto f_13_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 52; INDEX_Zf8iOQE0B6 < 52 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[13] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(13).addWork(f_13_Zf8iOQE0B6);
		auto f_14_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 56; INDEX_Zf8iOQE0B6 < 56 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[14] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(14).addWork(f_14_Zf8iOQE0B6);
		auto f_15_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 60; INDEX_Zf8iOQE0B6 < 60 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[15] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(15).addWork(f_15_Zf8iOQE0B6);
		auto f_16_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 64; INDEX_Zf8iOQE0B6 < 64 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[16] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(16).addWork(f_16_Zf8iOQE0B6);
		auto f_17_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 68; INDEX_Zf8iOQE0B6 < 68 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[17] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(17).addWork(f_17_Zf8iOQE0B6);
		auto f_18_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 72; INDEX_Zf8iOQE0B6 < 72 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[18] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(18).addWork(f_18_Zf8iOQE0B6);
		auto f_19_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 76; INDEX_Zf8iOQE0B6 < 76 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[19] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(19).addWork(f_19_Zf8iOQE0B6);
		auto f_20_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 80; INDEX_Zf8iOQE0B6 < 80 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[20] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(20).addWork(f_20_Zf8iOQE0B6);
		auto f_21_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 84; INDEX_Zf8iOQE0B6 < 84 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[21] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(21).addWork(f_21_Zf8iOQE0B6);
		auto f_22_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 88; INDEX_Zf8iOQE0B6 < 88 + 4; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[22] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(22).addWork(f_22_Zf8iOQE0B6);
		auto f_23_Zf8iOQE0B6 = [&] () {
			for (size_t INDEX_Zf8iOQE0B6 = 92; INDEX_Zf8iOQE0B6 < 92 + 8; ++INDEX_Zf8iOQE0B6) {
				partialResult_Zf8iOQE0B6[23] += initial_BVKSvzi7ir[(INDEX_Zf8iOQE0B6)];
			}
		};
		getPool()->at(23).addWork(f_23_Zf8iOQE0B6);
		Bit_Mask * mask_ptr_Zf8iOQE0B6 = new Bit_Mask(48,false);
		for (size_t i_Zf8iOQE0B6 = 0; i_Zf8iOQE0B6 < 24; ++i_Zf8iOQE0B6) {
			mask_ptr_Zf8iOQE0B6->setBarrier(i_Zf8iOQE0B6);
		}
		boost::shared_ptr<Bit_Mask>mask_Zf8iOQE0B6 (mask_ptr_Zf8iOQE0B6);
		barrier(mask_Zf8iOQE0B6);
		auto lambda_reduction_Zf8iOQE0B6 = [partialResult_Zf8iOQE0B6, &temp_data_I1I6zM1RRo ,&reduction_lock_I1I6zM1RRo] () {
			pthread_mutex_lock(&reduction_lock_I1I6zM1RRo);
			temp_data_I1I6zM1RRo = reduction_sum(temp_data_I1I6zM1RRo, partialResult_Zf8iOQE0B6, 24, 0);
			pthread_mutex_unlock(&reduction_lock_I1I6zM1RRo);
		};
		getPool()->at(0).addWork(lambda_reduction_Zf8iOQE0B6);
	}
	int32_t* GPU_Data_n3iH09cJGk;
	if (rank == 0) {
		auto f_alloc_lKSHxNKEZo = [&] () {
			cuda_alloc_wrapper(&GPU_Data_n3iH09cJGk, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_lKSHxNKEZo);
	}
	if (rank == 0) {
		auto f_movement_HSfMLjthrA = [&] () {
			cuda_host2device_wrapper(&GPU_Data_n3iH09cJGk[0], &initial_BVKSvzi7ir[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_HSfMLjthrA);
	}
	int32_t* GPU_Data_sOrJxM3nnE;
	if (rank == 0) {
		auto f_alloc_PvU8BC6XNZ = [&] () {
			cuda_alloc_wrapper(&GPU_Data_sOrJxM3nnE, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_alloc_PvU8BC6XNZ);
	}
	if (rank == 0) {
		auto f_gpu_4sNg7C3iRz = [&] () {
			cuda_wrapper_sum_4sNg7C3iRz(GPU_Data_n3iH09cJGk, &temp_data_I1I6zM1RRo, reduction_lock_I1I6zM1RRo);
		};
		getGPUPool()->at(1).addWork(f_gpu_4sNg7C3iRz);
	}
	if (rank == 0) {
		auto f_dealloc_xgp9m8ky3E = [&] () {
			cuda_dealloc_wrapper(GPU_Data_sOrJxM3nnE);
		};
		getGPUPool()->at(1).addWork(f_dealloc_xgp9m8ky3E);
	}
	if (rank == 0) {
		auto f_dealloc_gdM3C3QLc2 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_n3iH09cJGk);
		};
		getGPUPool()->at(1).addWork(f_dealloc_gdM3C3QLc2);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_A4Z2nUQpBd = new Bit_Mask(48,true);
		for (size_t i_gF9vszsZzI = 0; i_gF9vszsZzI < 24; ++i_gF9vszsZzI) {
			mask_ptr_A4Z2nUQpBd->setBarrier(i_gF9vszsZzI);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_A4Z2nUQpBd (mask_ptr_A4Z2nUQpBd);
		self_barrier(boost_mask_ptr_A4Z2nUQpBd);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_2yDsOGAyjM = new Bit_Mask(2,true);
		mask_ptr_2yDsOGAyjM->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_2yDsOGAyjM (mask_ptr_2yDsOGAyjM);
		cuda_sync_device(boost_mask_ptr_2yDsOGAyjM);
	}
	result_5DL2WgWjPX = temp_data_I1I6zM1RRo;
	if (rank == 0) {
		if (result_5DL2WgWjPX != 200) {
			print("summation not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_BVKSvzi7ir);
	MPI_Finalize();
	return 0;


}

