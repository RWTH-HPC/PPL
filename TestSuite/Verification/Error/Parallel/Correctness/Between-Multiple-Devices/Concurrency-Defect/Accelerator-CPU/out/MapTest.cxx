/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapTest.hxx"
#include "includes/cuda_lib_MapTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_SbELvBVQBb;
	int32_t* result_seq_jN5t6AglBW;
	int32_t* initial_3IA28ImCoz;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_3IA28ImCoz = Init_List(1, initial_3IA28ImCoz, 200LL * 1LL);
	result_SbELvBVQBb = Init_List(result_SbELvBVQBb, 200LL * 1LL);
	result_seq_jN5t6AglBW = Init_List(result_seq_jN5t6AglBW, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 0; INDEX_iedtjxNWi9 < 0 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_iedtjxNWi9);
		auto f_1_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 4; INDEX_iedtjxNWi9 < 4 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_iedtjxNWi9);
		auto f_2_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 8; INDEX_iedtjxNWi9 < 8 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_iedtjxNWi9);
		auto f_3_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 12; INDEX_iedtjxNWi9 < 12 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_iedtjxNWi9);
		auto f_4_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 16; INDEX_iedtjxNWi9 < 16 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_iedtjxNWi9);
		auto f_5_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 20; INDEX_iedtjxNWi9 < 20 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_iedtjxNWi9);
		auto f_6_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 24; INDEX_iedtjxNWi9 < 24 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_iedtjxNWi9);
		auto f_7_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 28; INDEX_iedtjxNWi9 < 28 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_iedtjxNWi9);
		auto f_8_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 32; INDEX_iedtjxNWi9 < 32 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_iedtjxNWi9);
		auto f_9_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 36; INDEX_iedtjxNWi9 < 36 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_iedtjxNWi9);
		auto f_10_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 40; INDEX_iedtjxNWi9 < 40 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_iedtjxNWi9);
		auto f_11_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 44; INDEX_iedtjxNWi9 < 44 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_iedtjxNWi9);
		auto f_12_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 48; INDEX_iedtjxNWi9 < 48 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_iedtjxNWi9);
		auto f_13_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 52; INDEX_iedtjxNWi9 < 52 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_iedtjxNWi9);
		auto f_14_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 56; INDEX_iedtjxNWi9 < 56 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_iedtjxNWi9);
		auto f_15_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 60; INDEX_iedtjxNWi9 < 60 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_iedtjxNWi9);
		auto f_16_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 64; INDEX_iedtjxNWi9 < 64 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_iedtjxNWi9);
		auto f_17_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 68; INDEX_iedtjxNWi9 < 68 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_iedtjxNWi9);
		auto f_18_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 72; INDEX_iedtjxNWi9 < 72 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_iedtjxNWi9);
		auto f_19_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 76; INDEX_iedtjxNWi9 < 76 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_iedtjxNWi9);
		auto f_20_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 80; INDEX_iedtjxNWi9 < 80 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_iedtjxNWi9);
		auto f_21_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 84; INDEX_iedtjxNWi9 < 84 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_iedtjxNWi9);
		auto f_22_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 88; INDEX_iedtjxNWi9 < 88 + 4; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_iedtjxNWi9);
		auto f_23_iedtjxNWi9 = [&] () {
			for (size_t INDEX_iedtjxNWi9 = 92; INDEX_iedtjxNWi9 < 92 + 8; ++INDEX_iedtjxNWi9) {
				result_SbELvBVQBb[(INDEX_iedtjxNWi9)] = initial_3IA28ImCoz[(INDEX_iedtjxNWi9)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_iedtjxNWi9);
	}
	int32_t* GPU_Data_btK0dg0Vop;
	if (rank == 0) {
		auto f_alloc_uHu94XVvbB = [&] () {
			cuda_alloc_wrapper(&GPU_Data_btK0dg0Vop, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_uHu94XVvbB);
	}
	if (rank == 0) {
		auto f_movement_gI0D8oWEmu = [&] () {
			cuda_host2device_wrapper(&GPU_Data_btK0dg0Vop[0], &initial_3IA28ImCoz[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_gI0D8oWEmu);
	}
	int32_t* GPU_Data_LY87Gf4haX;
	if (rank == 0) {
		auto f_alloc_cyS92RBBov = [&] () {
			cuda_alloc_wrapper(&GPU_Data_LY87Gf4haX, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_cyS92RBBov);
	}
	if (rank == 0) {
		auto f_gpu_BlSSUcCEFx = [&] () {
			cuda_wrapper_increment_BlSSUcCEFx(GPU_Data_btK0dg0Vop, GPU_Data_LY87Gf4haX );
		};
		getGPUPool()->at(1).addWork(f_gpu_BlSSUcCEFx);
	}
	if (rank == 0) {
		auto f_movement_pbehLrc8fg = [&] () {
			cuda_device2host_wrapper(&result_SbELvBVQBb[100], &GPU_Data_LY87Gf4haX[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_pbehLrc8fg);
	}
	if (rank == 0) {
		auto f_dealloc_hXIHEPuvRa = [&] () {
			cuda_dealloc_wrapper(GPU_Data_LY87Gf4haX);
		};
		getGPUPool()->at(1).addWork(f_dealloc_hXIHEPuvRa);
	}
	if (rank == 0) {
		auto f_dealloc_4gTTIkWqXh = [&] () {
			cuda_dealloc_wrapper(GPU_Data_btK0dg0Vop);
		};
		getGPUPool()->at(1).addWork(f_dealloc_4gTTIkWqXh);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_PMvF5AC60J = new Bit_Mask(48,true);
		for (size_t i_EWeYF387y6 = 0; i_EWeYF387y6 < 24; ++i_EWeYF387y6) {
			mask_ptr_PMvF5AC60J->setBarrier(i_EWeYF387y6);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_PMvF5AC60J (mask_ptr_PMvF5AC60J);
		self_barrier(boost_mask_ptr_PMvF5AC60J);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_ItnXbWPgcn = new Bit_Mask(2,true);
		mask_ptr_ItnXbWPgcn->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_ItnXbWPgcn (mask_ptr_ItnXbWPgcn);
		cuda_sync_device(boost_mask_ptr_ItnXbWPgcn);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_jN5t6AglBW[(i)] = initial_3IA28ImCoz[(i)] + 1;
			if (result_seq_jN5t6AglBW[(i)] != result_SbELvBVQBb[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_SbELvBVQBb);
	std::free(result_seq_jN5t6AglBW);
	std::free(initial_3IA28ImCoz);
	MPI_Finalize();
	return 0;


}

