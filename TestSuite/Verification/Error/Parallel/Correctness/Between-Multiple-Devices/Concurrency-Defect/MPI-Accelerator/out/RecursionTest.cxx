/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/RecursionTest.hxx"
#include "includes/cuda_lib_RecursionTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_jnJHRxf96Z;
	int32_t initial_MarzTlpHr2;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	if (rank == 0) {
		initial_MarzTlpHr2 = 0;
		result_jnJHRxf96Z = 0;
	}
	result_jnJHRxf96Z = counter(initial_MarzTlpHr2);
	if (rank == 0) {
		Bit_Mask * mask_ptr_ac87lLYzAm = new Bit_Mask(48,true);
		for (size_t i_Dv6onEfSnJ = 0; i_Dv6onEfSnJ < 24; ++i_Dv6onEfSnJ) {
			mask_ptr_ac87lLYzAm->setBarrier(i_Dv6onEfSnJ);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_ac87lLYzAm (mask_ptr_ac87lLYzAm);
		self_barrier(boost_mask_ptr_ac87lLYzAm);
	}
	if (rank == 0) {
		if (result_jnJHRxf96Z != 4) {
			print("Recursion not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	MPI_Finalize();
	return 0;


}

