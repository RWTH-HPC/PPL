/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_nEJrXOWu06;
	int32_t* initial_jyCGvVcxP3;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_jyCGvVcxP3 = Init_List(1, initial_jyCGvVcxP3, 200LL * 1LL);
	result_nEJrXOWu06 = Init_List(result_nEJrXOWu06, 200LL * 1LL);
	if (rank == 0) {
		MPI_Send(&initial_jyCGvVcxP3[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_jyCGvVcxP3[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	int32_t* GPU_Data_cMWXOBSJiP;
	if (rank == 0) {
		auto f_alloc_kgs4pthyXT = [&] () {
			cuda_alloc_wrapper(&GPU_Data_cMWXOBSJiP, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_kgs4pthyXT);
	}
	if (rank == 0) {
		auto f_movement_xOBzHYpvKb = [&] () {
			cuda_host2device_wrapper(&GPU_Data_cMWXOBSJiP[0], &initial_jyCGvVcxP3[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_xOBzHYpvKb);
	}
	int32_t* GPU_Data_ZzZlEBAest;
	if (rank == 0) {
		auto f_alloc_Dz45D29QKz = [&] () {
			cuda_alloc_wrapper(&GPU_Data_ZzZlEBAest, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_Dz45D29QKz);
	}
	int32_t* GPU_Data_cOgFJkGv9Q;
	if (rank == 1) {
		auto f_alloc_G124zrASFq = [&] () {
			cuda_alloc_wrapper(&GPU_Data_cOgFJkGv9Q, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_G124zrASFq);
	}
	if (rank == 1) {
		auto f_movement_Z8x6BYc6xp = [&] () {
			cuda_host2device_wrapper(&GPU_Data_cOgFJkGv9Q[0], &initial_jyCGvVcxP3[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_Z8x6BYc6xp);
	}
	int32_t* GPU_Data_pHMIslO85Z;
	if (rank == 1) {
		auto f_alloc_22UR5CBxJj = [&] () {
			cuda_alloc_wrapper(&GPU_Data_pHMIslO85Z, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_22UR5CBxJj);
	}
	for (size_t INDEX0_dK2NhSbjni = 0; INDEX0_dK2NhSbjni < 0 + 7; ++INDEX0_dK2NhSbjni) {
		if (rank == 0) {
			auto f_gpu_3Gej3oHMpD = [&] () mutable {
				cuda_wrapper_incr_3Gej3oHMpD(GPU_Data_cMWXOBSJiP, GPU_Data_ZzZlEBAest, INDEX0_dK2NhSbjni);
			};
			getGPUPool()->at(1).addWork(f_gpu_3Gej3oHMpD);
		}
		if (rank == 1) {
			auto f_gpu_gRtBZdqZMy = [&] () mutable {
				cuda_wrapper_incr_gRtBZdqZMy(GPU_Data_cOgFJkGv9Q, GPU_Data_pHMIslO85Z, INDEX0_dK2NhSbjni);
			};
			getGPUPool()->at(1).addWork(f_gpu_gRtBZdqZMy);
		}
		if (rank == 0) {
			auto f_movement_beYlmleEWa = [&] () {
				cuda_device2host_wrapper(&result_nEJrXOWu06[0], &GPU_Data_ZzZlEBAest[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_beYlmleEWa);
		}
		if (rank == 1) {
			auto f_movement_7kcoDiZdiB = [&] () {
				cuda_device2host_wrapper(&result_nEJrXOWu06[100], &GPU_Data_pHMIslO85Z[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_7kcoDiZdiB);
		}
		if (rank == 1) {
			Bit_Mask * mask_ptr_jJOWCSdn8c = new Bit_Mask(2,true);
			mask_ptr_jJOWCSdn8c->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_jJOWCSdn8c (mask_ptr_jJOWCSdn8c);
			cuda_sync_device(boost_mask_ptr_jJOWCSdn8c);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_XgiqRzeOPD = new Bit_Mask(2,true);
			mask_ptr_XgiqRzeOPD->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_XgiqRzeOPD (mask_ptr_XgiqRzeOPD);
			cuda_sync_device(boost_mask_ptr_XgiqRzeOPD);
		}
		if (rank == 0) {
			MPI_Send(&result_nEJrXOWu06[0], 100, MPI_INT, 1, 0, MPI_COMM_WORLD);
		} else if (rank == 1) {
			MPI_Recv(&result_nEJrXOWu06[0], 100, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Send(&result_nEJrXOWu06[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD);
		} else if (rank == 0) {
			MPI_Recv(&result_nEJrXOWu06[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		Set_Partial_Array(initial_jyCGvVcxP3, result_nEJrXOWu06, 200);
		if (rank == 0) {
			auto f_movement_I5O5COfVIB = [&] () {
				cuda_host2device_wrapper(&GPU_Data_cMWXOBSJiP[0], &initial_jyCGvVcxP3[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_I5O5COfVIB);
		}
		if (rank == 1) {
			auto f_movement_9212ky8Gc0 = [&] () {
				cuda_host2device_wrapper(&GPU_Data_cOgFJkGv9Q[0], &initial_jyCGvVcxP3[100], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_9212ky8Gc0);
		}
	}
	if (rank == 1) {
		auto f_movement_HiYTSamABt = [&] () {
			cuda_device2host_wrapper(&result_nEJrXOWu06[100], &GPU_Data_pHMIslO85Z[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_HiYTSamABt);
	}
	if (rank == 1) {
		auto f_dealloc_WxJsLSgEBV = [&] () {
			cuda_dealloc_wrapper(GPU_Data_pHMIslO85Z);
		};
		getGPUPool()->at(1).addWork(f_dealloc_WxJsLSgEBV);
	}
	if (rank == 0) {
		auto f_dealloc_Q9trZaLpRs = [&] () {
			cuda_dealloc_wrapper(GPU_Data_cMWXOBSJiP);
		};
		getGPUPool()->at(1).addWork(f_dealloc_Q9trZaLpRs);
	}
	if (rank == 1) {
		auto f_dealloc_M7o2EXZ6gA = [&] () {
			cuda_dealloc_wrapper(GPU_Data_cOgFJkGv9Q);
		};
		getGPUPool()->at(1).addWork(f_dealloc_M7o2EXZ6gA);
	}
	if (rank == 0) {
		auto f_movement_gsDpLIYEME = [&] () {
			cuda_device2host_wrapper(&result_nEJrXOWu06[0], &GPU_Data_ZzZlEBAest[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_gsDpLIYEME);
	}
	if (rank == 0) {
		auto f_dealloc_hVWN7xyo5i = [&] () {
			cuda_dealloc_wrapper(GPU_Data_ZzZlEBAest);
		};
		getGPUPool()->at(1).addWork(f_dealloc_hVWN7xyo5i);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_8ZBNrDIxY4 = new Bit_Mask(2,true);
		mask_ptr_8ZBNrDIxY4->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_8ZBNrDIxY4 (mask_ptr_8ZBNrDIxY4);
		cuda_sync_device(boost_mask_ptr_8ZBNrDIxY4);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_MtCmv0DXZK = new Bit_Mask(2,true);
		mask_ptr_MtCmv0DXZK->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_MtCmv0DXZK (mask_ptr_MtCmv0DXZK);
		cuda_sync_device(boost_mask_ptr_MtCmv0DXZK);
	}
	if (rank == 1) {
		MPI_Send(&result_nEJrXOWu06[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_nEJrXOWu06[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_nEJrXOWu06[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_nEJrXOWu06);
	std::free(initial_jyCGvVcxP3);
	MPI_Finalize();
	return 0;


}

