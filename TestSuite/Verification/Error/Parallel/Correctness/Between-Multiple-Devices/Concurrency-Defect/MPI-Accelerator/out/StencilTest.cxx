/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/StencilTest.hxx"
#include "includes/cuda_lib_StencilTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_7uQyeL2j9T;
	int32_t* result_seq_8QkzZPJlUd;
	int32_t* initial_ZhAABHPNda;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_ZhAABHPNda = Init_List(1, initial_ZhAABHPNda, 200LL * 100LL * 100LL * 1LL);
	result_7uQyeL2j9T = Init_List(result_7uQyeL2j9T, 200LL * 100LL * 100LL * 1LL);
	result_seq_8QkzZPJlUd = Init_List(result_seq_8QkzZPJlUd, 200LL * 100LL * 100LL * 1LL);
	if (rank == 0) {
		MPI_Send(&initial_ZhAABHPNda[990000], 1010000, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_ZhAABHPNda[990000], 1010000, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	int32_t* GPU_Data_XRvOSTLhgJ;
	if (rank == 0) {
		auto f_alloc_ALC4j0vxOC = [&] () {
			cuda_alloc_wrapper(&GPU_Data_XRvOSTLhgJ, sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_alloc_ALC4j0vxOC);
	}
	if (rank == 0) {
		auto f_movement_Zyf1sua1dC = [&] () {
			cuda_host2device_wrapper(&GPU_Data_XRvOSTLhgJ[0], &initial_ZhAABHPNda[0], sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_movement_Zyf1sua1dC);
	}
	int32_t* GPU_Data_xJjHS9bQdG;
	if (rank == 0) {
		auto f_alloc_T16K5qOKNm = [&] () {
			cuda_alloc_wrapper(&GPU_Data_xJjHS9bQdG, sizeof(int32_t) * 1000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_T16K5qOKNm);
	}
	if (rank == 0) {
		auto f_gpu_lLqlI3kORr = [&] () {
			cuda_wrapper_sum_lLqlI3kORr(GPU_Data_XRvOSTLhgJ, GPU_Data_xJjHS9bQdG );
		};
		getGPUPool()->at(1).addWork(f_gpu_lLqlI3kORr);
	}
	int32_t* GPU_Data_5WiBmgH17R;
	if (rank == 1) {
		auto f_alloc_mqqCaiP1Xa = [&] () {
			cuda_alloc_wrapper(&GPU_Data_5WiBmgH17R, sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_alloc_mqqCaiP1Xa);
	}
	if (rank == 1) {
		auto f_movement_8JE9NynG9G = [&] () {
			cuda_host2device_wrapper(&GPU_Data_5WiBmgH17R[0], &initial_ZhAABHPNda[990000], sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_movement_8JE9NynG9G);
	}
	int32_t* GPU_Data_aECJFoOHoL;
	if (rank == 1) {
		auto f_alloc_2juGPVFo9g = [&] () {
			cuda_alloc_wrapper(&GPU_Data_aECJFoOHoL, sizeof(int32_t) * 1000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_2juGPVFo9g);
	}
	if (rank == 1) {
		auto f_gpu_2mLxD8zRet = [&] () {
			cuda_wrapper_sum_2mLxD8zRet(GPU_Data_5WiBmgH17R, GPU_Data_aECJFoOHoL );
		};
		getGPUPool()->at(1).addWork(f_gpu_2mLxD8zRet);
	}
	if (rank == 0) {
		auto f_movement_31baCFML34 = [&] () {
			cuda_device2host_wrapper(&result_7uQyeL2j9T[10000], &GPU_Data_xJjHS9bQdG[10000], sizeof(int32_t) * 990000);
		};
		getGPUPool()->at(1).addWork(f_movement_31baCFML34);
	}
	if (rank == 0) {
		auto f_dealloc_T93dtyAYUq = [&] () {
			cuda_dealloc_wrapper(GPU_Data_xJjHS9bQdG);
		};
		getGPUPool()->at(1).addWork(f_dealloc_T93dtyAYUq);
	}
	if (rank == 1) {
		auto f_movement_IZ2cBRDFEK = [&] () {
			cuda_device2host_wrapper(&result_7uQyeL2j9T[1000000], &GPU_Data_aECJFoOHoL[10000], sizeof(int32_t) * 990000);
		};
		getGPUPool()->at(1).addWork(f_movement_IZ2cBRDFEK);
	}
	if (rank == 1) {
		auto f_dealloc_OXZRvtMUoS = [&] () {
			cuda_dealloc_wrapper(GPU_Data_aECJFoOHoL);
		};
		getGPUPool()->at(1).addWork(f_dealloc_OXZRvtMUoS);
	}
	if (rank == 1) {
		auto f_dealloc_rveXZ6BbO5 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_5WiBmgH17R);
		};
		getGPUPool()->at(1).addWork(f_dealloc_rveXZ6BbO5);
	}
	if (rank == 0) {
		auto f_dealloc_9gRRtO0A0F = [&] () {
			cuda_dealloc_wrapper(GPU_Data_XRvOSTLhgJ);
		};
		getGPUPool()->at(1).addWork(f_dealloc_9gRRtO0A0F);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_WZOeCC2KXF = new Bit_Mask(2,true);
		mask_ptr_WZOeCC2KXF->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_WZOeCC2KXF (mask_ptr_WZOeCC2KXF);
		cuda_sync_device(boost_mask_ptr_WZOeCC2KXF);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_eUKh8DqEIG = new Bit_Mask(2,true);
		mask_ptr_eUKh8DqEIG->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_eUKh8DqEIG (mask_ptr_eUKh8DqEIG);
		cuda_sync_device(boost_mask_ptr_eUKh8DqEIG);
	}
	if (rank == 1) {
		MPI_Send(&result_7uQyeL2j9T[1000000], 990000, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_7uQyeL2j9T[1000000], 990000, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		for ( int32_t i = 1; i < 199; i++ ) {
			for ( int32_t j = 1; j < 99; j++ ) {
				for ( int32_t k = 1; k < 99; k++ ) {
					result_seq_8QkzZPJlUd[100LL * 100LL * (i) + 100LL * (j) + (k)] = initial_ZhAABHPNda[100LL * 100LL * (i + 1) + 100LL * (j) + (k)] + initial_ZhAABHPNda[100LL * 100LL * (i) + 100LL * (j + 1) + (k)] + initial_ZhAABHPNda[100LL * 100LL * (i) + 100LL * (j) + (k + 1)] + initial_ZhAABHPNda[100LL * 100LL * (i - 1) + 100LL * (j) + (k)] + initial_ZhAABHPNda[100LL * 100LL * (i) + 100LL * (j - 1) + (k)] + initial_ZhAABHPNda[100LL * 100LL * (i) + 100LL * (j) + (k - 1)] + initial_ZhAABHPNda[100LL * 100LL * (i) + 100LL * (j) + (k)];
					if (result_7uQyeL2j9T[100LL * 100LL * (i) + 100LL * (j) + (k)] != result_seq_8QkzZPJlUd[100LL * 100LL * (i) + 100LL * (j) + (k)]) {
						print("Result at cell (", i, ",", j, ",", k, ") not correct!");
						MPI_Abort(MPI_COMM_WORLD, 1);
					}
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_7uQyeL2j9T);
	std::free(result_seq_8QkzZPJlUd);
	std::free(initial_ZhAABHPNda);
	MPI_Finalize();
	return 0;


}

