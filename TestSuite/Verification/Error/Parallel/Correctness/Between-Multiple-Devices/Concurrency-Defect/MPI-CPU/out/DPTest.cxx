/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_WEzD3WKDiE;
	int32_t* initial_uPVTYlEKW2;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_uPVTYlEKW2 = Init_List(1, initial_uPVTYlEKW2, 200LL * 1LL);
	result_WEzD3WKDiE = Init_List(result_WEzD3WKDiE, 200LL * 1LL);
	if (rank == 0) {
		MPI_Send(&initial_uPVTYlEKW2[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_uPVTYlEKW2[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	for (size_t INDEX0_zr6c3vuiIK = 0; INDEX0_zr6c3vuiIK < 0 + 7; ++INDEX0_zr6c3vuiIK) {
		if (rank == 0) {
			auto f_0_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 0; INDEX1_zr6c3vuiIK < 0 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(0).addWork(f_0_zr6c3vuiIK);
			auto f_1_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 4; INDEX1_zr6c3vuiIK < 4 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(1).addWork(f_1_zr6c3vuiIK);
			auto f_2_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 8; INDEX1_zr6c3vuiIK < 8 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(2).addWork(f_2_zr6c3vuiIK);
			auto f_3_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 12; INDEX1_zr6c3vuiIK < 12 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(3).addWork(f_3_zr6c3vuiIK);
			auto f_4_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 16; INDEX1_zr6c3vuiIK < 16 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(4).addWork(f_4_zr6c3vuiIK);
			auto f_5_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 20; INDEX1_zr6c3vuiIK < 20 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(5).addWork(f_5_zr6c3vuiIK);
			auto f_6_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 24; INDEX1_zr6c3vuiIK < 24 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(6).addWork(f_6_zr6c3vuiIK);
			auto f_7_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 28; INDEX1_zr6c3vuiIK < 28 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(7).addWork(f_7_zr6c3vuiIK);
			auto f_8_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 32; INDEX1_zr6c3vuiIK < 32 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(8).addWork(f_8_zr6c3vuiIK);
			auto f_9_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 36; INDEX1_zr6c3vuiIK < 36 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(9).addWork(f_9_zr6c3vuiIK);
			auto f_10_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 40; INDEX1_zr6c3vuiIK < 40 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(10).addWork(f_10_zr6c3vuiIK);
			auto f_11_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 44; INDEX1_zr6c3vuiIK < 44 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(11).addWork(f_11_zr6c3vuiIK);
			auto f_12_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 48; INDEX1_zr6c3vuiIK < 48 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(12).addWork(f_12_zr6c3vuiIK);
			auto f_13_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 52; INDEX1_zr6c3vuiIK < 52 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(13).addWork(f_13_zr6c3vuiIK);
			auto f_14_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 56; INDEX1_zr6c3vuiIK < 56 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(14).addWork(f_14_zr6c3vuiIK);
			auto f_15_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 60; INDEX1_zr6c3vuiIK < 60 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(15).addWork(f_15_zr6c3vuiIK);
			auto f_16_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 64; INDEX1_zr6c3vuiIK < 64 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(16).addWork(f_16_zr6c3vuiIK);
			auto f_17_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 68; INDEX1_zr6c3vuiIK < 68 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(17).addWork(f_17_zr6c3vuiIK);
			auto f_18_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 72; INDEX1_zr6c3vuiIK < 72 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(18).addWork(f_18_zr6c3vuiIK);
			auto f_19_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 76; INDEX1_zr6c3vuiIK < 76 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(19).addWork(f_19_zr6c3vuiIK);
			auto f_20_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 80; INDEX1_zr6c3vuiIK < 80 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(20).addWork(f_20_zr6c3vuiIK);
			auto f_21_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 84; INDEX1_zr6c3vuiIK < 84 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(21).addWork(f_21_zr6c3vuiIK);
			auto f_22_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 88; INDEX1_zr6c3vuiIK < 88 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(22).addWork(f_22_zr6c3vuiIK);
			auto f_23_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 92; INDEX1_zr6c3vuiIK < 92 + 8; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(23).addWork(f_23_zr6c3vuiIK);
		}
		if (rank == 1) {
			auto f_0_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 100; INDEX1_zr6c3vuiIK < 100 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(0).addWork(f_0_zr6c3vuiIK);
			auto f_1_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 104; INDEX1_zr6c3vuiIK < 104 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(1).addWork(f_1_zr6c3vuiIK);
			auto f_2_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 108; INDEX1_zr6c3vuiIK < 108 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(2).addWork(f_2_zr6c3vuiIK);
			auto f_3_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 112; INDEX1_zr6c3vuiIK < 112 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(3).addWork(f_3_zr6c3vuiIK);
			auto f_4_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 116; INDEX1_zr6c3vuiIK < 116 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(4).addWork(f_4_zr6c3vuiIK);
			auto f_5_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 120; INDEX1_zr6c3vuiIK < 120 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(5).addWork(f_5_zr6c3vuiIK);
			auto f_6_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 124; INDEX1_zr6c3vuiIK < 124 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(6).addWork(f_6_zr6c3vuiIK);
			auto f_7_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 128; INDEX1_zr6c3vuiIK < 128 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(7).addWork(f_7_zr6c3vuiIK);
			auto f_8_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 132; INDEX1_zr6c3vuiIK < 132 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(8).addWork(f_8_zr6c3vuiIK);
			auto f_9_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 136; INDEX1_zr6c3vuiIK < 136 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(9).addWork(f_9_zr6c3vuiIK);
			auto f_10_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 140; INDEX1_zr6c3vuiIK < 140 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(10).addWork(f_10_zr6c3vuiIK);
			auto f_11_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 144; INDEX1_zr6c3vuiIK < 144 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(11).addWork(f_11_zr6c3vuiIK);
			auto f_12_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 148; INDEX1_zr6c3vuiIK < 148 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(12).addWork(f_12_zr6c3vuiIK);
			auto f_13_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 152; INDEX1_zr6c3vuiIK < 152 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(13).addWork(f_13_zr6c3vuiIK);
			auto f_14_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 156; INDEX1_zr6c3vuiIK < 156 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(14).addWork(f_14_zr6c3vuiIK);
			auto f_15_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 160; INDEX1_zr6c3vuiIK < 160 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(15).addWork(f_15_zr6c3vuiIK);
			auto f_16_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 164; INDEX1_zr6c3vuiIK < 164 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(16).addWork(f_16_zr6c3vuiIK);
			auto f_17_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 168; INDEX1_zr6c3vuiIK < 168 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(17).addWork(f_17_zr6c3vuiIK);
			auto f_18_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 172; INDEX1_zr6c3vuiIK < 172 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(18).addWork(f_18_zr6c3vuiIK);
			auto f_19_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 176; INDEX1_zr6c3vuiIK < 176 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(19).addWork(f_19_zr6c3vuiIK);
			auto f_20_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 180; INDEX1_zr6c3vuiIK < 180 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(20).addWork(f_20_zr6c3vuiIK);
			auto f_21_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 184; INDEX1_zr6c3vuiIK < 184 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(21).addWork(f_21_zr6c3vuiIK);
			auto f_22_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 188; INDEX1_zr6c3vuiIK < 188 + 4; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(22).addWork(f_22_zr6c3vuiIK);
			auto f_23_zr6c3vuiIK = [&] () {
				for (size_t INDEX1_zr6c3vuiIK = 192; INDEX1_zr6c3vuiIK < 192 + 8; ++INDEX1_zr6c3vuiIK) {
					result_WEzD3WKDiE[(INDEX1_zr6c3vuiIK)] = initial_uPVTYlEKW2[(INDEX1_zr6c3vuiIK)] + 1;
				}
			};
			getPool()->at(23).addWork(f_23_zr6c3vuiIK);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_bjKTBjD6Ai = new Bit_Mask(48,true);
			for (size_t i_KB5FFi3Zbm = 0; i_KB5FFi3Zbm < 24; ++i_KB5FFi3Zbm) {
				mask_ptr_bjKTBjD6Ai->setBarrier(i_KB5FFi3Zbm);
			}
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_bjKTBjD6Ai (mask_ptr_bjKTBjD6Ai);
			self_barrier(boost_mask_ptr_bjKTBjD6Ai);
		}
		if (rank == 1) {
			Bit_Mask * mask_ptr_kNUvF346kQ = new Bit_Mask(48,true);
			for (size_t i_vtq0NyThxC = 0; i_vtq0NyThxC < 24; ++i_vtq0NyThxC) {
				mask_ptr_kNUvF346kQ->setBarrier(i_vtq0NyThxC);
			}
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_kNUvF346kQ (mask_ptr_kNUvF346kQ);
			self_barrier(boost_mask_ptr_kNUvF346kQ);
		}
		if (rank == 0) {
			MPI_Send(&result_WEzD3WKDiE[0], 100, MPI_INT, 1, 0, MPI_COMM_WORLD);
		} else if (rank == 1) {
			MPI_Recv(&result_WEzD3WKDiE[0], 100, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Send(&result_WEzD3WKDiE[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD);
		} else if (rank == 0) {
			MPI_Recv(&result_WEzD3WKDiE[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		Set_Partial_Array(initial_uPVTYlEKW2, result_WEzD3WKDiE, 200);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_kV4dI5cdqn = new Bit_Mask(48,true);
		for (size_t i_SYaexgcbc3 = 0; i_SYaexgcbc3 < 24; ++i_SYaexgcbc3) {
			mask_ptr_kV4dI5cdqn->setBarrier(i_SYaexgcbc3);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_kV4dI5cdqn (mask_ptr_kV4dI5cdqn);
		self_barrier(boost_mask_ptr_kV4dI5cdqn);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_YLF1GWupqK = new Bit_Mask(48,true);
		for (size_t i_zYKcexTU12 = 0; i_zYKcexTU12 < 24; ++i_zYKcexTU12) {
			mask_ptr_YLF1GWupqK->setBarrier(i_zYKcexTU12);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_YLF1GWupqK (mask_ptr_YLF1GWupqK);
		self_barrier(boost_mask_ptr_YLF1GWupqK);
	}
	if (rank == 1) {
		MPI_Send(&result_WEzD3WKDiE[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_WEzD3WKDiE[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_WEzD3WKDiE[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_WEzD3WKDiE);
	std::free(initial_uPVTYlEKW2);
	MPI_Finalize();
	return 0;


}

