/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapTest.hxx"
#include "includes/cuda_lib_MapTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_JHH2NnZsOc;
	int32_t* result_seq_MV9QSpt2h0;
	int32_t* initial_q4DN5nonxQ;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_q4DN5nonxQ = Init_List(1, initial_q4DN5nonxQ, 200LL * 1LL);
	result_JHH2NnZsOc = Init_List(result_JHH2NnZsOc, 200LL * 1LL);
	result_seq_MV9QSpt2h0 = Init_List(result_seq_MV9QSpt2h0, 200LL * 1LL);
	if (rank == 0) {
		MPI_Send(&initial_q4DN5nonxQ[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_q4DN5nonxQ[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		auto f_0_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 0; INDEX_57pRKpA3oX < 0 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_57pRKpA3oX);
		auto f_1_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 4; INDEX_57pRKpA3oX < 4 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_57pRKpA3oX);
		auto f_2_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 8; INDEX_57pRKpA3oX < 8 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_57pRKpA3oX);
		auto f_3_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 12; INDEX_57pRKpA3oX < 12 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_57pRKpA3oX);
		auto f_4_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 16; INDEX_57pRKpA3oX < 16 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_57pRKpA3oX);
		auto f_5_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 20; INDEX_57pRKpA3oX < 20 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_57pRKpA3oX);
		auto f_6_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 24; INDEX_57pRKpA3oX < 24 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_57pRKpA3oX);
		auto f_7_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 28; INDEX_57pRKpA3oX < 28 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_57pRKpA3oX);
		auto f_8_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 32; INDEX_57pRKpA3oX < 32 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_57pRKpA3oX);
		auto f_9_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 36; INDEX_57pRKpA3oX < 36 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_57pRKpA3oX);
		auto f_10_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 40; INDEX_57pRKpA3oX < 40 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_57pRKpA3oX);
		auto f_11_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 44; INDEX_57pRKpA3oX < 44 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_57pRKpA3oX);
		auto f_12_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 48; INDEX_57pRKpA3oX < 48 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_57pRKpA3oX);
		auto f_13_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 52; INDEX_57pRKpA3oX < 52 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_57pRKpA3oX);
		auto f_14_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 56; INDEX_57pRKpA3oX < 56 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_57pRKpA3oX);
		auto f_15_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 60; INDEX_57pRKpA3oX < 60 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_57pRKpA3oX);
		auto f_16_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 64; INDEX_57pRKpA3oX < 64 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_57pRKpA3oX);
		auto f_17_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 68; INDEX_57pRKpA3oX < 68 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_57pRKpA3oX);
		auto f_18_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 72; INDEX_57pRKpA3oX < 72 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_57pRKpA3oX);
		auto f_19_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 76; INDEX_57pRKpA3oX < 76 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_57pRKpA3oX);
		auto f_20_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 80; INDEX_57pRKpA3oX < 80 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_57pRKpA3oX);
		auto f_21_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 84; INDEX_57pRKpA3oX < 84 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_57pRKpA3oX);
		auto f_22_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 88; INDEX_57pRKpA3oX < 88 + 4; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_57pRKpA3oX);
		auto f_23_57pRKpA3oX = [&] () {
			for (size_t INDEX_57pRKpA3oX = 92; INDEX_57pRKpA3oX < 92 + 8; ++INDEX_57pRKpA3oX) {
				result_JHH2NnZsOc[(INDEX_57pRKpA3oX)] = initial_q4DN5nonxQ[(INDEX_57pRKpA3oX)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_57pRKpA3oX);
	}
	if (rank == 1) {
		auto f_0_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 100; INDEX_hHhRDP97i5 < 100 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_hHhRDP97i5);
		auto f_1_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 104; INDEX_hHhRDP97i5 < 104 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_hHhRDP97i5);
		auto f_2_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 108; INDEX_hHhRDP97i5 < 108 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_hHhRDP97i5);
		auto f_3_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 112; INDEX_hHhRDP97i5 < 112 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_hHhRDP97i5);
		auto f_4_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 116; INDEX_hHhRDP97i5 < 116 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_hHhRDP97i5);
		auto f_5_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 120; INDEX_hHhRDP97i5 < 120 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_hHhRDP97i5);
		auto f_6_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 124; INDEX_hHhRDP97i5 < 124 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_hHhRDP97i5);
		auto f_7_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 128; INDEX_hHhRDP97i5 < 128 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_hHhRDP97i5);
		auto f_8_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 132; INDEX_hHhRDP97i5 < 132 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_hHhRDP97i5);
		auto f_9_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 136; INDEX_hHhRDP97i5 < 136 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_hHhRDP97i5);
		auto f_10_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 140; INDEX_hHhRDP97i5 < 140 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_hHhRDP97i5);
		auto f_11_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 144; INDEX_hHhRDP97i5 < 144 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_hHhRDP97i5);
		auto f_12_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 148; INDEX_hHhRDP97i5 < 148 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_hHhRDP97i5);
		auto f_13_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 152; INDEX_hHhRDP97i5 < 152 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_hHhRDP97i5);
		auto f_14_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 156; INDEX_hHhRDP97i5 < 156 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_hHhRDP97i5);
		auto f_15_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 160; INDEX_hHhRDP97i5 < 160 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_hHhRDP97i5);
		auto f_16_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 164; INDEX_hHhRDP97i5 < 164 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_hHhRDP97i5);
		auto f_17_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 168; INDEX_hHhRDP97i5 < 168 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_hHhRDP97i5);
		auto f_18_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 172; INDEX_hHhRDP97i5 < 172 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_hHhRDP97i5);
		auto f_19_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 176; INDEX_hHhRDP97i5 < 176 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_hHhRDP97i5);
		auto f_20_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 180; INDEX_hHhRDP97i5 < 180 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_hHhRDP97i5);
		auto f_21_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 184; INDEX_hHhRDP97i5 < 184 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_hHhRDP97i5);
		auto f_22_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 188; INDEX_hHhRDP97i5 < 188 + 4; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_hHhRDP97i5);
		auto f_23_hHhRDP97i5 = [&] () {
			for (size_t INDEX_hHhRDP97i5 = 192; INDEX_hHhRDP97i5 < 192 + 8; ++INDEX_hHhRDP97i5) {
				result_JHH2NnZsOc[(INDEX_hHhRDP97i5)] = initial_q4DN5nonxQ[(INDEX_hHhRDP97i5)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_hHhRDP97i5);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_45j0AlsDN9 = new Bit_Mask(48,true);
		for (size_t i_ORFctzbvJN = 0; i_ORFctzbvJN < 24; ++i_ORFctzbvJN) {
			mask_ptr_45j0AlsDN9->setBarrier(i_ORFctzbvJN);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_45j0AlsDN9 (mask_ptr_45j0AlsDN9);
		self_barrier(boost_mask_ptr_45j0AlsDN9);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_ClhatWNOKq = new Bit_Mask(48,true);
		for (size_t i_9oBFzCUu4Z = 0; i_9oBFzCUu4Z < 24; ++i_9oBFzCUu4Z) {
			mask_ptr_ClhatWNOKq->setBarrier(i_9oBFzCUu4Z);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_ClhatWNOKq (mask_ptr_ClhatWNOKq);
		self_barrier(boost_mask_ptr_ClhatWNOKq);
	}
	if (rank == 1) {
		MPI_Send(&result_JHH2NnZsOc[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_JHH2NnZsOc[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_MV9QSpt2h0[(i)] = initial_q4DN5nonxQ[(i)] + 1;
			if (result_seq_MV9QSpt2h0[(i)] != result_JHH2NnZsOc[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_JHH2NnZsOc);
	std::free(result_seq_MV9QSpt2h0);
	std::free(initial_q4DN5nonxQ);
	MPI_Finalize();
	return 0;


}

