/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_bMVivYEBlv;
	int32_t* initial_QmrGGfQlIe;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_QmrGGfQlIe = Init_List(1, initial_QmrGGfQlIe, 200LL * 1LL);
	if (rank == 0) {
		result_bMVivYEBlv = 0;
	}
	if (rank == 0) {
		MPI_Send(&initial_QmrGGfQlIe[100], 100, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_QmrGGfQlIe[100], 100, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	pthread_mutex_t reduction_lock_XdQb7cEDa2 = PTHREAD_MUTEX_INITIALIZER;
	int32_t temp_data_XdQb7cEDa2 = 0;
	if (rank == 0) {
		int32_t* partialResult_mLz3HXFGQ3;
		partialResult_mLz3HXFGQ3 = Init_List(result_bMVivYEBlv, partialResult_mLz3HXFGQ3, 24);
		auto f_0_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 0; INDEX_mLz3HXFGQ3 < 0 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[0] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(0).addWork(f_0_mLz3HXFGQ3);
		auto f_1_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 4; INDEX_mLz3HXFGQ3 < 4 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[1] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(1).addWork(f_1_mLz3HXFGQ3);
		auto f_2_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 8; INDEX_mLz3HXFGQ3 < 8 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[2] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(2).addWork(f_2_mLz3HXFGQ3);
		auto f_3_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 12; INDEX_mLz3HXFGQ3 < 12 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[3] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(3).addWork(f_3_mLz3HXFGQ3);
		auto f_4_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 16; INDEX_mLz3HXFGQ3 < 16 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[4] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(4).addWork(f_4_mLz3HXFGQ3);
		auto f_5_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 20; INDEX_mLz3HXFGQ3 < 20 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[5] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(5).addWork(f_5_mLz3HXFGQ3);
		auto f_6_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 24; INDEX_mLz3HXFGQ3 < 24 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[6] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(6).addWork(f_6_mLz3HXFGQ3);
		auto f_7_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 28; INDEX_mLz3HXFGQ3 < 28 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[7] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(7).addWork(f_7_mLz3HXFGQ3);
		auto f_8_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 32; INDEX_mLz3HXFGQ3 < 32 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[8] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(8).addWork(f_8_mLz3HXFGQ3);
		auto f_9_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 36; INDEX_mLz3HXFGQ3 < 36 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[9] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(9).addWork(f_9_mLz3HXFGQ3);
		auto f_10_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 40; INDEX_mLz3HXFGQ3 < 40 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[10] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(10).addWork(f_10_mLz3HXFGQ3);
		auto f_11_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 44; INDEX_mLz3HXFGQ3 < 44 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[11] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(11).addWork(f_11_mLz3HXFGQ3);
		auto f_12_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 48; INDEX_mLz3HXFGQ3 < 48 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[12] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(12).addWork(f_12_mLz3HXFGQ3);
		auto f_13_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 52; INDEX_mLz3HXFGQ3 < 52 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[13] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(13).addWork(f_13_mLz3HXFGQ3);
		auto f_14_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 56; INDEX_mLz3HXFGQ3 < 56 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[14] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(14).addWork(f_14_mLz3HXFGQ3);
		auto f_15_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 60; INDEX_mLz3HXFGQ3 < 60 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[15] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(15).addWork(f_15_mLz3HXFGQ3);
		auto f_16_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 64; INDEX_mLz3HXFGQ3 < 64 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[16] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(16).addWork(f_16_mLz3HXFGQ3);
		auto f_17_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 68; INDEX_mLz3HXFGQ3 < 68 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[17] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(17).addWork(f_17_mLz3HXFGQ3);
		auto f_18_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 72; INDEX_mLz3HXFGQ3 < 72 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[18] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(18).addWork(f_18_mLz3HXFGQ3);
		auto f_19_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 76; INDEX_mLz3HXFGQ3 < 76 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[19] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(19).addWork(f_19_mLz3HXFGQ3);
		auto f_20_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 80; INDEX_mLz3HXFGQ3 < 80 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[20] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(20).addWork(f_20_mLz3HXFGQ3);
		auto f_21_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 84; INDEX_mLz3HXFGQ3 < 84 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[21] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(21).addWork(f_21_mLz3HXFGQ3);
		auto f_22_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 88; INDEX_mLz3HXFGQ3 < 88 + 4; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[22] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(22).addWork(f_22_mLz3HXFGQ3);
		auto f_23_mLz3HXFGQ3 = [&] () {
			for (size_t INDEX_mLz3HXFGQ3 = 92; INDEX_mLz3HXFGQ3 < 92 + 8; ++INDEX_mLz3HXFGQ3) {
				partialResult_mLz3HXFGQ3[23] += initial_QmrGGfQlIe[(INDEX_mLz3HXFGQ3)];
			}
		};
		getPool()->at(23).addWork(f_23_mLz3HXFGQ3);
		Bit_Mask * mask_ptr_mLz3HXFGQ3 = new Bit_Mask(48,false);
		for (size_t i_mLz3HXFGQ3 = 0; i_mLz3HXFGQ3 < 24; ++i_mLz3HXFGQ3) {
			mask_ptr_mLz3HXFGQ3->setBarrier(i_mLz3HXFGQ3);
		}
		boost::shared_ptr<Bit_Mask>mask_mLz3HXFGQ3 (mask_ptr_mLz3HXFGQ3);
		barrier(mask_mLz3HXFGQ3);
		auto lambda_reduction_mLz3HXFGQ3 = [partialResult_mLz3HXFGQ3, &temp_data_XdQb7cEDa2 ,&reduction_lock_XdQb7cEDa2] () {
			pthread_mutex_lock(&reduction_lock_XdQb7cEDa2);
			temp_data_XdQb7cEDa2 = reduction_sum(temp_data_XdQb7cEDa2, partialResult_mLz3HXFGQ3, 24, 0);
			pthread_mutex_unlock(&reduction_lock_XdQb7cEDa2);
		};
		getPool()->at(0).addWork(lambda_reduction_mLz3HXFGQ3);
	}
	if (rank == 1) {
		int32_t* partialResult_y4D5yNJ865;
		partialResult_y4D5yNJ865 = Init_List(result_bMVivYEBlv, partialResult_y4D5yNJ865, 24);
		auto f_0_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 100; INDEX_y4D5yNJ865 < 100 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[0] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(0).addWork(f_0_y4D5yNJ865);
		auto f_1_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 104; INDEX_y4D5yNJ865 < 104 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[1] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(1).addWork(f_1_y4D5yNJ865);
		auto f_2_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 108; INDEX_y4D5yNJ865 < 108 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[2] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(2).addWork(f_2_y4D5yNJ865);
		auto f_3_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 112; INDEX_y4D5yNJ865 < 112 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[3] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(3).addWork(f_3_y4D5yNJ865);
		auto f_4_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 116; INDEX_y4D5yNJ865 < 116 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[4] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(4).addWork(f_4_y4D5yNJ865);
		auto f_5_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 120; INDEX_y4D5yNJ865 < 120 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[5] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(5).addWork(f_5_y4D5yNJ865);
		auto f_6_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 124; INDEX_y4D5yNJ865 < 124 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[6] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(6).addWork(f_6_y4D5yNJ865);
		auto f_7_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 128; INDEX_y4D5yNJ865 < 128 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[7] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(7).addWork(f_7_y4D5yNJ865);
		auto f_8_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 132; INDEX_y4D5yNJ865 < 132 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[8] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(8).addWork(f_8_y4D5yNJ865);
		auto f_9_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 136; INDEX_y4D5yNJ865 < 136 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[9] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(9).addWork(f_9_y4D5yNJ865);
		auto f_10_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 140; INDEX_y4D5yNJ865 < 140 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[10] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(10).addWork(f_10_y4D5yNJ865);
		auto f_11_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 144; INDEX_y4D5yNJ865 < 144 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[11] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(11).addWork(f_11_y4D5yNJ865);
		auto f_12_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 148; INDEX_y4D5yNJ865 < 148 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[12] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(12).addWork(f_12_y4D5yNJ865);
		auto f_13_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 152; INDEX_y4D5yNJ865 < 152 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[13] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(13).addWork(f_13_y4D5yNJ865);
		auto f_14_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 156; INDEX_y4D5yNJ865 < 156 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[14] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(14).addWork(f_14_y4D5yNJ865);
		auto f_15_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 160; INDEX_y4D5yNJ865 < 160 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[15] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(15).addWork(f_15_y4D5yNJ865);
		auto f_16_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 164; INDEX_y4D5yNJ865 < 164 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[16] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(16).addWork(f_16_y4D5yNJ865);
		auto f_17_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 168; INDEX_y4D5yNJ865 < 168 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[17] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(17).addWork(f_17_y4D5yNJ865);
		auto f_18_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 172; INDEX_y4D5yNJ865 < 172 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[18] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(18).addWork(f_18_y4D5yNJ865);
		auto f_19_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 176; INDEX_y4D5yNJ865 < 176 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[19] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(19).addWork(f_19_y4D5yNJ865);
		auto f_20_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 180; INDEX_y4D5yNJ865 < 180 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[20] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(20).addWork(f_20_y4D5yNJ865);
		auto f_21_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 184; INDEX_y4D5yNJ865 < 184 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[21] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(21).addWork(f_21_y4D5yNJ865);
		auto f_22_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 188; INDEX_y4D5yNJ865 < 188 + 4; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[22] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(22).addWork(f_22_y4D5yNJ865);
		auto f_23_y4D5yNJ865 = [&] () {
			for (size_t INDEX_y4D5yNJ865 = 192; INDEX_y4D5yNJ865 < 192 + 8; ++INDEX_y4D5yNJ865) {
				partialResult_y4D5yNJ865[23] += initial_QmrGGfQlIe[(INDEX_y4D5yNJ865)];
			}
		};
		getPool()->at(23).addWork(f_23_y4D5yNJ865);
		Bit_Mask * mask_ptr_y4D5yNJ865 = new Bit_Mask(48,false);
		for (size_t i_y4D5yNJ865 = 0; i_y4D5yNJ865 < 24; ++i_y4D5yNJ865) {
			mask_ptr_y4D5yNJ865->setBarrier(i_y4D5yNJ865);
		}
		boost::shared_ptr<Bit_Mask>mask_y4D5yNJ865 (mask_ptr_y4D5yNJ865);
		barrier(mask_y4D5yNJ865);
		auto lambda_reduction_y4D5yNJ865 = [partialResult_y4D5yNJ865, &temp_data_XdQb7cEDa2 ,&reduction_lock_XdQb7cEDa2] () {
			pthread_mutex_lock(&reduction_lock_XdQb7cEDa2);
			temp_data_XdQb7cEDa2 = reduction_sum(temp_data_XdQb7cEDa2, partialResult_y4D5yNJ865, 24, 0);
			pthread_mutex_unlock(&reduction_lock_XdQb7cEDa2);
		};
		getPool()->at(0).addWork(lambda_reduction_y4D5yNJ865);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_lvx7ZBrUQv = new Bit_Mask(48,true);
		for (size_t i_E3gVKoBGoK = 0; i_E3gVKoBGoK < 24; ++i_E3gVKoBGoK) {
			mask_ptr_lvx7ZBrUQv->setBarrier(i_E3gVKoBGoK);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_lvx7ZBrUQv (mask_ptr_lvx7ZBrUQv);
		self_barrier(boost_mask_ptr_lvx7ZBrUQv);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_OsTX97Tisn = new Bit_Mask(48,true);
		for (size_t i_BhbJEs8n3t = 0; i_BhbJEs8n3t < 24; ++i_BhbJEs8n3t) {
			mask_ptr_OsTX97Tisn->setBarrier(i_BhbJEs8n3t);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_OsTX97Tisn (mask_ptr_OsTX97Tisn);
		self_barrier(boost_mask_ptr_OsTX97Tisn);
	}
	int32_t MPI_Reduction_Combiner_fufcyDlJ6J = 0;
	MPI_Reduce(&temp_data_XdQb7cEDa2, &MPI_Reduction_Combiner_fufcyDlJ6J, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if (rank == 0) {
		result_bMVivYEBlv = MPI_Reduction_Combiner_fufcyDlJ6J;
	}
	if (rank == 0) {
		if (result_bMVivYEBlv != 200) {
			print("summation not correct! Expected: 200 found: ", result_bMVivYEBlv);
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_QmrGGfQlIe);
	MPI_Finalize();
	return 0;


}

