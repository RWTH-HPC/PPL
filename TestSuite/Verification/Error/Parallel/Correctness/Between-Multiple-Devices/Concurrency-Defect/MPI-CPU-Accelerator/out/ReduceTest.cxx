/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_PCTcyANvaq;
	int32_t* initial_p5Bg5zAdt9;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_p5Bg5zAdt9 = Init_List(1, initial_p5Bg5zAdt9, 200LL * 1LL);
	if (rank == 0) {
		result_PCTcyANvaq = 0;
	}
	if (rank == 0) {
		MPI_Send(&initial_p5Bg5zAdt9[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_p5Bg5zAdt9[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		MPI_Send(&initial_p5Bg5zAdt9[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_p5Bg5zAdt9[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	pthread_mutex_t reduction_lock_sMksrp5Xb1 = PTHREAD_MUTEX_INITIALIZER;
	int32_t temp_data_sMksrp5Xb1 = 0;
	if (rank == 0) {
		int32_t* partialResult_xtop1tTDnA;
		partialResult_xtop1tTDnA = Init_List(result_PCTcyANvaq, partialResult_xtop1tTDnA, 24);
		auto f_0_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 0; INDEX_xtop1tTDnA < 0 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[0] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(0).addWork(f_0_xtop1tTDnA);
		auto f_1_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 2; INDEX_xtop1tTDnA < 2 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[1] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(1).addWork(f_1_xtop1tTDnA);
		auto f_2_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 4; INDEX_xtop1tTDnA < 4 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[2] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(2).addWork(f_2_xtop1tTDnA);
		auto f_3_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 6; INDEX_xtop1tTDnA < 6 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[3] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(3).addWork(f_3_xtop1tTDnA);
		auto f_4_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 8; INDEX_xtop1tTDnA < 8 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[4] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(4).addWork(f_4_xtop1tTDnA);
		auto f_5_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 10; INDEX_xtop1tTDnA < 10 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[5] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(5).addWork(f_5_xtop1tTDnA);
		auto f_6_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 12; INDEX_xtop1tTDnA < 12 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[6] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(6).addWork(f_6_xtop1tTDnA);
		auto f_7_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 14; INDEX_xtop1tTDnA < 14 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[7] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(7).addWork(f_7_xtop1tTDnA);
		auto f_8_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 16; INDEX_xtop1tTDnA < 16 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[8] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(8).addWork(f_8_xtop1tTDnA);
		auto f_9_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 18; INDEX_xtop1tTDnA < 18 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[9] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(9).addWork(f_9_xtop1tTDnA);
		auto f_10_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 20; INDEX_xtop1tTDnA < 20 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[10] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(10).addWork(f_10_xtop1tTDnA);
		auto f_11_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 22; INDEX_xtop1tTDnA < 22 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[11] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(11).addWork(f_11_xtop1tTDnA);
		auto f_12_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 24; INDEX_xtop1tTDnA < 24 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[12] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(12).addWork(f_12_xtop1tTDnA);
		auto f_13_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 26; INDEX_xtop1tTDnA < 26 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[13] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(13).addWork(f_13_xtop1tTDnA);
		auto f_14_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 28; INDEX_xtop1tTDnA < 28 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[14] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(14).addWork(f_14_xtop1tTDnA);
		auto f_15_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 30; INDEX_xtop1tTDnA < 30 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[15] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(15).addWork(f_15_xtop1tTDnA);
		auto f_16_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 32; INDEX_xtop1tTDnA < 32 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[16] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(16).addWork(f_16_xtop1tTDnA);
		auto f_17_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 34; INDEX_xtop1tTDnA < 34 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[17] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(17).addWork(f_17_xtop1tTDnA);
		auto f_18_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 36; INDEX_xtop1tTDnA < 36 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[18] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(18).addWork(f_18_xtop1tTDnA);
		auto f_19_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 38; INDEX_xtop1tTDnA < 38 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[19] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(19).addWork(f_19_xtop1tTDnA);
		auto f_20_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 40; INDEX_xtop1tTDnA < 40 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[20] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(20).addWork(f_20_xtop1tTDnA);
		auto f_21_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 42; INDEX_xtop1tTDnA < 42 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[21] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(21).addWork(f_21_xtop1tTDnA);
		auto f_22_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 44; INDEX_xtop1tTDnA < 44 + 2; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[22] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(22).addWork(f_22_xtop1tTDnA);
		auto f_23_xtop1tTDnA = [&] () {
			for (size_t INDEX_xtop1tTDnA = 46; INDEX_xtop1tTDnA < 46 + 4; ++INDEX_xtop1tTDnA) {
				partialResult_xtop1tTDnA[23] += initial_p5Bg5zAdt9[(INDEX_xtop1tTDnA)];
			}
		};
		getPool()->at(23).addWork(f_23_xtop1tTDnA);
		Bit_Mask * mask_ptr_xtop1tTDnA = new Bit_Mask(48,false);
		for (size_t i_xtop1tTDnA = 0; i_xtop1tTDnA < 24; ++i_xtop1tTDnA) {
			mask_ptr_xtop1tTDnA->setBarrier(i_xtop1tTDnA);
		}
		boost::shared_ptr<Bit_Mask>mask_xtop1tTDnA (mask_ptr_xtop1tTDnA);
		barrier(mask_xtop1tTDnA);
		auto lambda_reduction_xtop1tTDnA = [partialResult_xtop1tTDnA, &temp_data_sMksrp5Xb1 ,&reduction_lock_sMksrp5Xb1] () {
			pthread_mutex_lock(&reduction_lock_sMksrp5Xb1);
			temp_data_sMksrp5Xb1 = reduction_sum(temp_data_sMksrp5Xb1, partialResult_xtop1tTDnA, 24, 0);
			pthread_mutex_unlock(&reduction_lock_sMksrp5Xb1);
		};
		getPool()->at(0).addWork(lambda_reduction_xtop1tTDnA);
	}
	if (rank == 1) {
		int32_t* partialResult_xrRbDQ9m3V;
		partialResult_xrRbDQ9m3V = Init_List(result_PCTcyANvaq, partialResult_xrRbDQ9m3V, 24);
		auto f_0_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 50; INDEX_xrRbDQ9m3V < 50 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[0] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(0).addWork(f_0_xrRbDQ9m3V);
		auto f_1_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 52; INDEX_xrRbDQ9m3V < 52 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[1] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(1).addWork(f_1_xrRbDQ9m3V);
		auto f_2_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 54; INDEX_xrRbDQ9m3V < 54 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[2] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(2).addWork(f_2_xrRbDQ9m3V);
		auto f_3_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 56; INDEX_xrRbDQ9m3V < 56 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[3] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(3).addWork(f_3_xrRbDQ9m3V);
		auto f_4_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 58; INDEX_xrRbDQ9m3V < 58 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[4] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(4).addWork(f_4_xrRbDQ9m3V);
		auto f_5_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 60; INDEX_xrRbDQ9m3V < 60 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[5] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(5).addWork(f_5_xrRbDQ9m3V);
		auto f_6_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 62; INDEX_xrRbDQ9m3V < 62 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[6] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(6).addWork(f_6_xrRbDQ9m3V);
		auto f_7_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 64; INDEX_xrRbDQ9m3V < 64 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[7] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(7).addWork(f_7_xrRbDQ9m3V);
		auto f_8_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 66; INDEX_xrRbDQ9m3V < 66 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[8] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(8).addWork(f_8_xrRbDQ9m3V);
		auto f_9_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 68; INDEX_xrRbDQ9m3V < 68 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[9] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(9).addWork(f_9_xrRbDQ9m3V);
		auto f_10_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 70; INDEX_xrRbDQ9m3V < 70 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[10] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(10).addWork(f_10_xrRbDQ9m3V);
		auto f_11_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 72; INDEX_xrRbDQ9m3V < 72 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[11] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(11).addWork(f_11_xrRbDQ9m3V);
		auto f_12_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 74; INDEX_xrRbDQ9m3V < 74 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[12] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(12).addWork(f_12_xrRbDQ9m3V);
		auto f_13_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 76; INDEX_xrRbDQ9m3V < 76 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[13] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(13).addWork(f_13_xrRbDQ9m3V);
		auto f_14_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 78; INDEX_xrRbDQ9m3V < 78 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[14] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(14).addWork(f_14_xrRbDQ9m3V);
		auto f_15_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 80; INDEX_xrRbDQ9m3V < 80 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[15] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(15).addWork(f_15_xrRbDQ9m3V);
		auto f_16_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 82; INDEX_xrRbDQ9m3V < 82 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[16] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(16).addWork(f_16_xrRbDQ9m3V);
		auto f_17_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 84; INDEX_xrRbDQ9m3V < 84 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[17] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(17).addWork(f_17_xrRbDQ9m3V);
		auto f_18_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 86; INDEX_xrRbDQ9m3V < 86 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[18] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(18).addWork(f_18_xrRbDQ9m3V);
		auto f_19_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 88; INDEX_xrRbDQ9m3V < 88 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[19] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(19).addWork(f_19_xrRbDQ9m3V);
		auto f_20_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 90; INDEX_xrRbDQ9m3V < 90 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[20] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(20).addWork(f_20_xrRbDQ9m3V);
		auto f_21_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 92; INDEX_xrRbDQ9m3V < 92 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[21] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(21).addWork(f_21_xrRbDQ9m3V);
		auto f_22_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 94; INDEX_xrRbDQ9m3V < 94 + 2; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[22] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(22).addWork(f_22_xrRbDQ9m3V);
		auto f_23_xrRbDQ9m3V = [&] () {
			for (size_t INDEX_xrRbDQ9m3V = 96; INDEX_xrRbDQ9m3V < 96 + 4; ++INDEX_xrRbDQ9m3V) {
				partialResult_xrRbDQ9m3V[23] += initial_p5Bg5zAdt9[(INDEX_xrRbDQ9m3V)];
			}
		};
		getPool()->at(23).addWork(f_23_xrRbDQ9m3V);
		Bit_Mask * mask_ptr_xrRbDQ9m3V = new Bit_Mask(48,false);
		for (size_t i_xrRbDQ9m3V = 0; i_xrRbDQ9m3V < 24; ++i_xrRbDQ9m3V) {
			mask_ptr_xrRbDQ9m3V->setBarrier(i_xrRbDQ9m3V);
		}
		boost::shared_ptr<Bit_Mask>mask_xrRbDQ9m3V (mask_ptr_xrRbDQ9m3V);
		barrier(mask_xrRbDQ9m3V);
		auto lambda_reduction_xrRbDQ9m3V = [partialResult_xrRbDQ9m3V, &temp_data_sMksrp5Xb1 ,&reduction_lock_sMksrp5Xb1] () {
			pthread_mutex_lock(&reduction_lock_sMksrp5Xb1);
			temp_data_sMksrp5Xb1 = reduction_sum(temp_data_sMksrp5Xb1, partialResult_xrRbDQ9m3V, 24, 0);
			pthread_mutex_unlock(&reduction_lock_sMksrp5Xb1);
		};
		getPool()->at(0).addWork(lambda_reduction_xrRbDQ9m3V);
	}
	int32_t* GPU_Data_sA3ztRkPPU;
	if (rank == 0) {
		auto f_alloc_ExgCjbLLiE = [&] () {
			cuda_alloc_wrapper(&GPU_Data_sA3ztRkPPU, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_ExgCjbLLiE);
	}
	if (rank == 0) {
		auto f_movement_Dac4BN7gGa = [&] () {
			cuda_host2device_wrapper(&GPU_Data_sA3ztRkPPU[0], &initial_p5Bg5zAdt9[100], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_Dac4BN7gGa);
	}
	int32_t* GPU_Data_HCQ1Tqv8qH;
	if (rank == 0) {
		auto f_alloc_SsuH7Wh6DN = [&] () {
			cuda_alloc_wrapper(&GPU_Data_HCQ1Tqv8qH, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_alloc_SsuH7Wh6DN);
	}
	if (rank == 0) {
		auto f_gpu_EZu4NSyRhq = [&] () {
			cuda_wrapper_sum_EZu4NSyRhq(GPU_Data_sA3ztRkPPU, &temp_data_sMksrp5Xb1, reduction_lock_sMksrp5Xb1);
		};
		getGPUPool()->at(1).addWork(f_gpu_EZu4NSyRhq);
	}
	int32_t* GPU_Data_JLPb3TO7vf;
	if (rank == 1) {
		auto f_alloc_3grxL3dr0B = [&] () {
			cuda_alloc_wrapper(&GPU_Data_JLPb3TO7vf, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_3grxL3dr0B);
	}
	if (rank == 1) {
		auto f_movement_Kj4xk8GyCC = [&] () {
			cuda_host2device_wrapper(&GPU_Data_JLPb3TO7vf[0], &initial_p5Bg5zAdt9[150], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_Kj4xk8GyCC);
	}
	int32_t* GPU_Data_8UYMIYpy74;
	if (rank == 1) {
		auto f_alloc_Ba6xB85m4K = [&] () {
			cuda_alloc_wrapper(&GPU_Data_8UYMIYpy74, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_alloc_Ba6xB85m4K);
	}
	if (rank == 1) {
		auto f_gpu_COqcq4aIJy = [&] () {
			cuda_wrapper_sum_COqcq4aIJy(GPU_Data_JLPb3TO7vf, &temp_data_sMksrp5Xb1, reduction_lock_sMksrp5Xb1);
		};
		getGPUPool()->at(1).addWork(f_gpu_COqcq4aIJy);
	}
	if (rank == 1) {
		auto f_dealloc_uXkz5yxyQk = [&] () {
			cuda_dealloc_wrapper(GPU_Data_8UYMIYpy74);
		};
		getGPUPool()->at(1).addWork(f_dealloc_uXkz5yxyQk);
	}
	if (rank == 1) {
		auto f_dealloc_hU6sTGerxk = [&] () {
			cuda_dealloc_wrapper(GPU_Data_JLPb3TO7vf);
		};
		getGPUPool()->at(1).addWork(f_dealloc_hU6sTGerxk);
	}
	if (rank == 0) {
		auto f_dealloc_X8WurM135q = [&] () {
			cuda_dealloc_wrapper(GPU_Data_HCQ1Tqv8qH);
		};
		getGPUPool()->at(1).addWork(f_dealloc_X8WurM135q);
	}
	if (rank == 0) {
		auto f_dealloc_W8FejdmzAc = [&] () {
			cuda_dealloc_wrapper(GPU_Data_sA3ztRkPPU);
		};
		getGPUPool()->at(1).addWork(f_dealloc_W8FejdmzAc);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_YzuuDePTlX = new Bit_Mask(48,true);
		for (size_t i_7W7aSJfbpi = 0; i_7W7aSJfbpi < 24; ++i_7W7aSJfbpi) {
			mask_ptr_YzuuDePTlX->setBarrier(i_7W7aSJfbpi);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_YzuuDePTlX (mask_ptr_YzuuDePTlX);
		self_barrier(boost_mask_ptr_YzuuDePTlX);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_PIEi9hIDia = new Bit_Mask(48,true);
		for (size_t i_e7lhY8fOUs = 0; i_e7lhY8fOUs < 24; ++i_e7lhY8fOUs) {
			mask_ptr_PIEi9hIDia->setBarrier(i_e7lhY8fOUs);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_PIEi9hIDia (mask_ptr_PIEi9hIDia);
		self_barrier(boost_mask_ptr_PIEi9hIDia);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_2r0Eb9FIlf = new Bit_Mask(2,true);
		mask_ptr_2r0Eb9FIlf->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_2r0Eb9FIlf (mask_ptr_2r0Eb9FIlf);
		cuda_sync_device(boost_mask_ptr_2r0Eb9FIlf);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_HHSCtCYTeJ = new Bit_Mask(2,true);
		mask_ptr_HHSCtCYTeJ->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_HHSCtCYTeJ (mask_ptr_HHSCtCYTeJ);
		cuda_sync_device(boost_mask_ptr_HHSCtCYTeJ);
	}
	int32_t MPI_Reduction_Combiner_d0kEfMx3Nk = 0;
	MPI_Reduce(&temp_data_sMksrp5Xb1, &MPI_Reduction_Combiner_d0kEfMx3Nk, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if (rank == 0) {
		result_PCTcyANvaq = MPI_Reduction_Combiner_d0kEfMx3Nk;
	}
	if (rank == 0) {
		if (result_PCTcyANvaq != 200) {
			print("summation not correct! Expected: 200 Actually: ", result_PCTcyANvaq);
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_p5Bg5zAdt9);
	MPI_Finalize();
	return 0;


}

