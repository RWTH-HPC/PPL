/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_8jvxK8OViz;
	int32_t* initial_nUIfy29ORQ;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_nUIfy29ORQ = Init_List(1, initial_nUIfy29ORQ, 200LL * 1LL);
	result_8jvxK8OViz = Init_List(result_8jvxK8OViz, 200LL * 1LL);
	if (rank == 0) {
		MPI_Send(&initial_nUIfy29ORQ[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_nUIfy29ORQ[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		MPI_Send(&initial_nUIfy29ORQ[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_nUIfy29ORQ[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	int32_t* GPU_Data_x28FsUqX3I;
	if (rank == 0) {
		auto f_alloc_5tH5HjTRT5 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_x28FsUqX3I, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_5tH5HjTRT5);
	}
	if (rank == 0) {
		auto f_movement_DyDdj03FrK = [&] () {
			cuda_host2device_wrapper(&GPU_Data_x28FsUqX3I[0], &initial_nUIfy29ORQ[100], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_DyDdj03FrK);
	}
	int32_t* GPU_Data_yf6KctZ7qv;
	if (rank == 0) {
		auto f_alloc_Io7z5vvPQV = [&] () {
			cuda_alloc_wrapper(&GPU_Data_yf6KctZ7qv, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_Io7z5vvPQV);
	}
	int32_t* GPU_Data_f7SnoDgTBo;
	if (rank == 1) {
		auto f_alloc_X1QVqUCshJ = [&] () {
			cuda_alloc_wrapper(&GPU_Data_f7SnoDgTBo, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_X1QVqUCshJ);
	}
	if (rank == 1) {
		auto f_movement_ag7GjWr7Ga = [&] () {
			cuda_host2device_wrapper(&GPU_Data_f7SnoDgTBo[0], &initial_nUIfy29ORQ[150], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_ag7GjWr7Ga);
	}
	int32_t* GPU_Data_4BZAVYhYgy;
	if (rank == 1) {
		auto f_alloc_ryvTF0C5Tz = [&] () {
			cuda_alloc_wrapper(&GPU_Data_4BZAVYhYgy, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_ryvTF0C5Tz);
	}
	for (size_t INDEX0_t2MUMiZdzW = 0; INDEX0_t2MUMiZdzW < 0 + 7; ++INDEX0_t2MUMiZdzW) {
		if (rank == 0) {
			auto f_0_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(0).addWork(f_0_t2MUMiZdzW);
			auto f_1_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(1).addWork(f_1_t2MUMiZdzW);
			auto f_2_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(2).addWork(f_2_t2MUMiZdzW);
			auto f_3_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(3).addWork(f_3_t2MUMiZdzW);
			auto f_4_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(4).addWork(f_4_t2MUMiZdzW);
			auto f_5_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(5).addWork(f_5_t2MUMiZdzW);
			auto f_6_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(6).addWork(f_6_t2MUMiZdzW);
			auto f_7_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(7).addWork(f_7_t2MUMiZdzW);
			auto f_8_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(8).addWork(f_8_t2MUMiZdzW);
			auto f_9_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(9).addWork(f_9_t2MUMiZdzW);
			auto f_10_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(10).addWork(f_10_t2MUMiZdzW);
			auto f_11_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(11).addWork(f_11_t2MUMiZdzW);
			auto f_12_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(12).addWork(f_12_t2MUMiZdzW);
			auto f_13_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(13).addWork(f_13_t2MUMiZdzW);
			auto f_14_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(14).addWork(f_14_t2MUMiZdzW);
			auto f_15_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(15).addWork(f_15_t2MUMiZdzW);
			auto f_16_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(16).addWork(f_16_t2MUMiZdzW);
			auto f_17_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(17).addWork(f_17_t2MUMiZdzW);
			auto f_18_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(18).addWork(f_18_t2MUMiZdzW);
			auto f_19_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(19).addWork(f_19_t2MUMiZdzW);
			auto f_20_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(20).addWork(f_20_t2MUMiZdzW);
			auto f_21_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(21).addWork(f_21_t2MUMiZdzW);
			auto f_22_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(22).addWork(f_22_t2MUMiZdzW);
			auto f_23_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 0; INDEX1_t2MUMiZdzW < 0 + 50; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(23).addWork(f_23_t2MUMiZdzW);
		}
		if (rank == 1) {
			auto f_0_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(0).addWork(f_0_t2MUMiZdzW);
			auto f_1_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(1).addWork(f_1_t2MUMiZdzW);
			auto f_2_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(2).addWork(f_2_t2MUMiZdzW);
			auto f_3_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(3).addWork(f_3_t2MUMiZdzW);
			auto f_4_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(4).addWork(f_4_t2MUMiZdzW);
			auto f_5_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(5).addWork(f_5_t2MUMiZdzW);
			auto f_6_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(6).addWork(f_6_t2MUMiZdzW);
			auto f_7_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(7).addWork(f_7_t2MUMiZdzW);
			auto f_8_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(8).addWork(f_8_t2MUMiZdzW);
			auto f_9_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(9).addWork(f_9_t2MUMiZdzW);
			auto f_10_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(10).addWork(f_10_t2MUMiZdzW);
			auto f_11_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(11).addWork(f_11_t2MUMiZdzW);
			auto f_12_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(12).addWork(f_12_t2MUMiZdzW);
			auto f_13_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(13).addWork(f_13_t2MUMiZdzW);
			auto f_14_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(14).addWork(f_14_t2MUMiZdzW);
			auto f_15_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(15).addWork(f_15_t2MUMiZdzW);
			auto f_16_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(16).addWork(f_16_t2MUMiZdzW);
			auto f_17_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(17).addWork(f_17_t2MUMiZdzW);
			auto f_18_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(18).addWork(f_18_t2MUMiZdzW);
			auto f_19_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(19).addWork(f_19_t2MUMiZdzW);
			auto f_20_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(20).addWork(f_20_t2MUMiZdzW);
			auto f_21_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(21).addWork(f_21_t2MUMiZdzW);
			auto f_22_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 0; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(22).addWork(f_22_t2MUMiZdzW);
			auto f_23_t2MUMiZdzW = [&] () {
				for (size_t INDEX1_t2MUMiZdzW = 50; INDEX1_t2MUMiZdzW < 50 + 50; ++INDEX1_t2MUMiZdzW) {
					result_8jvxK8OViz[(INDEX1_t2MUMiZdzW)] = initial_nUIfy29ORQ[(INDEX1_t2MUMiZdzW)] + 1;
				}
			};
			getPool()->at(23).addWork(f_23_t2MUMiZdzW);
		}
		if (rank == 0) {
			auto f_gpu_tGTQDtaA7M = [&] () mutable {
				cuda_wrapper_incr_tGTQDtaA7M(GPU_Data_x28FsUqX3I, GPU_Data_yf6KctZ7qv, INDEX0_t2MUMiZdzW);
			};
			getGPUPool()->at(1).addWork(f_gpu_tGTQDtaA7M);
		}
		if (rank == 1) {
			auto f_gpu_pfxq6fvbpp = [&] () mutable {
				cuda_wrapper_incr_pfxq6fvbpp(GPU_Data_f7SnoDgTBo, GPU_Data_4BZAVYhYgy, INDEX0_t2MUMiZdzW);
			};
			getGPUPool()->at(1).addWork(f_gpu_pfxq6fvbpp);
		}
		if (rank == 0) {
			auto f_movement_kaFf9KQmZZ = [&] () {
				cuda_device2host_wrapper(&result_8jvxK8OViz[100], &GPU_Data_yf6KctZ7qv[0], sizeof(int32_t) * 50);
			};
			getGPUPool()->at(1).addWork(f_movement_kaFf9KQmZZ);
		}
		if (rank == 1) {
			auto f_movement_kBqoOeA3UI = [&] () {
				cuda_device2host_wrapper(&result_8jvxK8OViz[150], &GPU_Data_4BZAVYhYgy[0], sizeof(int32_t) * 50);
			};
			getGPUPool()->at(1).addWork(f_movement_kBqoOeA3UI);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_Q6TGZau4FS = new Bit_Mask(48,true);
			for (size_t i_LrtgvvedaZ = 0; i_LrtgvvedaZ < 24; ++i_LrtgvvedaZ) {
				mask_ptr_Q6TGZau4FS->setBarrier(i_LrtgvvedaZ);
			}
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_Q6TGZau4FS (mask_ptr_Q6TGZau4FS);
			self_barrier(boost_mask_ptr_Q6TGZau4FS);
		}
		if (rank == 1) {
			Bit_Mask * mask_ptr_VH3N4WNLAL = new Bit_Mask(48,true);
			for (size_t i_Yjg0kcNXHf = 0; i_Yjg0kcNXHf < 24; ++i_Yjg0kcNXHf) {
				mask_ptr_VH3N4WNLAL->setBarrier(i_Yjg0kcNXHf);
			}
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_VH3N4WNLAL (mask_ptr_VH3N4WNLAL);
			self_barrier(boost_mask_ptr_VH3N4WNLAL);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_iS7HMSqh1I = new Bit_Mask(2,true);
			mask_ptr_iS7HMSqh1I->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_iS7HMSqh1I (mask_ptr_iS7HMSqh1I);
			cuda_sync_device(boost_mask_ptr_iS7HMSqh1I);
		}
		if (rank == 1) {
			Bit_Mask * mask_ptr_TarIgQjeyW = new Bit_Mask(2,true);
			mask_ptr_TarIgQjeyW->setBarrier(1);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_TarIgQjeyW (mask_ptr_TarIgQjeyW);
			cuda_sync_device(boost_mask_ptr_TarIgQjeyW);
		}
		if (rank == 0) {
			MPI_Send(&result_8jvxK8OViz[100], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
		} else if (rank == 1) {
			MPI_Recv(&result_8jvxK8OViz[100], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 0) {
			MPI_Send(&result_8jvxK8OViz[100], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
		} else if (rank == 1) {
			MPI_Recv(&result_8jvxK8OViz[100], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 0) {
			MPI_Send(&result_8jvxK8OViz[0], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
		} else if (rank == 1) {
			MPI_Recv(&result_8jvxK8OViz[0], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 0) {
			MPI_Send(&result_8jvxK8OViz[0], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
		} else if (rank == 1) {
			MPI_Recv(&result_8jvxK8OViz[0], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Send(&result_8jvxK8OViz[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
		} else if (rank == 0) {
			MPI_Recv(&result_8jvxK8OViz[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Send(&result_8jvxK8OViz[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
		} else if (rank == 0) {
			MPI_Recv(&result_8jvxK8OViz[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Send(&result_8jvxK8OViz[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
		} else if (rank == 0) {
			MPI_Recv(&result_8jvxK8OViz[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Send(&result_8jvxK8OViz[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
		} else if (rank == 0) {
			MPI_Recv(&result_8jvxK8OViz[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		Set_Partial_Array(initial_nUIfy29ORQ, result_8jvxK8OViz, 200);
		if (rank == 0) {
			auto f_movement_15HEVZhTMa = [&] () {
				cuda_host2device_wrapper(&GPU_Data_x28FsUqX3I[0], &initial_nUIfy29ORQ[100], sizeof(int32_t) * 50);
			};
			getGPUPool()->at(1).addWork(f_movement_15HEVZhTMa);
		}
		if (rank == 1) {
			auto f_movement_0KeMZr9G1j = [&] () {
				cuda_host2device_wrapper(&GPU_Data_f7SnoDgTBo[0], &initial_nUIfy29ORQ[150], sizeof(int32_t) * 50);
			};
			getGPUPool()->at(1).addWork(f_movement_0KeMZr9G1j);
		}
	}
	if (rank == 0) {
		auto f_movement_bS5ChcVdzJ = [&] () {
			cuda_device2host_wrapper(&result_8jvxK8OViz[100], &GPU_Data_yf6KctZ7qv[0], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_bS5ChcVdzJ);
	}
	if (rank == 0) {
		auto f_dealloc_9XmF7M5g8H = [&] () {
			cuda_dealloc_wrapper(GPU_Data_yf6KctZ7qv);
		};
		getGPUPool()->at(1).addWork(f_dealloc_9XmF7M5g8H);
	}
	if (rank == 1) {
		auto f_movement_DcylvEG1Qy = [&] () {
			cuda_device2host_wrapper(&result_8jvxK8OViz[150], &GPU_Data_4BZAVYhYgy[0], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_DcylvEG1Qy);
	}
	if (rank == 1) {
		auto f_dealloc_LRmqYetQFY = [&] () {
			cuda_dealloc_wrapper(GPU_Data_4BZAVYhYgy);
		};
		getGPUPool()->at(1).addWork(f_dealloc_LRmqYetQFY);
	}
	if (rank == 0) {
		auto f_dealloc_Rqux5mNYCH = [&] () {
			cuda_dealloc_wrapper(GPU_Data_x28FsUqX3I);
		};
		getGPUPool()->at(1).addWork(f_dealloc_Rqux5mNYCH);
	}
	if (rank == 1) {
		auto f_dealloc_bmoAzgNbNP = [&] () {
			cuda_dealloc_wrapper(GPU_Data_f7SnoDgTBo);
		};
		getGPUPool()->at(1).addWork(f_dealloc_bmoAzgNbNP);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_mDJ9SqXp15 = new Bit_Mask(48,true);
		for (size_t i_col6V6QuGt = 0; i_col6V6QuGt < 24; ++i_col6V6QuGt) {
			mask_ptr_mDJ9SqXp15->setBarrier(i_col6V6QuGt);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_mDJ9SqXp15 (mask_ptr_mDJ9SqXp15);
		self_barrier(boost_mask_ptr_mDJ9SqXp15);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_T9MHdiVRP7 = new Bit_Mask(48,true);
		for (size_t i_6ETPPnUJ1c = 0; i_6ETPPnUJ1c < 24; ++i_6ETPPnUJ1c) {
			mask_ptr_T9MHdiVRP7->setBarrier(i_6ETPPnUJ1c);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_T9MHdiVRP7 (mask_ptr_T9MHdiVRP7);
		self_barrier(boost_mask_ptr_T9MHdiVRP7);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_HC2SQM8bYq = new Bit_Mask(2,true);
		mask_ptr_HC2SQM8bYq->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_HC2SQM8bYq (mask_ptr_HC2SQM8bYq);
		cuda_sync_device(boost_mask_ptr_HC2SQM8bYq);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_mm03VUlrXy = new Bit_Mask(2,true);
		mask_ptr_mm03VUlrXy->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_mm03VUlrXy (mask_ptr_mm03VUlrXy);
		cuda_sync_device(boost_mask_ptr_mm03VUlrXy);
	}
	if (rank == 1) {
		MPI_Send(&result_8jvxK8OViz[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_8jvxK8OViz[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 1) {
		MPI_Send(&result_8jvxK8OViz[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_8jvxK8OViz[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_8jvxK8OViz[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_8jvxK8OViz);
	std::free(initial_nUIfy29ORQ);
	MPI_Finalize();
	return 0;


}

