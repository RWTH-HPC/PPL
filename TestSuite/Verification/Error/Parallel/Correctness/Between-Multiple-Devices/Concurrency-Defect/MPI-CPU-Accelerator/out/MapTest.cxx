/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapTest.hxx"
#include "includes/cuda_lib_MapTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_uvFP8uZgGK;
	int32_t* result_seq_GW15NTQUNH;
	int32_t* initial_NHnfBBzrpN;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_NHnfBBzrpN = Init_List(1, initial_NHnfBBzrpN, 200LL * 1LL);
	result_uvFP8uZgGK = Init_List(result_uvFP8uZgGK, 200LL * 1LL);
	result_seq_GW15NTQUNH = Init_List(result_seq_GW15NTQUNH, 200LL * 1LL);
	if (rank == 0) {
		MPI_Send(&initial_NHnfBBzrpN[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_NHnfBBzrpN[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		MPI_Send(&initial_NHnfBBzrpN[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD);
	} else if (rank == 1) {
		MPI_Recv(&initial_NHnfBBzrpN[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		auto f_0_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 0; INDEX_yJsKDUGmu6 < 0 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_yJsKDUGmu6);
		auto f_1_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 2; INDEX_yJsKDUGmu6 < 2 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_yJsKDUGmu6);
		auto f_2_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 4; INDEX_yJsKDUGmu6 < 4 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_yJsKDUGmu6);
		auto f_3_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 6; INDEX_yJsKDUGmu6 < 6 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_yJsKDUGmu6);
		auto f_4_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 8; INDEX_yJsKDUGmu6 < 8 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_yJsKDUGmu6);
		auto f_5_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 10; INDEX_yJsKDUGmu6 < 10 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_yJsKDUGmu6);
		auto f_6_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 12; INDEX_yJsKDUGmu6 < 12 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_yJsKDUGmu6);
		auto f_7_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 14; INDEX_yJsKDUGmu6 < 14 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_yJsKDUGmu6);
		auto f_8_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 16; INDEX_yJsKDUGmu6 < 16 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_yJsKDUGmu6);
		auto f_9_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 18; INDEX_yJsKDUGmu6 < 18 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_yJsKDUGmu6);
		auto f_10_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 20; INDEX_yJsKDUGmu6 < 20 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_yJsKDUGmu6);
		auto f_11_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 22; INDEX_yJsKDUGmu6 < 22 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_yJsKDUGmu6);
		auto f_12_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 24; INDEX_yJsKDUGmu6 < 24 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_yJsKDUGmu6);
		auto f_13_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 26; INDEX_yJsKDUGmu6 < 26 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_yJsKDUGmu6);
		auto f_14_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 28; INDEX_yJsKDUGmu6 < 28 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_yJsKDUGmu6);
		auto f_15_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 30; INDEX_yJsKDUGmu6 < 30 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_yJsKDUGmu6);
		auto f_16_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 32; INDEX_yJsKDUGmu6 < 32 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_yJsKDUGmu6);
		auto f_17_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 34; INDEX_yJsKDUGmu6 < 34 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_yJsKDUGmu6);
		auto f_18_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 36; INDEX_yJsKDUGmu6 < 36 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_yJsKDUGmu6);
		auto f_19_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 38; INDEX_yJsKDUGmu6 < 38 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_yJsKDUGmu6);
		auto f_20_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 40; INDEX_yJsKDUGmu6 < 40 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_yJsKDUGmu6);
		auto f_21_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 42; INDEX_yJsKDUGmu6 < 42 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_yJsKDUGmu6);
		auto f_22_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 44; INDEX_yJsKDUGmu6 < 44 + 2; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_yJsKDUGmu6);
		auto f_23_yJsKDUGmu6 = [&] () {
			for (size_t INDEX_yJsKDUGmu6 = 46; INDEX_yJsKDUGmu6 < 46 + 4; ++INDEX_yJsKDUGmu6) {
				result_uvFP8uZgGK[(INDEX_yJsKDUGmu6)] = initial_NHnfBBzrpN[(INDEX_yJsKDUGmu6)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_yJsKDUGmu6);
	}
	if (rank == 1) {
		auto f_0_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 50; INDEX_1LQQGFOoG5 < 50 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_1LQQGFOoG5);
		auto f_1_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 52; INDEX_1LQQGFOoG5 < 52 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_1LQQGFOoG5);
		auto f_2_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 54; INDEX_1LQQGFOoG5 < 54 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_1LQQGFOoG5);
		auto f_3_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 56; INDEX_1LQQGFOoG5 < 56 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_1LQQGFOoG5);
		auto f_4_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 58; INDEX_1LQQGFOoG5 < 58 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_1LQQGFOoG5);
		auto f_5_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 60; INDEX_1LQQGFOoG5 < 60 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_1LQQGFOoG5);
		auto f_6_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 62; INDEX_1LQQGFOoG5 < 62 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_1LQQGFOoG5);
		auto f_7_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 64; INDEX_1LQQGFOoG5 < 64 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_1LQQGFOoG5);
		auto f_8_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 66; INDEX_1LQQGFOoG5 < 66 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_1LQQGFOoG5);
		auto f_9_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 68; INDEX_1LQQGFOoG5 < 68 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_1LQQGFOoG5);
		auto f_10_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 70; INDEX_1LQQGFOoG5 < 70 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_1LQQGFOoG5);
		auto f_11_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 72; INDEX_1LQQGFOoG5 < 72 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_1LQQGFOoG5);
		auto f_12_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 74; INDEX_1LQQGFOoG5 < 74 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_1LQQGFOoG5);
		auto f_13_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 76; INDEX_1LQQGFOoG5 < 76 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_1LQQGFOoG5);
		auto f_14_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 78; INDEX_1LQQGFOoG5 < 78 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_1LQQGFOoG5);
		auto f_15_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 80; INDEX_1LQQGFOoG5 < 80 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_1LQQGFOoG5);
		auto f_16_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 82; INDEX_1LQQGFOoG5 < 82 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_1LQQGFOoG5);
		auto f_17_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 84; INDEX_1LQQGFOoG5 < 84 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_1LQQGFOoG5);
		auto f_18_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 86; INDEX_1LQQGFOoG5 < 86 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_1LQQGFOoG5);
		auto f_19_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 88; INDEX_1LQQGFOoG5 < 88 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_1LQQGFOoG5);
		auto f_20_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 90; INDEX_1LQQGFOoG5 < 90 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_1LQQGFOoG5);
		auto f_21_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 92; INDEX_1LQQGFOoG5 < 92 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_1LQQGFOoG5);
		auto f_22_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 94; INDEX_1LQQGFOoG5 < 94 + 2; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_1LQQGFOoG5);
		auto f_23_1LQQGFOoG5 = [&] () {
			for (size_t INDEX_1LQQGFOoG5 = 96; INDEX_1LQQGFOoG5 < 96 + 4; ++INDEX_1LQQGFOoG5) {
				result_uvFP8uZgGK[(INDEX_1LQQGFOoG5)] = initial_NHnfBBzrpN[(INDEX_1LQQGFOoG5)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_1LQQGFOoG5);
	}
	int32_t* GPU_Data_3zbfD5Oao1;
	if (rank == 0) {
		auto f_alloc_TtECWZfK0W = [&] () {
			cuda_alloc_wrapper(&GPU_Data_3zbfD5Oao1, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_TtECWZfK0W);
	}
	if (rank == 0) {
		auto f_movement_MUIxe5ftMH = [&] () {
			cuda_host2device_wrapper(&GPU_Data_3zbfD5Oao1[0], &initial_NHnfBBzrpN[100], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_MUIxe5ftMH);
	}
	int32_t* GPU_Data_OZyoIiYcvr;
	if (rank == 0) {
		auto f_alloc_MApYD8ctVF = [&] () {
			cuda_alloc_wrapper(&GPU_Data_OZyoIiYcvr, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_MApYD8ctVF);
	}
	if (rank == 0) {
		auto f_gpu_6NO2GWP6jk = [&] () {
			cuda_wrapper_increment_6NO2GWP6jk(GPU_Data_3zbfD5Oao1, GPU_Data_OZyoIiYcvr );
		};
		getGPUPool()->at(1).addWork(f_gpu_6NO2GWP6jk);
	}
	int32_t* GPU_Data_cBFlENmvIZ;
	if (rank == 1) {
		auto f_alloc_hFCgrcznqI = [&] () {
			cuda_alloc_wrapper(&GPU_Data_cBFlENmvIZ, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_hFCgrcznqI);
	}
	if (rank == 1) {
		auto f_movement_fvdcYmuoSd = [&] () {
			cuda_host2device_wrapper(&GPU_Data_cBFlENmvIZ[0], &initial_NHnfBBzrpN[150], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_fvdcYmuoSd);
	}
	int32_t* GPU_Data_eqXrAkSbQP;
	if (rank == 1) {
		auto f_alloc_QjbzD8u0gV = [&] () {
			cuda_alloc_wrapper(&GPU_Data_eqXrAkSbQP, sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_alloc_QjbzD8u0gV);
	}
	if (rank == 1) {
		auto f_gpu_4KvgCV6d9e = [&] () {
			cuda_wrapper_increment_4KvgCV6d9e(GPU_Data_cBFlENmvIZ, GPU_Data_eqXrAkSbQP );
		};
		getGPUPool()->at(1).addWork(f_gpu_4KvgCV6d9e);
	}
	if (rank == 0) {
		auto f_dealloc_a4HWAtjx3e = [&] () {
			cuda_dealloc_wrapper(GPU_Data_3zbfD5Oao1);
		};
		getGPUPool()->at(1).addWork(f_dealloc_a4HWAtjx3e);
	}
	if (rank == 0) {
		auto f_movement_kQUnpnhCCb = [&] () {
			cuda_device2host_wrapper(&result_uvFP8uZgGK[100], &GPU_Data_OZyoIiYcvr[0], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_kQUnpnhCCb);
	}
	if (rank == 0) {
		auto f_dealloc_u6yDVLMeyf = [&] () {
			cuda_dealloc_wrapper(GPU_Data_OZyoIiYcvr);
		};
		getGPUPool()->at(1).addWork(f_dealloc_u6yDVLMeyf);
	}
	if (rank == 1) {
		auto f_movement_clBUe9LGH6 = [&] () {
			cuda_device2host_wrapper(&result_uvFP8uZgGK[150], &GPU_Data_eqXrAkSbQP[0], sizeof(int32_t) * 50);
		};
		getGPUPool()->at(1).addWork(f_movement_clBUe9LGH6);
	}
	if (rank == 1) {
		auto f_dealloc_BZZFlSncD3 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_eqXrAkSbQP);
		};
		getGPUPool()->at(1).addWork(f_dealloc_BZZFlSncD3);
	}
	if (rank == 1) {
		auto f_dealloc_j1BsJACiK4 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_cBFlENmvIZ);
		};
		getGPUPool()->at(1).addWork(f_dealloc_j1BsJACiK4);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_BV8pamBEQD = new Bit_Mask(48,true);
		for (size_t i_bBZEtFYNyQ = 0; i_bBZEtFYNyQ < 24; ++i_bBZEtFYNyQ) {
			mask_ptr_BV8pamBEQD->setBarrier(i_bBZEtFYNyQ);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_BV8pamBEQD (mask_ptr_BV8pamBEQD);
		self_barrier(boost_mask_ptr_BV8pamBEQD);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_USNAHUV1rc = new Bit_Mask(48,true);
		for (size_t i_DaJVxUfmfI = 0; i_DaJVxUfmfI < 24; ++i_DaJVxUfmfI) {
			mask_ptr_USNAHUV1rc->setBarrier(i_DaJVxUfmfI);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_USNAHUV1rc (mask_ptr_USNAHUV1rc);
		self_barrier(boost_mask_ptr_USNAHUV1rc);
	}
	if (rank == 1) {
		Bit_Mask * mask_ptr_mUhoFVB1Zi = new Bit_Mask(2,true);
		mask_ptr_mUhoFVB1Zi->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_mUhoFVB1Zi (mask_ptr_mUhoFVB1Zi);
		cuda_sync_device(boost_mask_ptr_mUhoFVB1Zi);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_s1hqt3nKvm = new Bit_Mask(2,true);
		mask_ptr_s1hqt3nKvm->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_s1hqt3nKvm (mask_ptr_s1hqt3nKvm);
		cuda_sync_device(boost_mask_ptr_s1hqt3nKvm);
	}
	if (rank == 1) {
		MPI_Send(&result_uvFP8uZgGK[50], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_uvFP8uZgGK[50], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 1) {
		MPI_Send(&result_uvFP8uZgGK[150], 50, MPI_INT, 0, 0, MPI_COMM_WORLD);
	} else if (rank == 0) {
		MPI_Recv(&result_uvFP8uZgGK[150], 50, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_GW15NTQUNH[(i)] = initial_NHnfBBzrpN[(i)] + 1;
			if (result_seq_GW15NTQUNH[(i)] != result_uvFP8uZgGK[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_uvFP8uZgGK);
	std::free(result_seq_GW15NTQUNH);
	std::free(initial_NHnfBBzrpN);
	MPI_Finalize();
	return 0;


}

