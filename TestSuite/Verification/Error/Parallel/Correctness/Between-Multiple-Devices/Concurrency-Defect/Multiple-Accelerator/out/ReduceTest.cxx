/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReduceTest.hxx"
#include "includes/cuda_lib_ReduceTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t result_LiIf2JBnYd;
	int32_t* initial_cXL2qc3HGa;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_cXL2qc3HGa = Init_List(1, initial_cXL2qc3HGa, 200LL * 1LL);
	if (rank == 0) {
		result_LiIf2JBnYd = 0;
	}
	int32_t* GPU_Data_DOXsoP9K0Q;
	if (rank == 0) {
		auto f_alloc_6ryu8dtyrY = [&] () {
			cuda_alloc_wrapper(&GPU_Data_DOXsoP9K0Q, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_6ryu8dtyrY);
	}
	if (rank == 0) {
		auto f_movement_DyPaQhrEUA = [&] () {
			cuda_host2device_wrapper(&GPU_Data_DOXsoP9K0Q[0], &initial_cXL2qc3HGa[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_DyPaQhrEUA);
	}
	int32_t* GPU_Data_n0rnK2ca3G;
	if (rank == 0) {
		auto f_alloc_mJt8P8vkzi = [&] () {
			cuda_alloc_wrapper(&GPU_Data_n0rnK2ca3G, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(1).addWork(f_alloc_mJt8P8vkzi);
	}
	pthread_mutex_t reduction_lock_Ph52GK4heF = PTHREAD_MUTEX_INITIALIZER;
	int32_t temp_data_Ph52GK4heF = 0;
	if (rank == 0) {
		auto f_gpu_R1Bgbztek8 = [&] () {
			cuda_wrapper_sum_R1Bgbztek8(GPU_Data_DOXsoP9K0Q, &temp_data_Ph52GK4heF, reduction_lock_Ph52GK4heF);
		};
		getGPUPool()->at(1).addWork(f_gpu_R1Bgbztek8);
	}
	int32_t* GPU_Data_JTxDD4F1F6;
	if (rank == 0) {
		auto f_alloc_cTXRxiHSQm = [&] () {
			cuda_alloc_wrapper(&GPU_Data_JTxDD4F1F6, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_alloc_cTXRxiHSQm);
	}
	if (rank == 0) {
		auto f_movement_8XebzmOjtB = [&] () {
			cuda_host2device_wrapper(&GPU_Data_JTxDD4F1F6[0], &initial_cXL2qc3HGa[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_movement_8XebzmOjtB);
	}
	int32_t* GPU_Data_5jzHSlCf05;
	if (rank == 0) {
		auto f_alloc_Y6RjYFIApm = [&] () {
			cuda_alloc_wrapper(&GPU_Data_5jzHSlCf05, sizeof(int32_t) * 1);
		};
		getGPUPool()->at(0).addWork(f_alloc_Y6RjYFIApm);
	}
	if (rank == 0) {
		auto f_gpu_oarWzvni2b = [&] () {
			cuda_wrapper_sum_oarWzvni2b(GPU_Data_JTxDD4F1F6, &temp_data_Ph52GK4heF, reduction_lock_Ph52GK4heF);
		};
		getGPUPool()->at(0).addWork(f_gpu_oarWzvni2b);
	}
	if (rank == 0) {
		auto f_dealloc_7rVAqT6VKW = [&] () {
			cuda_dealloc_wrapper(GPU_Data_DOXsoP9K0Q);
		};
		getGPUPool()->at(1).addWork(f_dealloc_7rVAqT6VKW);
	}
	if (rank == 0) {
		auto f_dealloc_31oa5KsnMs = [&] () {
			cuda_dealloc_wrapper(GPU_Data_JTxDD4F1F6);
		};
		getGPUPool()->at(0).addWork(f_dealloc_31oa5KsnMs);
	}
	if (rank == 0) {
		auto f_dealloc_E8GTjC09MJ = [&] () {
			cuda_dealloc_wrapper(GPU_Data_n0rnK2ca3G);
		};
		getGPUPool()->at(1).addWork(f_dealloc_E8GTjC09MJ);
	}
	if (rank == 0) {
		auto f_dealloc_F5VzcB6aqp = [&] () {
			cuda_dealloc_wrapper(GPU_Data_5jzHSlCf05);
		};
		getGPUPool()->at(0).addWork(f_dealloc_F5VzcB6aqp);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_lmAr0FTpRF = new Bit_Mask(2,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_lmAr0FTpRF (mask_ptr_lmAr0FTpRF);
		cuda_sync_device(boost_mask_ptr_lmAr0FTpRF);
	}
	result_LiIf2JBnYd = temp_data_Ph52GK4heF;
	if (rank == 0) {
		if (result_LiIf2JBnYd != 200) {
			print("summation not correct!");
			MPI_Abort(MPI_COMM_WORLD, 1);
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_cXL2qc3HGa);
	MPI_Finalize();
	return 0;


}

