/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/DPTest.hxx"
#include "includes/cuda_lib_DPTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_25ndUhg8ZL;
	int32_t* initial_jxAAR4OqHM;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_jxAAR4OqHM = Init_List(1, initial_jxAAR4OqHM, 200LL * 1LL);
	result_25ndUhg8ZL = Init_List(result_25ndUhg8ZL, 200LL * 1LL);
	int32_t* GPU_Data_yq8LRlUrQn;
	if (rank == 0) {
		auto f_alloc_8vYNNRMVgq = [&] () {
			cuda_alloc_wrapper(&GPU_Data_yq8LRlUrQn, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_8vYNNRMVgq);
	}
	if (rank == 0) {
		auto f_movement_Na3LOTxamq = [&] () {
			cuda_host2device_wrapper(&GPU_Data_yq8LRlUrQn[0], &initial_jxAAR4OqHM[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_Na3LOTxamq);
	}
	int32_t* GPU_Data_DRMZZBgY6P;
	if (rank == 0) {
		auto f_alloc_60dAdCCIUf = [&] () {
			cuda_alloc_wrapper(&GPU_Data_DRMZZBgY6P, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_60dAdCCIUf);
	}
	int32_t* GPU_Data_MIA5kXhJas;
	if (rank == 0) {
		auto f_alloc_sSjFsMozmi = [&] () {
			cuda_alloc_wrapper(&GPU_Data_MIA5kXhJas, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_alloc_sSjFsMozmi);
	}
	if (rank == 0) {
		auto f_movement_gRamXhhWtl = [&] () {
			cuda_host2device_wrapper(&GPU_Data_MIA5kXhJas[0], &initial_jxAAR4OqHM[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_movement_gRamXhhWtl);
	}
	int32_t* GPU_Data_MYSqkvuQk1;
	if (rank == 0) {
		auto f_alloc_gUWVeAUqIt = [&] () {
			cuda_alloc_wrapper(&GPU_Data_MYSqkvuQk1, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_alloc_gUWVeAUqIt);
	}
	for (size_t INDEX0_habLccSPNH = 0; INDEX0_habLccSPNH < 0 + 7; ++INDEX0_habLccSPNH) {
		if (rank == 0) {
			auto f_gpu_jCr8Yz9sSg = [&] () mutable {
				cuda_wrapper_incr_jCr8Yz9sSg(GPU_Data_yq8LRlUrQn, GPU_Data_DRMZZBgY6P, INDEX0_habLccSPNH);
			};
			getGPUPool()->at(1).addWork(f_gpu_jCr8Yz9sSg);
		}
		if (rank == 0) {
			auto f_gpu_hVGVGWenmY = [&] () mutable {
				cuda_wrapper_incr_hVGVGWenmY(GPU_Data_MIA5kXhJas, GPU_Data_MYSqkvuQk1, INDEX0_habLccSPNH);
			};
			getGPUPool()->at(0).addWork(f_gpu_hVGVGWenmY);
		}
		if (rank == 0) {
			auto f_movement_IuEBm2oOMo = [&] () {
				cuda_device2host_wrapper(&result_25ndUhg8ZL[0], &GPU_Data_DRMZZBgY6P[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_IuEBm2oOMo);
		}
		if (rank == 0) {
			auto f_movement_prZVSA3U7j = [&] () {
				cuda_device2host_wrapper(&result_25ndUhg8ZL[100], &GPU_Data_MYSqkvuQk1[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(0).addWork(f_movement_prZVSA3U7j);
		}
		if (rank == 0) {
			Bit_Mask * mask_ptr_Vrto5spkxt = new Bit_Mask(2,false);
			boost::shared_ptr<Bit_Mask>boost_mask_ptr_Vrto5spkxt (mask_ptr_Vrto5spkxt);
			cuda_sync_device(boost_mask_ptr_Vrto5spkxt);
		}
		Set_Partial_Array(initial_jxAAR4OqHM, result_25ndUhg8ZL, 200);
		if (rank == 0) {
			auto f_movement_IQ7HhIgH3k = [&] () {
				cuda_host2device_wrapper(&GPU_Data_yq8LRlUrQn[0], &initial_jxAAR4OqHM[0], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(1).addWork(f_movement_IQ7HhIgH3k);
		}
		if (rank == 0) {
			auto f_movement_FzpIKF5Rh5 = [&] () {
				cuda_host2device_wrapper(&GPU_Data_MIA5kXhJas[0], &initial_jxAAR4OqHM[100], sizeof(int32_t) * 100);
			};
			getGPUPool()->at(0).addWork(f_movement_FzpIKF5Rh5);
		}
	}
	if (rank == 0) {
		auto f_dealloc_lFDiUuUco2 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_MIA5kXhJas);
		};
		getGPUPool()->at(0).addWork(f_dealloc_lFDiUuUco2);
	}
	if (rank == 0) {
		auto f_dealloc_AkbACq7eXD = [&] () {
			cuda_dealloc_wrapper(GPU_Data_yq8LRlUrQn);
		};
		getGPUPool()->at(1).addWork(f_dealloc_AkbACq7eXD);
	}
	if (rank == 0) {
		auto f_movement_umoQLyIPIO = [&] () {
			cuda_device2host_wrapper(&result_25ndUhg8ZL[100], &GPU_Data_MYSqkvuQk1[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_movement_umoQLyIPIO);
	}
	if (rank == 0) {
		auto f_dealloc_Vd8j8GPGol = [&] () {
			cuda_dealloc_wrapper(GPU_Data_MYSqkvuQk1);
		};
		getGPUPool()->at(0).addWork(f_dealloc_Vd8j8GPGol);
	}
	if (rank == 0) {
		auto f_movement_Gm7DaU37Cf = [&] () {
			cuda_device2host_wrapper(&result_25ndUhg8ZL[0], &GPU_Data_DRMZZBgY6P[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_Gm7DaU37Cf);
	}
	if (rank == 0) {
		auto f_dealloc_bXagTxGKln = [&] () {
			cuda_dealloc_wrapper(GPU_Data_DRMZZBgY6P);
		};
		getGPUPool()->at(1).addWork(f_dealloc_bXagTxGKln);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_4FK7COAM4j = new Bit_Mask(2,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_4FK7COAM4j (mask_ptr_4FK7COAM4j);
		cuda_sync_device(boost_mask_ptr_4FK7COAM4j);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if ((result_25ndUhg8ZL[(i)] != 8)) {
				print("The result is not correct!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_25ndUhg8ZL);
	std::free(initial_jxAAR4OqHM);
	MPI_Finalize();
	return 0;


}

