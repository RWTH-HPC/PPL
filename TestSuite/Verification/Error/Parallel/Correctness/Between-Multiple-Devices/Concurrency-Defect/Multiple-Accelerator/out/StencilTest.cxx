/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/StencilTest.hxx"
#include "includes/cuda_lib_StencilTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_rib0h3OIeB;
	int32_t* result_seq_o3AxkzVy50;
	int32_t* initial_8C2TzGq3ts;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_8C2TzGq3ts = Init_List(1, initial_8C2TzGq3ts, 200LL * 100LL * 100LL * 1LL);
	result_rib0h3OIeB = Init_List(result_rib0h3OIeB, 200LL * 100LL * 100LL * 1LL);
	result_seq_o3AxkzVy50 = Init_List(result_seq_o3AxkzVy50, 200LL * 100LL * 100LL * 1LL);
	int32_t* GPU_Data_tG8QFvycX5;
	if (rank == 0) {
		auto f_alloc_GOTRneofeG = [&] () {
			cuda_alloc_wrapper(&GPU_Data_tG8QFvycX5, sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_alloc_GOTRneofeG);
	}
	if (rank == 0) {
		auto f_movement_koJNtxLueW = [&] () {
			cuda_host2device_wrapper(&GPU_Data_tG8QFvycX5[0], &initial_8C2TzGq3ts[0], sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(1).addWork(f_movement_koJNtxLueW);
	}
	int32_t* GPU_Data_mmpMCkyAfF;
	if (rank == 0) {
		auto f_alloc_NVbDSLuRyB = [&] () {
			cuda_alloc_wrapper(&GPU_Data_mmpMCkyAfF, sizeof(int32_t) * 1000000);
		};
		getGPUPool()->at(1).addWork(f_alloc_NVbDSLuRyB);
	}
	if (rank == 0) {
		auto f_gpu_71WzNV58Om = [&] () {
			cuda_wrapper_sum_71WzNV58Om(GPU_Data_tG8QFvycX5, GPU_Data_mmpMCkyAfF );
		};
		getGPUPool()->at(1).addWork(f_gpu_71WzNV58Om);
	}
	int32_t* GPU_Data_MogyPZMAyB;
	if (rank == 0) {
		auto f_alloc_XOEuJf8Mzb = [&] () {
			cuda_alloc_wrapper(&GPU_Data_MogyPZMAyB, sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(0).addWork(f_alloc_XOEuJf8Mzb);
	}
	if (rank == 0) {
		auto f_movement_EmoeWAQUr3 = [&] () {
			cuda_host2device_wrapper(&GPU_Data_MogyPZMAyB[0], &initial_8C2TzGq3ts[990000], sizeof(int32_t) * 1010000);
		};
		getGPUPool()->at(0).addWork(f_movement_EmoeWAQUr3);
	}
	int32_t* GPU_Data_fDt388lyjX;
	if (rank == 0) {
		auto f_alloc_MzOcFCOepr = [&] () {
			cuda_alloc_wrapper(&GPU_Data_fDt388lyjX, sizeof(int32_t) * 1000000);
		};
		getGPUPool()->at(0).addWork(f_alloc_MzOcFCOepr);
	}
	if (rank == 0) {
		auto f_gpu_YvRRoy3PBq = [&] () {
			cuda_wrapper_sum_YvRRoy3PBq(GPU_Data_MogyPZMAyB, GPU_Data_fDt388lyjX );
		};
		getGPUPool()->at(0).addWork(f_gpu_YvRRoy3PBq);
	}
	if (rank == 0) {
		auto f_movement_z8j4AGdye8 = [&] () {
			cuda_device2host_wrapper(&result_rib0h3OIeB[10000], &GPU_Data_mmpMCkyAfF[10000], sizeof(int32_t) * 990000);
		};
		getGPUPool()->at(1).addWork(f_movement_z8j4AGdye8);
	}
	if (rank == 0) {
		auto f_dealloc_AVp6Vmk0J7 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_mmpMCkyAfF);
		};
		getGPUPool()->at(1).addWork(f_dealloc_AVp6Vmk0J7);
	}
	if (rank == 0) {
		auto f_movement_hat8TJOBNy = [&] () {
			cuda_device2host_wrapper(&result_rib0h3OIeB[1000000], &GPU_Data_fDt388lyjX[10000], sizeof(int32_t) * 990000);
		};
		getGPUPool()->at(0).addWork(f_movement_hat8TJOBNy);
	}
	if (rank == 0) {
		auto f_dealloc_CE4v0E3Dfa = [&] () {
			cuda_dealloc_wrapper(GPU_Data_fDt388lyjX);
		};
		getGPUPool()->at(0).addWork(f_dealloc_CE4v0E3Dfa);
	}
	if (rank == 0) {
		auto f_dealloc_FxGKin7A4K = [&] () {
			cuda_dealloc_wrapper(GPU_Data_tG8QFvycX5);
		};
		getGPUPool()->at(1).addWork(f_dealloc_FxGKin7A4K);
	}
	if (rank == 0) {
		auto f_dealloc_P5yfhnfP1v = [&] () {
			cuda_dealloc_wrapper(GPU_Data_MogyPZMAyB);
		};
		getGPUPool()->at(0).addWork(f_dealloc_P5yfhnfP1v);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_dZr4NInBNY = new Bit_Mask(2,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_dZr4NInBNY (mask_ptr_dZr4NInBNY);
		cuda_sync_device(boost_mask_ptr_dZr4NInBNY);
	}
	if (rank == 0) {
		for ( int32_t i = 1; i < 199; i++ ) {
			for ( int32_t j = 1; j < 99; j++ ) {
				for ( int32_t k = 1; k < 99; k++ ) {
					result_seq_o3AxkzVy50[100LL * 100LL * (i) + 100LL * (j) + (k)] = initial_8C2TzGq3ts[100LL * 100LL * (i + 1) + 100LL * (j) + (k)] + initial_8C2TzGq3ts[100LL * 100LL * (i) + 100LL * (j + 1) + (k)] + initial_8C2TzGq3ts[100LL * 100LL * (i) + 100LL * (j) + (k + 1)] + initial_8C2TzGq3ts[100LL * 100LL * (i - 1) + 100LL * (j) + (k)] + initial_8C2TzGq3ts[100LL * 100LL * (i) + 100LL * (j - 1) + (k)] + initial_8C2TzGq3ts[100LL * 100LL * (i) + 100LL * (j) + (k - 1)] + initial_8C2TzGq3ts[100LL * 100LL * (i) + 100LL * (j) + (k)];
					if (result_rib0h3OIeB[100LL * 100LL * (i) + 100LL * (j) + (k)] != result_seq_o3AxkzVy50[100LL * 100LL * (i) + 100LL * (j) + (k)]) {
						print("Result at cell (", i, ",", j, ",", k, ") not correct!");
						MPI_Abort(MPI_COMM_WORLD, 1);
					}
				}
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_rib0h3OIeB);
	std::free(result_seq_o3AxkzVy50);
	std::free(initial_8C2TzGq3ts);
	MPI_Finalize();
	return 0;


}

