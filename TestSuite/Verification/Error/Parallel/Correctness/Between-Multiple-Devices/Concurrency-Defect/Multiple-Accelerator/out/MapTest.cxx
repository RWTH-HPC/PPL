/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/MapTest.hxx"
#include "includes/cuda_lib_MapTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_jvmvgdiKj9;
	int32_t* result_seq_LMJcv0JF2P;
	int32_t* initial_VRUERJiOcV;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_VRUERJiOcV = Init_List(1, initial_VRUERJiOcV, 200LL * 1LL);
	result_jvmvgdiKj9 = Init_List(result_jvmvgdiKj9, 200LL * 1LL);
	result_seq_LMJcv0JF2P = Init_List(result_seq_LMJcv0JF2P, 200LL * 1LL);
	int32_t* GPU_Data_dMGWHhntxN;
	if (rank == 0) {
		auto f_alloc_EF7BKVIzlc = [&] () {
			cuda_alloc_wrapper(&GPU_Data_dMGWHhntxN, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_EF7BKVIzlc);
	}
	if (rank == 0) {
		auto f_movement_PraS6EbOVn = [&] () {
			cuda_host2device_wrapper(&GPU_Data_dMGWHhntxN[0], &initial_VRUERJiOcV[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_PraS6EbOVn);
	}
	int32_t* GPU_Data_4o6adWieQW;
	if (rank == 0) {
		auto f_alloc_1yV9oVvkdh = [&] () {
			cuda_alloc_wrapper(&GPU_Data_4o6adWieQW, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_alloc_1yV9oVvkdh);
	}
	if (rank == 0) {
		auto f_gpu_PJDc73oaB9 = [&] () {
			cuda_wrapper_increment_PJDc73oaB9(GPU_Data_dMGWHhntxN, GPU_Data_4o6adWieQW );
		};
		getGPUPool()->at(1).addWork(f_gpu_PJDc73oaB9);
	}
	int32_t* GPU_Data_RbQY9LLPbL;
	if (rank == 0) {
		auto f_alloc_JgZlh1tfWr = [&] () {
			cuda_alloc_wrapper(&GPU_Data_RbQY9LLPbL, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_alloc_JgZlh1tfWr);
	}
	if (rank == 0) {
		auto f_movement_RGi9iDS2af = [&] () {
			cuda_host2device_wrapper(&GPU_Data_RbQY9LLPbL[0], &initial_VRUERJiOcV[100], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_movement_RGi9iDS2af);
	}
	int32_t* GPU_Data_eKp5D0J5ye;
	if (rank == 0) {
		auto f_alloc_Q2o0l2hXxk = [&] () {
			cuda_alloc_wrapper(&GPU_Data_eKp5D0J5ye, sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_alloc_Q2o0l2hXxk);
	}
	if (rank == 0) {
		auto f_gpu_nq9cxVBaee = [&] () {
			cuda_wrapper_increment_nq9cxVBaee(GPU_Data_RbQY9LLPbL, GPU_Data_eKp5D0J5ye );
		};
		getGPUPool()->at(0).addWork(f_gpu_nq9cxVBaee);
	}
	if (rank == 0) {
		auto f_movement_nb2v8q5DPQ = [&] () {
			cuda_device2host_wrapper(&result_jvmvgdiKj9[0], &GPU_Data_4o6adWieQW[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(1).addWork(f_movement_nb2v8q5DPQ);
	}
	if (rank == 0) {
		auto f_dealloc_BVKn5Dt34O = [&] () {
			cuda_dealloc_wrapper(GPU_Data_4o6adWieQW);
		};
		getGPUPool()->at(1).addWork(f_dealloc_BVKn5Dt34O);
	}
	if (rank == 0) {
		auto f_dealloc_47OdjH6C6z = [&] () {
			cuda_dealloc_wrapper(GPU_Data_dMGWHhntxN);
		};
		getGPUPool()->at(1).addWork(f_dealloc_47OdjH6C6z);
	}
	if (rank == 0) {
		auto f_dealloc_gaOD7D9Qs1 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_RbQY9LLPbL);
		};
		getGPUPool()->at(0).addWork(f_dealloc_gaOD7D9Qs1);
	}
	if (rank == 0) {
		auto f_movement_MIVuZAa1Ka = [&] () {
			cuda_device2host_wrapper(&result_jvmvgdiKj9[100], &GPU_Data_eKp5D0J5ye[0], sizeof(int32_t) * 100);
		};
		getGPUPool()->at(0).addWork(f_movement_MIVuZAa1Ka);
	}
	if (rank == 0) {
		auto f_dealloc_mgH93ZAbJ0 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_eKp5D0J5ye);
		};
		getGPUPool()->at(0).addWork(f_dealloc_mgH93ZAbJ0);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_T4JpsaZkz2 = new Bit_Mask(2,false);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_T4JpsaZkz2 (mask_ptr_T4JpsaZkz2);
		cuda_sync_device(boost_mask_ptr_T4JpsaZkz2);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_LMJcv0JF2P[(i)] = initial_VRUERJiOcV[(i)] + 1;
			if (result_seq_LMJcv0JF2P[(i)] != result_jvmvgdiKj9[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_jvmvgdiKj9);
	std::free(result_seq_LMJcv0JF2P);
	std::free(initial_VRUERJiOcV);
	MPI_Finalize();
	return 0;


}

