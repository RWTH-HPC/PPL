/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/FlowPartialOverlap.hxx"
#include "includes/cuda_lib_FlowPartialOverlap.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_WniYen6tvD;
	int32_t* result_seq_8piYdgHdmM;
	int32_t* initial_Yl4Kz2yLlE;
	int32_t* intermediate_CumoX1V98P;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_Yl4Kz2yLlE = Init_List(1, initial_Yl4Kz2yLlE, 200LL * 1LL);
	intermediate_CumoX1V98P = Init_List(0, intermediate_CumoX1V98P, 200LL * 1LL);
	result_WniYen6tvD = Init_List(0, result_WniYen6tvD, 200LL * 1LL);
	result_seq_8piYdgHdmM = Init_List(0, result_seq_8piYdgHdmM, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 0; INDEX_ruhahKCrgv < 0 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_ruhahKCrgv);
		auto f_1_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 4; INDEX_ruhahKCrgv < 4 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_ruhahKCrgv);
		auto f_2_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 8; INDEX_ruhahKCrgv < 8 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_ruhahKCrgv);
		auto f_3_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 12; INDEX_ruhahKCrgv < 12 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_ruhahKCrgv);
		auto f_4_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 16; INDEX_ruhahKCrgv < 16 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_ruhahKCrgv);
		auto f_5_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 20; INDEX_ruhahKCrgv < 20 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_ruhahKCrgv);
		auto f_6_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 24; INDEX_ruhahKCrgv < 24 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_ruhahKCrgv);
		auto f_7_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 28; INDEX_ruhahKCrgv < 28 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_ruhahKCrgv);
		auto f_8_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 32; INDEX_ruhahKCrgv < 32 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_ruhahKCrgv);
		auto f_9_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 36; INDEX_ruhahKCrgv < 36 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_ruhahKCrgv);
		auto f_10_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 40; INDEX_ruhahKCrgv < 40 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_ruhahKCrgv);
		auto f_11_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 44; INDEX_ruhahKCrgv < 44 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_ruhahKCrgv);
		auto f_12_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 48; INDEX_ruhahKCrgv < 48 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_ruhahKCrgv);
		auto f_13_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 52; INDEX_ruhahKCrgv < 52 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_ruhahKCrgv);
		auto f_14_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 56; INDEX_ruhahKCrgv < 56 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_ruhahKCrgv);
		auto f_15_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 60; INDEX_ruhahKCrgv < 60 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_ruhahKCrgv);
		auto f_16_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 64; INDEX_ruhahKCrgv < 64 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_ruhahKCrgv);
		auto f_17_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 68; INDEX_ruhahKCrgv < 68 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_ruhahKCrgv);
		auto f_18_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 72; INDEX_ruhahKCrgv < 72 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_ruhahKCrgv);
		auto f_19_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 76; INDEX_ruhahKCrgv < 76 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_ruhahKCrgv);
		auto f_20_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 80; INDEX_ruhahKCrgv < 80 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_ruhahKCrgv);
		auto f_21_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 84; INDEX_ruhahKCrgv < 84 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_ruhahKCrgv);
		auto f_22_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 88; INDEX_ruhahKCrgv < 88 + 4; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_ruhahKCrgv);
		auto f_23_ruhahKCrgv = [&] () {
			for (size_t INDEX_ruhahKCrgv = 92; INDEX_ruhahKCrgv < 92 + 8; ++INDEX_ruhahKCrgv) {
				intermediate_CumoX1V98P[(2 * INDEX_ruhahKCrgv)] = initial_Yl4Kz2yLlE[(2 * INDEX_ruhahKCrgv)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_ruhahKCrgv);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_qHG5eKNipU = new Bit_Mask(48,true);
		for (size_t i_jyd5ud5nHA = 0; i_jyd5ud5nHA < 24; ++i_jyd5ud5nHA) {
			mask_ptr_qHG5eKNipU->setBarrier(i_jyd5ud5nHA);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_qHG5eKNipU (mask_ptr_qHG5eKNipU);
		self_barrier(boost_mask_ptr_qHG5eKNipU);
	}
	if (rank == 0) {
		auto f_0_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 0; INDEX_2IeNotZfqV < 0 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_2IeNotZfqV);
		auto f_1_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 2; INDEX_2IeNotZfqV < 2 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_2IeNotZfqV);
		auto f_2_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 4; INDEX_2IeNotZfqV < 4 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_2IeNotZfqV);
		auto f_3_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 6; INDEX_2IeNotZfqV < 6 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_2IeNotZfqV);
		auto f_4_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 8; INDEX_2IeNotZfqV < 8 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_2IeNotZfqV);
		auto f_5_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 10; INDEX_2IeNotZfqV < 10 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_2IeNotZfqV);
		auto f_6_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 12; INDEX_2IeNotZfqV < 12 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_2IeNotZfqV);
		auto f_7_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 14; INDEX_2IeNotZfqV < 14 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_2IeNotZfqV);
		auto f_8_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 16; INDEX_2IeNotZfqV < 16 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_2IeNotZfqV);
		auto f_9_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 18; INDEX_2IeNotZfqV < 18 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_2IeNotZfqV);
		auto f_10_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 20; INDEX_2IeNotZfqV < 20 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_2IeNotZfqV);
		auto f_11_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 22; INDEX_2IeNotZfqV < 22 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_2IeNotZfqV);
		auto f_12_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 24; INDEX_2IeNotZfqV < 24 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_2IeNotZfqV);
		auto f_13_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 26; INDEX_2IeNotZfqV < 26 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_2IeNotZfqV);
		auto f_14_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 28; INDEX_2IeNotZfqV < 28 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_2IeNotZfqV);
		auto f_15_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 30; INDEX_2IeNotZfqV < 30 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_2IeNotZfqV);
		auto f_16_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 32; INDEX_2IeNotZfqV < 32 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_2IeNotZfqV);
		auto f_17_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 34; INDEX_2IeNotZfqV < 34 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_2IeNotZfqV);
		auto f_18_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 36; INDEX_2IeNotZfqV < 36 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_2IeNotZfqV);
		auto f_19_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 38; INDEX_2IeNotZfqV < 38 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_2IeNotZfqV);
		auto f_20_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 40; INDEX_2IeNotZfqV < 40 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_2IeNotZfqV);
		auto f_21_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 42; INDEX_2IeNotZfqV < 42 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_2IeNotZfqV);
		auto f_22_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 44; INDEX_2IeNotZfqV < 44 + 2; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_2IeNotZfqV);
		auto f_23_2IeNotZfqV = [&] () {
			for (size_t INDEX_2IeNotZfqV = 46; INDEX_2IeNotZfqV < 46 + 21; ++INDEX_2IeNotZfqV) {
				result_WniYen6tvD[(3 * INDEX_2IeNotZfqV)] = intermediate_CumoX1V98P[(3 * INDEX_2IeNotZfqV)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_2IeNotZfqV);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_hVriB53YBY = new Bit_Mask(48,true);
		for (size_t i_nQeivH3dXa = 0; i_nQeivH3dXa < 24; ++i_nQeivH3dXa) {
			mask_ptr_hVriB53YBY->setBarrier(i_nQeivH3dXa);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_hVriB53YBY (mask_ptr_hVriB53YBY);
		self_barrier(boost_mask_ptr_hVriB53YBY);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if (i % 3 == 0) {
				result_seq_8piYdgHdmM[(i)]++;
				if (i % 2 == 0) {
					result_seq_8piYdgHdmM[(i)] += initial_Yl4Kz2yLlE[(i)] + 1;
				}
			}
			if (result_seq_8piYdgHdmM[(i)] != result_WniYen6tvD[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_WniYen6tvD);
	std::free(result_seq_8piYdgHdmM);
	std::free(initial_Yl4Kz2yLlE);
	std::free(intermediate_CumoX1V98P);
	MPI_Finalize();
	return 0;


}

