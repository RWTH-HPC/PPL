/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ParallelExecution.hxx"
#include "includes/cuda_lib_ParallelExecution.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* initial_gzQRZ96Pu3;
	int32_t* initial2_KbUaXs3W71;
	int32_t* result_seq2_vzU223oNQA;
	int32_t* result_NtB8VNLvRq;
	int32_t* result_seq_cDgbHkvRld;
	int32_t* result2_aa62Cb8a49;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_gzQRZ96Pu3 = Init_List(1, initial_gzQRZ96Pu3, 200LL * 1LL);
	initial2_KbUaXs3W71 = Init_List(1, initial2_KbUaXs3W71, 200LL * 1LL);
	result_NtB8VNLvRq = Init_List(result_NtB8VNLvRq, 200LL * 1LL);
	result2_aa62Cb8a49 = Init_List(result2_aa62Cb8a49, 200LL * 1LL);
	result_seq_cDgbHkvRld = Init_List(result_seq_cDgbHkvRld, 200LL * 1LL);
	result_seq2_vzU223oNQA = Init_List(result_seq2_vzU223oNQA, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 0; INDEX_X93cBgujGt < 0 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_X93cBgujGt);
		auto f_1_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 8; INDEX_X93cBgujGt < 8 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_X93cBgujGt);
		auto f_2_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 16; INDEX_X93cBgujGt < 16 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_X93cBgujGt);
		auto f_3_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 24; INDEX_X93cBgujGt < 24 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_X93cBgujGt);
		auto f_4_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 32; INDEX_X93cBgujGt < 32 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_X93cBgujGt);
		auto f_5_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 40; INDEX_X93cBgujGt < 40 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_X93cBgujGt);
		auto f_6_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 48; INDEX_X93cBgujGt < 48 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_X93cBgujGt);
		auto f_7_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 56; INDEX_X93cBgujGt < 56 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_X93cBgujGt);
		auto f_8_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 64; INDEX_X93cBgujGt < 64 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_X93cBgujGt);
		auto f_9_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 72; INDEX_X93cBgujGt < 72 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_X93cBgujGt);
		auto f_10_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 80; INDEX_X93cBgujGt < 80 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_X93cBgujGt);
		auto f_11_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 88; INDEX_X93cBgujGt < 88 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_X93cBgujGt);
		auto f_12_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 96; INDEX_X93cBgujGt < 96 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_X93cBgujGt);
		auto f_13_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 104; INDEX_X93cBgujGt < 104 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_X93cBgujGt);
		auto f_14_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 112; INDEX_X93cBgujGt < 112 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_X93cBgujGt);
		auto f_15_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 120; INDEX_X93cBgujGt < 120 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_X93cBgujGt);
		auto f_16_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 128; INDEX_X93cBgujGt < 128 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_X93cBgujGt);
		auto f_17_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 136; INDEX_X93cBgujGt < 136 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_X93cBgujGt);
		auto f_18_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 144; INDEX_X93cBgujGt < 144 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_X93cBgujGt);
		auto f_19_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 152; INDEX_X93cBgujGt < 152 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_X93cBgujGt);
		auto f_20_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 160; INDEX_X93cBgujGt < 160 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_X93cBgujGt);
		auto f_21_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 168; INDEX_X93cBgujGt < 168 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_X93cBgujGt);
		auto f_22_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 176; INDEX_X93cBgujGt < 176 + 8; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_X93cBgujGt);
		auto f_23_X93cBgujGt = [&] () {
			for (size_t INDEX_X93cBgujGt = 184; INDEX_X93cBgujGt < 184 + 16; ++INDEX_X93cBgujGt) {
				result_NtB8VNLvRq[(INDEX_X93cBgujGt)] = initial_gzQRZ96Pu3[(INDEX_X93cBgujGt)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_X93cBgujGt);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_uPuj7YXCvC = new Bit_Mask(48,true);
		for (size_t i_im0hB2CGeT = 0; i_im0hB2CGeT < 24; ++i_im0hB2CGeT) {
			mask_ptr_uPuj7YXCvC->setBarrier(i_im0hB2CGeT);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_uPuj7YXCvC (mask_ptr_uPuj7YXCvC);
		self_barrier(boost_mask_ptr_uPuj7YXCvC);
	}
	if (rank == 0) {
		auto f_0_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 0; INDEX_iHc3CbRRFO < 0 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_iHc3CbRRFO);
		auto f_1_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 8; INDEX_iHc3CbRRFO < 8 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_iHc3CbRRFO);
		auto f_2_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 16; INDEX_iHc3CbRRFO < 16 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_iHc3CbRRFO);
		auto f_3_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 24; INDEX_iHc3CbRRFO < 24 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_iHc3CbRRFO);
		auto f_4_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 32; INDEX_iHc3CbRRFO < 32 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_iHc3CbRRFO);
		auto f_5_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 40; INDEX_iHc3CbRRFO < 40 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_iHc3CbRRFO);
		auto f_6_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 48; INDEX_iHc3CbRRFO < 48 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_iHc3CbRRFO);
		auto f_7_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 56; INDEX_iHc3CbRRFO < 56 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_iHc3CbRRFO);
		auto f_8_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 64; INDEX_iHc3CbRRFO < 64 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_iHc3CbRRFO);
		auto f_9_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 72; INDEX_iHc3CbRRFO < 72 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_iHc3CbRRFO);
		auto f_10_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 80; INDEX_iHc3CbRRFO < 80 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_iHc3CbRRFO);
		auto f_11_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 88; INDEX_iHc3CbRRFO < 88 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_iHc3CbRRFO);
		auto f_12_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 96; INDEX_iHc3CbRRFO < 96 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_iHc3CbRRFO);
		auto f_13_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 104; INDEX_iHc3CbRRFO < 104 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_iHc3CbRRFO);
		auto f_14_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 112; INDEX_iHc3CbRRFO < 112 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_iHc3CbRRFO);
		auto f_15_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 120; INDEX_iHc3CbRRFO < 120 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_iHc3CbRRFO);
		auto f_16_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 128; INDEX_iHc3CbRRFO < 128 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_iHc3CbRRFO);
		auto f_17_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 136; INDEX_iHc3CbRRFO < 136 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_iHc3CbRRFO);
		auto f_18_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 144; INDEX_iHc3CbRRFO < 144 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_iHc3CbRRFO);
		auto f_19_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 152; INDEX_iHc3CbRRFO < 152 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_iHc3CbRRFO);
		auto f_20_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 160; INDEX_iHc3CbRRFO < 160 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_iHc3CbRRFO);
		auto f_21_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 168; INDEX_iHc3CbRRFO < 168 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_iHc3CbRRFO);
		auto f_22_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 176; INDEX_iHc3CbRRFO < 176 + 8; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_iHc3CbRRFO);
		auto f_23_iHc3CbRRFO = [&] () {
			for (size_t INDEX_iHc3CbRRFO = 184; INDEX_iHc3CbRRFO < 184 + 16; ++INDEX_iHc3CbRRFO) {
				result2_aa62Cb8a49[(INDEX_iHc3CbRRFO)] = initial2_KbUaXs3W71[(INDEX_iHc3CbRRFO)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_iHc3CbRRFO);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_ljJKunUGRb = new Bit_Mask(48,true);
		for (size_t i_1jmcMPIVfq = 0; i_1jmcMPIVfq < 24; ++i_1jmcMPIVfq) {
			mask_ptr_ljJKunUGRb->setBarrier(i_1jmcMPIVfq);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_ljJKunUGRb (mask_ptr_ljJKunUGRb);
		self_barrier(boost_mask_ptr_ljJKunUGRb);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_cDgbHkvRld[(i)] = initial_gzQRZ96Pu3[(i)] + 1;
			result_seq2_vzU223oNQA[(i)] = initial_gzQRZ96Pu3[(i)] + 1;
			if (result_seq_cDgbHkvRld[(i)] != result_NtB8VNLvRq[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
			if (result_seq2_vzU223oNQA[(i)] != result2_aa62Cb8a49[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(initial_gzQRZ96Pu3);
	std::free(initial2_KbUaXs3W71);
	std::free(result_seq2_vzU223oNQA);
	std::free(result_NtB8VNLvRq);
	std::free(result_seq_cDgbHkvRld);
	std::free(result2_aa62Cb8a49);
	MPI_Finalize();
	return 0;


}

