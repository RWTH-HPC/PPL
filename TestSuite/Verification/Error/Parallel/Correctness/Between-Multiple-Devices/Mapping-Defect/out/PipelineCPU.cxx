/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/PipelineCPU.hxx"
#include "includes/cuda_lib_PipelineCPU.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_fmcbFeYQSn;
	int32_t* result_seq_hi5ynKbaPU;
	int32_t* initial_z713S2FmGa;
	int32_t* intermediate_fsyKipRimy;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_z713S2FmGa = Init_List(1, initial_z713S2FmGa, 200LL * 1LL);
	intermediate_fsyKipRimy = Init_List(intermediate_fsyKipRimy, 200LL * 1LL);
	result_fmcbFeYQSn = Init_List(result_fmcbFeYQSn, 200LL * 1LL);
	result_seq_hi5ynKbaPU = Init_List(result_seq_hi5ynKbaPU, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 0; INDEX_MAWRvR7er4 < 0 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_MAWRvR7er4);
		auto f_1_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 8; INDEX_MAWRvR7er4 < 8 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_MAWRvR7er4);
		auto f_2_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 16; INDEX_MAWRvR7er4 < 16 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_MAWRvR7er4);
		auto f_3_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 24; INDEX_MAWRvR7er4 < 24 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_MAWRvR7er4);
		auto f_4_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 32; INDEX_MAWRvR7er4 < 32 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_MAWRvR7er4);
		auto f_5_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 40; INDEX_MAWRvR7er4 < 40 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_MAWRvR7er4);
		auto f_6_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 48; INDEX_MAWRvR7er4 < 48 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_MAWRvR7er4);
		auto f_7_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 56; INDEX_MAWRvR7er4 < 56 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_MAWRvR7er4);
		auto f_8_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 64; INDEX_MAWRvR7er4 < 64 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_MAWRvR7er4);
		auto f_9_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 72; INDEX_MAWRvR7er4 < 72 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_MAWRvR7er4);
		auto f_10_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 80; INDEX_MAWRvR7er4 < 80 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_MAWRvR7er4);
		auto f_11_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 88; INDEX_MAWRvR7er4 < 88 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_MAWRvR7er4);
		auto f_12_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 96; INDEX_MAWRvR7er4 < 96 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_MAWRvR7er4);
		auto f_13_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 104; INDEX_MAWRvR7er4 < 104 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_MAWRvR7er4);
		auto f_14_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 112; INDEX_MAWRvR7er4 < 112 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_MAWRvR7er4);
		auto f_15_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 120; INDEX_MAWRvR7er4 < 120 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_MAWRvR7er4);
		auto f_16_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 128; INDEX_MAWRvR7er4 < 128 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_MAWRvR7er4);
		auto f_17_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 136; INDEX_MAWRvR7er4 < 136 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_MAWRvR7er4);
		auto f_18_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 144; INDEX_MAWRvR7er4 < 144 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_MAWRvR7er4);
		auto f_19_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 152; INDEX_MAWRvR7er4 < 152 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_MAWRvR7er4);
		auto f_20_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 160; INDEX_MAWRvR7er4 < 160 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_MAWRvR7er4);
		auto f_21_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 168; INDEX_MAWRvR7er4 < 168 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_MAWRvR7er4);
		auto f_22_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 176; INDEX_MAWRvR7er4 < 176 + 8; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_MAWRvR7er4);
		auto f_23_MAWRvR7er4 = [&] () {
			for (size_t INDEX_MAWRvR7er4 = 184; INDEX_MAWRvR7er4 < 184 + 16; ++INDEX_MAWRvR7er4) {
				intermediate_fsyKipRimy[(INDEX_MAWRvR7er4)] = initial_z713S2FmGa[(INDEX_MAWRvR7er4)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_MAWRvR7er4);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_iCxvmkHIKq = new Bit_Mask(48,true);
		for (size_t i_GQThPyGMdR = 0; i_GQThPyGMdR < 24; ++i_GQThPyGMdR) {
			mask_ptr_iCxvmkHIKq->setBarrier(i_GQThPyGMdR);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_iCxvmkHIKq (mask_ptr_iCxvmkHIKq);
		self_barrier(boost_mask_ptr_iCxvmkHIKq);
	}
	if (rank == 0) {
		auto f_0_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 0; INDEX_nXfXScSHcR < 0 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_nXfXScSHcR);
		auto f_1_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 8; INDEX_nXfXScSHcR < 8 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_nXfXScSHcR);
		auto f_2_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 16; INDEX_nXfXScSHcR < 16 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_nXfXScSHcR);
		auto f_3_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 24; INDEX_nXfXScSHcR < 24 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_nXfXScSHcR);
		auto f_4_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 32; INDEX_nXfXScSHcR < 32 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_nXfXScSHcR);
		auto f_5_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 40; INDEX_nXfXScSHcR < 40 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_nXfXScSHcR);
		auto f_6_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 48; INDEX_nXfXScSHcR < 48 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_nXfXScSHcR);
		auto f_7_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 56; INDEX_nXfXScSHcR < 56 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_nXfXScSHcR);
		auto f_8_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 64; INDEX_nXfXScSHcR < 64 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_nXfXScSHcR);
		auto f_9_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 72; INDEX_nXfXScSHcR < 72 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_nXfXScSHcR);
		auto f_10_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 80; INDEX_nXfXScSHcR < 80 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_nXfXScSHcR);
		auto f_11_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 88; INDEX_nXfXScSHcR < 88 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_nXfXScSHcR);
		auto f_12_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 96; INDEX_nXfXScSHcR < 96 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_nXfXScSHcR);
		auto f_13_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 104; INDEX_nXfXScSHcR < 104 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_nXfXScSHcR);
		auto f_14_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 112; INDEX_nXfXScSHcR < 112 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_nXfXScSHcR);
		auto f_15_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 120; INDEX_nXfXScSHcR < 120 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_nXfXScSHcR);
		auto f_16_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 128; INDEX_nXfXScSHcR < 128 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_nXfXScSHcR);
		auto f_17_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 136; INDEX_nXfXScSHcR < 136 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_nXfXScSHcR);
		auto f_18_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 144; INDEX_nXfXScSHcR < 144 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_nXfXScSHcR);
		auto f_19_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 152; INDEX_nXfXScSHcR < 152 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_nXfXScSHcR);
		auto f_20_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 160; INDEX_nXfXScSHcR < 160 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_nXfXScSHcR);
		auto f_21_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 168; INDEX_nXfXScSHcR < 168 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_nXfXScSHcR);
		auto f_22_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 176; INDEX_nXfXScSHcR < 176 + 8; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_nXfXScSHcR);
		auto f_23_nXfXScSHcR = [&] () {
			for (size_t INDEX_nXfXScSHcR = 184; INDEX_nXfXScSHcR < 184 + 16; ++INDEX_nXfXScSHcR) {
				result_fmcbFeYQSn[(INDEX_nXfXScSHcR)] = intermediate_fsyKipRimy[(INDEX_nXfXScSHcR)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_nXfXScSHcR);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_FDADTT5avE = new Bit_Mask(48,true);
		for (size_t i_O8OagJumne = 0; i_O8OagJumne < 24; ++i_O8OagJumne) {
			mask_ptr_FDADTT5avE->setBarrier(i_O8OagJumne);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_FDADTT5avE (mask_ptr_FDADTT5avE);
		self_barrier(boost_mask_ptr_FDADTT5avE);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_hi5ynKbaPU[(i)] = initial_z713S2FmGa[(i)] + 2;
			if (result_seq_hi5ynKbaPU[(i)] != result_fmcbFeYQSn[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_fmcbFeYQSn);
	std::free(result_seq_hi5ynKbaPU);
	std::free(initial_z713S2FmGa);
	std::free(intermediate_fsyKipRimy);
	MPI_Finalize();
	return 0;


}

