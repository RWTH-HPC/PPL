/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/WritePartialOverlap.hxx"
#include "includes/cuda_lib_WritePartialOverlap.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_EfFVae5slu;
	int32_t* result_seq_0MVP11bYR1;
	int32_t* initial_RhRQfDY5FF;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_RhRQfDY5FF = Init_List(1, initial_RhRQfDY5FF, 200LL * 1LL);
	result_EfFVae5slu = Init_List(result_EfFVae5slu, 200LL * 1LL);
	result_seq_0MVP11bYR1 = Init_List(result_seq_0MVP11bYR1, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 0; INDEX_nobXHqJxFq < 0 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_nobXHqJxFq);
		auto f_1_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 4; INDEX_nobXHqJxFq < 4 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_nobXHqJxFq);
		auto f_2_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 8; INDEX_nobXHqJxFq < 8 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_nobXHqJxFq);
		auto f_3_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 12; INDEX_nobXHqJxFq < 12 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_nobXHqJxFq);
		auto f_4_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 16; INDEX_nobXHqJxFq < 16 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_nobXHqJxFq);
		auto f_5_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 20; INDEX_nobXHqJxFq < 20 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_nobXHqJxFq);
		auto f_6_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 24; INDEX_nobXHqJxFq < 24 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_nobXHqJxFq);
		auto f_7_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 28; INDEX_nobXHqJxFq < 28 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_nobXHqJxFq);
		auto f_8_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 32; INDEX_nobXHqJxFq < 32 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_nobXHqJxFq);
		auto f_9_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 36; INDEX_nobXHqJxFq < 36 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_nobXHqJxFq);
		auto f_10_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 40; INDEX_nobXHqJxFq < 40 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_nobXHqJxFq);
		auto f_11_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 44; INDEX_nobXHqJxFq < 44 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_nobXHqJxFq);
		auto f_12_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 48; INDEX_nobXHqJxFq < 48 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_nobXHqJxFq);
		auto f_13_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 52; INDEX_nobXHqJxFq < 52 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_nobXHqJxFq);
		auto f_14_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 56; INDEX_nobXHqJxFq < 56 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_nobXHqJxFq);
		auto f_15_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 60; INDEX_nobXHqJxFq < 60 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_nobXHqJxFq);
		auto f_16_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 64; INDEX_nobXHqJxFq < 64 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_nobXHqJxFq);
		auto f_17_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 68; INDEX_nobXHqJxFq < 68 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_nobXHqJxFq);
		auto f_18_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 72; INDEX_nobXHqJxFq < 72 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_nobXHqJxFq);
		auto f_19_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 76; INDEX_nobXHqJxFq < 76 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_nobXHqJxFq);
		auto f_20_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 80; INDEX_nobXHqJxFq < 80 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_nobXHqJxFq);
		auto f_21_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 84; INDEX_nobXHqJxFq < 84 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_nobXHqJxFq);
		auto f_22_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 88; INDEX_nobXHqJxFq < 88 + 4; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_nobXHqJxFq);
		auto f_23_nobXHqJxFq = [&] () {
			for (size_t INDEX_nobXHqJxFq = 92; INDEX_nobXHqJxFq < 92 + 8; ++INDEX_nobXHqJxFq) {
				result_EfFVae5slu[(2 * INDEX_nobXHqJxFq)] = initial_RhRQfDY5FF[(2 * INDEX_nobXHqJxFq)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_nobXHqJxFq);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_2BJmvd1VaN = new Bit_Mask(48,true);
		for (size_t i_ALGkmtTRnV = 0; i_ALGkmtTRnV < 24; ++i_ALGkmtTRnV) {
			mask_ptr_2BJmvd1VaN->setBarrier(i_ALGkmtTRnV);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_2BJmvd1VaN (mask_ptr_2BJmvd1VaN);
		self_barrier(boost_mask_ptr_2BJmvd1VaN);
	}
	if (rank == 0) {
		auto f_0_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 0; INDEX_x3z0UbeNbE < 0 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_x3z0UbeNbE);
		auto f_1_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 2; INDEX_x3z0UbeNbE < 2 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_x3z0UbeNbE);
		auto f_2_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 4; INDEX_x3z0UbeNbE < 4 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_x3z0UbeNbE);
		auto f_3_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 6; INDEX_x3z0UbeNbE < 6 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_x3z0UbeNbE);
		auto f_4_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 8; INDEX_x3z0UbeNbE < 8 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_x3z0UbeNbE);
		auto f_5_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 10; INDEX_x3z0UbeNbE < 10 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_x3z0UbeNbE);
		auto f_6_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 12; INDEX_x3z0UbeNbE < 12 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_x3z0UbeNbE);
		auto f_7_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 14; INDEX_x3z0UbeNbE < 14 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_x3z0UbeNbE);
		auto f_8_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 16; INDEX_x3z0UbeNbE < 16 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_x3z0UbeNbE);
		auto f_9_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 18; INDEX_x3z0UbeNbE < 18 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_x3z0UbeNbE);
		auto f_10_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 20; INDEX_x3z0UbeNbE < 20 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_x3z0UbeNbE);
		auto f_11_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 22; INDEX_x3z0UbeNbE < 22 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_x3z0UbeNbE);
		auto f_12_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 24; INDEX_x3z0UbeNbE < 24 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_x3z0UbeNbE);
		auto f_13_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 26; INDEX_x3z0UbeNbE < 26 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_x3z0UbeNbE);
		auto f_14_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 28; INDEX_x3z0UbeNbE < 28 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_x3z0UbeNbE);
		auto f_15_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 30; INDEX_x3z0UbeNbE < 30 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_x3z0UbeNbE);
		auto f_16_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 32; INDEX_x3z0UbeNbE < 32 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_x3z0UbeNbE);
		auto f_17_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 34; INDEX_x3z0UbeNbE < 34 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_x3z0UbeNbE);
		auto f_18_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 36; INDEX_x3z0UbeNbE < 36 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_x3z0UbeNbE);
		auto f_19_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 38; INDEX_x3z0UbeNbE < 38 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_x3z0UbeNbE);
		auto f_20_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 40; INDEX_x3z0UbeNbE < 40 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_x3z0UbeNbE);
		auto f_21_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 42; INDEX_x3z0UbeNbE < 42 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_x3z0UbeNbE);
		auto f_22_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 44; INDEX_x3z0UbeNbE < 44 + 2; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_x3z0UbeNbE);
		auto f_23_x3z0UbeNbE = [&] () {
			for (size_t INDEX_x3z0UbeNbE = 46; INDEX_x3z0UbeNbE < 46 + 21; ++INDEX_x3z0UbeNbE) {
				result_EfFVae5slu[(3 * INDEX_x3z0UbeNbE)] = initial_RhRQfDY5FF[(3 * INDEX_x3z0UbeNbE)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_x3z0UbeNbE);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_gOG9gLCVss = new Bit_Mask(48,true);
		for (size_t i_odcylRC197 = 0; i_odcylRC197 < 24; ++i_odcylRC197) {
			mask_ptr_gOG9gLCVss->setBarrier(i_odcylRC197);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_gOG9gLCVss (mask_ptr_gOG9gLCVss);
		self_barrier(boost_mask_ptr_gOG9gLCVss);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			if (i % 2 == 0) {
				result_seq_0MVP11bYR1[(i)] = initial_RhRQfDY5FF[(i)] + 1;
			} else 			if (i % 3 == 0) {
				result_seq_0MVP11bYR1[(i)] = initial_RhRQfDY5FF[(i)] + 1;
			}
			if (result_seq_0MVP11bYR1[(i)] != result_EfFVae5slu[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_EfFVae5slu);
	std::free(result_seq_0MVP11bYR1);
	std::free(initial_RhRQfDY5FF);
	MPI_Finalize();
	return 0;


}

