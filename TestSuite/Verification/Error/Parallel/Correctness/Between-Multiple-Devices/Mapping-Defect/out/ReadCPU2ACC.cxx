/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ReadCPU2ACC.hxx"
#include "includes/cuda_lib_ReadCPU2ACC.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_8D0IqABlbo;
	int32_t* result_seq_pnARIaXXF9;
	int32_t* initial_Assa9vjb42;
	int32_t* intermediate_qsvFdY37mP;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_Assa9vjb42 = Init_List(1, initial_Assa9vjb42, 200LL * 1LL);
	intermediate_qsvFdY37mP = Init_List(intermediate_qsvFdY37mP, 200LL * 1LL);
	result_8D0IqABlbo = Init_List(result_8D0IqABlbo, 200LL * 1LL);
	result_seq_pnARIaXXF9 = Init_List(result_seq_pnARIaXXF9, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 0; INDEX_ssd55x5nqy < 0 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_ssd55x5nqy);
		auto f_1_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 8; INDEX_ssd55x5nqy < 8 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_ssd55x5nqy);
		auto f_2_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 16; INDEX_ssd55x5nqy < 16 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_ssd55x5nqy);
		auto f_3_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 24; INDEX_ssd55x5nqy < 24 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_ssd55x5nqy);
		auto f_4_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 32; INDEX_ssd55x5nqy < 32 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_ssd55x5nqy);
		auto f_5_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 40; INDEX_ssd55x5nqy < 40 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_ssd55x5nqy);
		auto f_6_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 48; INDEX_ssd55x5nqy < 48 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_ssd55x5nqy);
		auto f_7_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 56; INDEX_ssd55x5nqy < 56 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_ssd55x5nqy);
		auto f_8_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 64; INDEX_ssd55x5nqy < 64 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_ssd55x5nqy);
		auto f_9_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 72; INDEX_ssd55x5nqy < 72 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_ssd55x5nqy);
		auto f_10_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 80; INDEX_ssd55x5nqy < 80 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_ssd55x5nqy);
		auto f_11_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 88; INDEX_ssd55x5nqy < 88 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_ssd55x5nqy);
		auto f_12_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 96; INDEX_ssd55x5nqy < 96 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_ssd55x5nqy);
		auto f_13_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 104; INDEX_ssd55x5nqy < 104 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_ssd55x5nqy);
		auto f_14_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 112; INDEX_ssd55x5nqy < 112 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_ssd55x5nqy);
		auto f_15_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 120; INDEX_ssd55x5nqy < 120 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_ssd55x5nqy);
		auto f_16_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 128; INDEX_ssd55x5nqy < 128 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_ssd55x5nqy);
		auto f_17_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 136; INDEX_ssd55x5nqy < 136 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_ssd55x5nqy);
		auto f_18_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 144; INDEX_ssd55x5nqy < 144 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_ssd55x5nqy);
		auto f_19_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 152; INDEX_ssd55x5nqy < 152 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_ssd55x5nqy);
		auto f_20_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 160; INDEX_ssd55x5nqy < 160 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_ssd55x5nqy);
		auto f_21_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 168; INDEX_ssd55x5nqy < 168 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_ssd55x5nqy);
		auto f_22_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 176; INDEX_ssd55x5nqy < 176 + 8; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_ssd55x5nqy);
		auto f_23_ssd55x5nqy = [&] () {
			for (size_t INDEX_ssd55x5nqy = 184; INDEX_ssd55x5nqy < 184 + 16; ++INDEX_ssd55x5nqy) {
				intermediate_qsvFdY37mP[(INDEX_ssd55x5nqy)] = initial_Assa9vjb42[(INDEX_ssd55x5nqy)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_ssd55x5nqy);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_LQ7dnfATTd = new Bit_Mask(48,true);
		for (size_t i_XAqeyYAg5C = 0; i_XAqeyYAg5C < 24; ++i_XAqeyYAg5C) {
			mask_ptr_LQ7dnfATTd->setBarrier(i_XAqeyYAg5C);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_LQ7dnfATTd (mask_ptr_LQ7dnfATTd);
		self_barrier(boost_mask_ptr_LQ7dnfATTd);
	}
	int32_t* GPU_Data_NS08vTJDPK;
	if (rank == 0) {
		auto f_alloc_QUKzMDeLWd = [&] () {
			cuda_alloc_wrapper(&GPU_Data_NS08vTJDPK, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_QUKzMDeLWd);
	}
	if (rank == 0) {
		auto f_movement_8Ol4e1p1ua = [&] () {
			cuda_host2device_wrapper(&GPU_Data_NS08vTJDPK[0], &initial_Assa9vjb42[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_8Ol4e1p1ua);
	}
	int32_t* GPU_Data_n4LAA6PGZp;
	if (rank == 0) {
		auto f_alloc_M4PWzrPUzK = [&] () {
			cuda_alloc_wrapper(&GPU_Data_n4LAA6PGZp, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_M4PWzrPUzK);
	}
	if (rank == 0) {
		auto f_gpu_pqMP2YoX9q = [&] () {
			cuda_wrapper_increment_pqMP2YoX9q(GPU_Data_NS08vTJDPK, GPU_Data_n4LAA6PGZp );
		};
		getGPUPool()->at(1).addWork(f_gpu_pqMP2YoX9q);
	}
	if (rank == 0) {
		auto f_movement_4xu5D4K3Nh = [&] () {
			cuda_device2host_wrapper(&result_8D0IqABlbo[0], &GPU_Data_n4LAA6PGZp[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_4xu5D4K3Nh);
	}
	if (rank == 0) {
		auto f_dealloc_PTNSJGttTD = [&] () {
			cuda_dealloc_wrapper(GPU_Data_n4LAA6PGZp);
		};
		getGPUPool()->at(1).addWork(f_dealloc_PTNSJGttTD);
	}
	if (rank == 0) {
		auto f_dealloc_ZCf2aDdLl7 = [&] () {
			cuda_dealloc_wrapper(GPU_Data_NS08vTJDPK);
		};
		getGPUPool()->at(1).addWork(f_dealloc_ZCf2aDdLl7);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_JeW5ah7tAB = new Bit_Mask(2,true);
		mask_ptr_JeW5ah7tAB->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_JeW5ah7tAB (mask_ptr_JeW5ah7tAB);
		cuda_sync_device(boost_mask_ptr_JeW5ah7tAB);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_pnARIaXXF9[(i)] = initial_Assa9vjb42[(i)] + 1;
			if ((result_seq_pnARIaXXF9[(i)] != result_8D0IqABlbo[(i)]) && (result_8D0IqABlbo[(i)] == intermediate_qsvFdY37mP[(i)])) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_8D0IqABlbo);
	std::free(result_seq_pnARIaXXF9);
	std::free(initial_Assa9vjb42);
	std::free(intermediate_qsvFdY37mP);
	MPI_Finalize();
	return 0;


}

