/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ACC2SEQ2ACC.hxx"
#include "includes/cuda_lib_ACC2SEQ2ACC.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_VJcCRyR3D8;
	int32_t* result_seq_AFA5z18Nsk;
	int32_t* initial_8GPdo0d1W0;
	int32_t* intermediate_rKNPOUzEou;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_8GPdo0d1W0 = Init_List(1, initial_8GPdo0d1W0, 200LL * 1LL);
	intermediate_rKNPOUzEou = Init_List(intermediate_rKNPOUzEou, 200LL * 1LL);
	result_VJcCRyR3D8 = Init_List(result_VJcCRyR3D8, 200LL * 1LL);
	result_seq_AFA5z18Nsk = Init_List(result_seq_AFA5z18Nsk, 200LL * 1LL);
	int32_t* GPU_Data_l1qkmreUEg;
	if (rank == 0) {
		auto f_alloc_Iu8c0LpY8j = [&] () {
			cuda_alloc_wrapper(&GPU_Data_l1qkmreUEg, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_Iu8c0LpY8j);
	}
	if (rank == 0) {
		auto f_movement_kZfTNIFhhA = [&] () {
			cuda_host2device_wrapper(&GPU_Data_l1qkmreUEg[0], &initial_8GPdo0d1W0[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_kZfTNIFhhA);
	}
	int32_t* GPU_Data_DPVOI2NSWf;
	if (rank == 0) {
		auto f_alloc_RA1EyO37f9 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_DPVOI2NSWf, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_RA1EyO37f9);
	}
	if (rank == 0) {
		auto f_gpu_W2KH8AD4Ma = [&] () {
			cuda_wrapper_increment_W2KH8AD4Ma(GPU_Data_l1qkmreUEg, GPU_Data_DPVOI2NSWf );
		};
		getGPUPool()->at(1).addWork(f_gpu_W2KH8AD4Ma);
	}
	if (rank == 0) {
		auto f_movement_QTUE2lXTIV = [&] () {
			cuda_device2host_wrapper(&intermediate_rKNPOUzEou[0], &GPU_Data_DPVOI2NSWf[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_QTUE2lXTIV);
	}
	if (rank == 0) {
		auto f_dealloc_prH6GvTOvm = [&] () {
			cuda_dealloc_wrapper(GPU_Data_DPVOI2NSWf);
		};
		getGPUPool()->at(1).addWork(f_dealloc_prH6GvTOvm);
	}
	if (rank == 0) {
		auto f_dealloc_HjOJc32OOh = [&] () {
			cuda_dealloc_wrapper(GPU_Data_l1qkmreUEg);
		};
		getGPUPool()->at(1).addWork(f_dealloc_HjOJc32OOh);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_7CdWoeUpuT = new Bit_Mask(2,true);
		mask_ptr_7CdWoeUpuT->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_7CdWoeUpuT (mask_ptr_7CdWoeUpuT);
		cuda_sync_device(boost_mask_ptr_7CdWoeUpuT);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			intermediate_rKNPOUzEou[(i)]++;
		}
	}
	int32_t* GPU_Data_51xQtctTKc;
	if (rank == 0) {
		auto f_alloc_kdPxf4lWPR = [&] () {
			cuda_alloc_wrapper(&GPU_Data_51xQtctTKc, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_kdPxf4lWPR);
	}
	if (rank == 0) {
		auto f_movement_bvy0cbVAap = [&] () {
			cuda_host2device_wrapper(&GPU_Data_51xQtctTKc[0], &intermediate_rKNPOUzEou[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_bvy0cbVAap);
	}
	int32_t* GPU_Data_QERVAkOUsj;
	if (rank == 0) {
		auto f_alloc_Nvv5Uk496W = [&] () {
			cuda_alloc_wrapper(&GPU_Data_QERVAkOUsj, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_Nvv5Uk496W);
	}
	if (rank == 0) {
		auto f_gpu_2COEAgXFgU = [&] () {
			cuda_wrapper_increment_2COEAgXFgU(GPU_Data_51xQtctTKc, GPU_Data_QERVAkOUsj );
		};
		getGPUPool()->at(1).addWork(f_gpu_2COEAgXFgU);
	}
	if (rank == 0) {
		auto f_movement_XYjAMAOTO9 = [&] () {
			cuda_device2host_wrapper(&result_VJcCRyR3D8[0], &GPU_Data_QERVAkOUsj[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_XYjAMAOTO9);
	}
	if (rank == 0) {
		auto f_dealloc_9KNxJtCF7H = [&] () {
			cuda_dealloc_wrapper(GPU_Data_QERVAkOUsj);
		};
		getGPUPool()->at(1).addWork(f_dealloc_9KNxJtCF7H);
	}
	if (rank == 0) {
		auto f_dealloc_jcg4JmWo7I = [&] () {
			cuda_dealloc_wrapper(GPU_Data_51xQtctTKc);
		};
		getGPUPool()->at(1).addWork(f_dealloc_jcg4JmWo7I);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_hsYKljxLvU = new Bit_Mask(2,true);
		mask_ptr_hsYKljxLvU->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_hsYKljxLvU (mask_ptr_hsYKljxLvU);
		cuda_sync_device(boost_mask_ptr_hsYKljxLvU);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_AFA5z18Nsk[(i)] = initial_8GPdo0d1W0[(i)] + 3;
			if (result_seq_AFA5z18Nsk[(i)] != result_VJcCRyR3D8[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_VJcCRyR3D8);
	std::free(result_seq_AFA5z18Nsk);
	std::free(initial_8GPdo0d1W0);
	std::free(intermediate_rKNPOUzEou);
	MPI_Finalize();
	return 0;


}

