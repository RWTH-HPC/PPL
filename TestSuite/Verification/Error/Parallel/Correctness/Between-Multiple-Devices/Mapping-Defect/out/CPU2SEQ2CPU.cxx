/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/CPU2SEQ2CPU.hxx"
#include "includes/cuda_lib_CPU2SEQ2CPU.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_F3ETbgQ0Hv;
	int32_t* result_seq_ESS4BLP305;
	int32_t* initial_Tmefn7jJlT;
	int32_t* intermediate_ABSMDaQRUn;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_Tmefn7jJlT = Init_List(1, initial_Tmefn7jJlT, 200LL * 1LL);
	intermediate_ABSMDaQRUn = Init_List(intermediate_ABSMDaQRUn, 200LL * 1LL);
	result_F3ETbgQ0Hv = Init_List(result_F3ETbgQ0Hv, 200LL * 1LL);
	result_seq_ESS4BLP305 = Init_List(result_seq_ESS4BLP305, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 0; INDEX_aqzItnaKa5 < 0 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_aqzItnaKa5);
		auto f_1_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 8; INDEX_aqzItnaKa5 < 8 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_aqzItnaKa5);
		auto f_2_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 16; INDEX_aqzItnaKa5 < 16 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_aqzItnaKa5);
		auto f_3_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 24; INDEX_aqzItnaKa5 < 24 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_aqzItnaKa5);
		auto f_4_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 32; INDEX_aqzItnaKa5 < 32 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_aqzItnaKa5);
		auto f_5_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 40; INDEX_aqzItnaKa5 < 40 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_aqzItnaKa5);
		auto f_6_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 48; INDEX_aqzItnaKa5 < 48 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_aqzItnaKa5);
		auto f_7_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 56; INDEX_aqzItnaKa5 < 56 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_aqzItnaKa5);
		auto f_8_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 64; INDEX_aqzItnaKa5 < 64 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_aqzItnaKa5);
		auto f_9_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 72; INDEX_aqzItnaKa5 < 72 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_aqzItnaKa5);
		auto f_10_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 80; INDEX_aqzItnaKa5 < 80 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_aqzItnaKa5);
		auto f_11_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 88; INDEX_aqzItnaKa5 < 88 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_aqzItnaKa5);
		auto f_12_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 96; INDEX_aqzItnaKa5 < 96 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_aqzItnaKa5);
		auto f_13_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 104; INDEX_aqzItnaKa5 < 104 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_aqzItnaKa5);
		auto f_14_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 112; INDEX_aqzItnaKa5 < 112 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_aqzItnaKa5);
		auto f_15_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 120; INDEX_aqzItnaKa5 < 120 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_aqzItnaKa5);
		auto f_16_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 128; INDEX_aqzItnaKa5 < 128 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_aqzItnaKa5);
		auto f_17_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 136; INDEX_aqzItnaKa5 < 136 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_aqzItnaKa5);
		auto f_18_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 144; INDEX_aqzItnaKa5 < 144 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_aqzItnaKa5);
		auto f_19_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 152; INDEX_aqzItnaKa5 < 152 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_aqzItnaKa5);
		auto f_20_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 160; INDEX_aqzItnaKa5 < 160 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_aqzItnaKa5);
		auto f_21_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 168; INDEX_aqzItnaKa5 < 168 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_aqzItnaKa5);
		auto f_22_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 176; INDEX_aqzItnaKa5 < 176 + 8; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_aqzItnaKa5);
		auto f_23_aqzItnaKa5 = [&] () {
			for (size_t INDEX_aqzItnaKa5 = 184; INDEX_aqzItnaKa5 < 184 + 16; ++INDEX_aqzItnaKa5) {
				intermediate_ABSMDaQRUn[(INDEX_aqzItnaKa5)] = initial_Tmefn7jJlT[(INDEX_aqzItnaKa5)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_aqzItnaKa5);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_zpfh7SKZTX = new Bit_Mask(48,true);
		for (size_t i_B9XqK8k99e = 0; i_B9XqK8k99e < 24; ++i_B9XqK8k99e) {
			mask_ptr_zpfh7SKZTX->setBarrier(i_B9XqK8k99e);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_zpfh7SKZTX (mask_ptr_zpfh7SKZTX);
		self_barrier(boost_mask_ptr_zpfh7SKZTX);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			intermediate_ABSMDaQRUn[(i)]++;
		}
	}
	if (rank == 0) {
		auto f_0_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 0; INDEX_0iq1JxSDca < 0 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_0iq1JxSDca);
		auto f_1_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 8; INDEX_0iq1JxSDca < 8 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_0iq1JxSDca);
		auto f_2_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 16; INDEX_0iq1JxSDca < 16 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_0iq1JxSDca);
		auto f_3_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 24; INDEX_0iq1JxSDca < 24 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_0iq1JxSDca);
		auto f_4_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 32; INDEX_0iq1JxSDca < 32 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_0iq1JxSDca);
		auto f_5_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 40; INDEX_0iq1JxSDca < 40 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_0iq1JxSDca);
		auto f_6_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 48; INDEX_0iq1JxSDca < 48 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_0iq1JxSDca);
		auto f_7_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 56; INDEX_0iq1JxSDca < 56 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_0iq1JxSDca);
		auto f_8_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 64; INDEX_0iq1JxSDca < 64 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_0iq1JxSDca);
		auto f_9_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 72; INDEX_0iq1JxSDca < 72 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_0iq1JxSDca);
		auto f_10_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 80; INDEX_0iq1JxSDca < 80 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_0iq1JxSDca);
		auto f_11_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 88; INDEX_0iq1JxSDca < 88 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_0iq1JxSDca);
		auto f_12_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 96; INDEX_0iq1JxSDca < 96 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_0iq1JxSDca);
		auto f_13_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 104; INDEX_0iq1JxSDca < 104 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_0iq1JxSDca);
		auto f_14_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 112; INDEX_0iq1JxSDca < 112 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_0iq1JxSDca);
		auto f_15_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 120; INDEX_0iq1JxSDca < 120 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_0iq1JxSDca);
		auto f_16_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 128; INDEX_0iq1JxSDca < 128 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_0iq1JxSDca);
		auto f_17_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 136; INDEX_0iq1JxSDca < 136 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_0iq1JxSDca);
		auto f_18_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 144; INDEX_0iq1JxSDca < 144 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_0iq1JxSDca);
		auto f_19_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 152; INDEX_0iq1JxSDca < 152 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_0iq1JxSDca);
		auto f_20_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 160; INDEX_0iq1JxSDca < 160 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_0iq1JxSDca);
		auto f_21_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 168; INDEX_0iq1JxSDca < 168 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_0iq1JxSDca);
		auto f_22_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 176; INDEX_0iq1JxSDca < 176 + 8; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_0iq1JxSDca);
		auto f_23_0iq1JxSDca = [&] () {
			for (size_t INDEX_0iq1JxSDca = 184; INDEX_0iq1JxSDca < 184 + 16; ++INDEX_0iq1JxSDca) {
				result_F3ETbgQ0Hv[(INDEX_0iq1JxSDca)] = intermediate_ABSMDaQRUn[(INDEX_0iq1JxSDca)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_0iq1JxSDca);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_hzVT06oki8 = new Bit_Mask(48,true);
		for (size_t i_BTU0ZqeXi2 = 0; i_BTU0ZqeXi2 < 24; ++i_BTU0ZqeXi2) {
			mask_ptr_hzVT06oki8->setBarrier(i_BTU0ZqeXi2);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_hzVT06oki8 (mask_ptr_hzVT06oki8);
		self_barrier(boost_mask_ptr_hzVT06oki8);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_ESS4BLP305[(i)] = initial_Tmefn7jJlT[(i)] + 3;
			if (result_seq_ESS4BLP305[(i)] != result_F3ETbgQ0Hv[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_F3ETbgQ0Hv);
	std::free(result_seq_ESS4BLP305);
	std::free(initial_Tmefn7jJlT);
	std::free(intermediate_ABSMDaQRUn);
	MPI_Finalize();
	return 0;


}

