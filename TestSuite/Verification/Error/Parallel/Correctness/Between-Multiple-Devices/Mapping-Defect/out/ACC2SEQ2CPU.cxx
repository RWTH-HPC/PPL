/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ACC2SEQ2CPU.hxx"
#include "includes/cuda_lib_ACC2SEQ2CPU.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_cQiax3vnqu;
	int32_t* result_seq_D3sV0idrKO;
	int32_t* initial_KsBnEc0LWd;
	int32_t* intermediate_R0hHU019IF;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_KsBnEc0LWd = Init_List(1, initial_KsBnEc0LWd, 200LL * 1LL);
	intermediate_R0hHU019IF = Init_List(intermediate_R0hHU019IF, 200LL * 1LL);
	result_cQiax3vnqu = Init_List(result_cQiax3vnqu, 200LL * 1LL);
	result_seq_D3sV0idrKO = Init_List(result_seq_D3sV0idrKO, 200LL * 1LL);
	int32_t* GPU_Data_erS0EDCYEq;
	if (rank == 0) {
		auto f_alloc_xXWFuIni8b = [&] () {
			cuda_alloc_wrapper(&GPU_Data_erS0EDCYEq, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_xXWFuIni8b);
	}
	if (rank == 0) {
		auto f_movement_njrWMefqPE = [&] () {
			cuda_host2device_wrapper(&GPU_Data_erS0EDCYEq[0], &initial_KsBnEc0LWd[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_njrWMefqPE);
	}
	int32_t* GPU_Data_auC2E9Jtdf;
	if (rank == 0) {
		auto f_alloc_oYhN2EZuFO = [&] () {
			cuda_alloc_wrapper(&GPU_Data_auC2E9Jtdf, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_oYhN2EZuFO);
	}
	if (rank == 0) {
		auto f_gpu_l4eRRHe9xh = [&] () {
			cuda_wrapper_increment_l4eRRHe9xh(GPU_Data_erS0EDCYEq, GPU_Data_auC2E9Jtdf );
		};
		getGPUPool()->at(1).addWork(f_gpu_l4eRRHe9xh);
	}
	if (rank == 0) {
		auto f_dealloc_xAtgBOTmqT = [&] () {
			cuda_dealloc_wrapper(GPU_Data_erS0EDCYEq);
		};
		getGPUPool()->at(1).addWork(f_dealloc_xAtgBOTmqT);
	}
	if (rank == 0) {
		auto f_movement_Q13HL09AAI = [&] () {
			cuda_device2host_wrapper(&intermediate_R0hHU019IF[0], &GPU_Data_auC2E9Jtdf[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_Q13HL09AAI);
	}
	if (rank == 0) {
		auto f_dealloc_dHvvDrEXVW = [&] () {
			cuda_dealloc_wrapper(GPU_Data_auC2E9Jtdf);
		};
		getGPUPool()->at(1).addWork(f_dealloc_dHvvDrEXVW);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_zDzF1UNOVx = new Bit_Mask(2,true);
		mask_ptr_zDzF1UNOVx->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_zDzF1UNOVx (mask_ptr_zDzF1UNOVx);
		cuda_sync_device(boost_mask_ptr_zDzF1UNOVx);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			intermediate_R0hHU019IF[(i)]++;
		}
	}
	if (rank == 0) {
		auto f_0_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 0; INDEX_sI3g1k4Ryg < 0 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_sI3g1k4Ryg);
		auto f_1_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 8; INDEX_sI3g1k4Ryg < 8 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_sI3g1k4Ryg);
		auto f_2_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 16; INDEX_sI3g1k4Ryg < 16 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_sI3g1k4Ryg);
		auto f_3_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 24; INDEX_sI3g1k4Ryg < 24 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_sI3g1k4Ryg);
		auto f_4_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 32; INDEX_sI3g1k4Ryg < 32 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_sI3g1k4Ryg);
		auto f_5_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 40; INDEX_sI3g1k4Ryg < 40 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_sI3g1k4Ryg);
		auto f_6_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 48; INDEX_sI3g1k4Ryg < 48 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_sI3g1k4Ryg);
		auto f_7_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 56; INDEX_sI3g1k4Ryg < 56 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_sI3g1k4Ryg);
		auto f_8_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 64; INDEX_sI3g1k4Ryg < 64 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_sI3g1k4Ryg);
		auto f_9_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 72; INDEX_sI3g1k4Ryg < 72 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_sI3g1k4Ryg);
		auto f_10_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 80; INDEX_sI3g1k4Ryg < 80 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_sI3g1k4Ryg);
		auto f_11_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 88; INDEX_sI3g1k4Ryg < 88 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_sI3g1k4Ryg);
		auto f_12_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 96; INDEX_sI3g1k4Ryg < 96 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_sI3g1k4Ryg);
		auto f_13_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 104; INDEX_sI3g1k4Ryg < 104 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_sI3g1k4Ryg);
		auto f_14_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 112; INDEX_sI3g1k4Ryg < 112 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_sI3g1k4Ryg);
		auto f_15_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 120; INDEX_sI3g1k4Ryg < 120 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_sI3g1k4Ryg);
		auto f_16_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 128; INDEX_sI3g1k4Ryg < 128 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_sI3g1k4Ryg);
		auto f_17_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 136; INDEX_sI3g1k4Ryg < 136 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_sI3g1k4Ryg);
		auto f_18_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 144; INDEX_sI3g1k4Ryg < 144 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_sI3g1k4Ryg);
		auto f_19_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 152; INDEX_sI3g1k4Ryg < 152 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_sI3g1k4Ryg);
		auto f_20_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 160; INDEX_sI3g1k4Ryg < 160 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_sI3g1k4Ryg);
		auto f_21_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 168; INDEX_sI3g1k4Ryg < 168 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_sI3g1k4Ryg);
		auto f_22_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 176; INDEX_sI3g1k4Ryg < 176 + 8; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_sI3g1k4Ryg);
		auto f_23_sI3g1k4Ryg = [&] () {
			for (size_t INDEX_sI3g1k4Ryg = 184; INDEX_sI3g1k4Ryg < 184 + 16; ++INDEX_sI3g1k4Ryg) {
				result_cQiax3vnqu[(INDEX_sI3g1k4Ryg)] = intermediate_R0hHU019IF[(INDEX_sI3g1k4Ryg)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_sI3g1k4Ryg);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_b2cuPXy87l = new Bit_Mask(48,true);
		for (size_t i_gqu7oaxOSW = 0; i_gqu7oaxOSW < 24; ++i_gqu7oaxOSW) {
			mask_ptr_b2cuPXy87l->setBarrier(i_gqu7oaxOSW);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_b2cuPXy87l (mask_ptr_b2cuPXy87l);
		self_barrier(boost_mask_ptr_b2cuPXy87l);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_D3sV0idrKO[(i)] = initial_KsBnEc0LWd[(i)] + 3;
			if (result_seq_D3sV0idrKO[(i)] != result_cQiax3vnqu[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_cQiax3vnqu);
	std::free(result_seq_D3sV0idrKO);
	std::free(initial_KsBnEc0LWd);
	std::free(intermediate_R0hHU019IF);
	MPI_Finalize();
	return 0;


}

