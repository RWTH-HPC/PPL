/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/PipelineACC.hxx"
#include "includes/cuda_lib_PipelineACC.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_ZMrKKHa9pD;
	int32_t* result_seq_pxgQi1PUx9;
	int32_t* initial_Pfe9Oio93E;
	int32_t* intermediate_ZFsDXzWPC8;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_Pfe9Oio93E = Init_List(1, initial_Pfe9Oio93E, 200LL * 1LL);
	intermediate_ZFsDXzWPC8 = Init_List(intermediate_ZFsDXzWPC8, 200LL * 1LL);
	result_ZMrKKHa9pD = Init_List(result_ZMrKKHa9pD, 200LL * 1LL);
	result_seq_pxgQi1PUx9 = Init_List(result_seq_pxgQi1PUx9, 200LL * 1LL);
	int32_t* GPU_Data_3XM1JHN2fE;
	if (rank == 0) {
		auto f_alloc_PJtorGgzvf = [&] () {
			cuda_alloc_wrapper(&GPU_Data_3XM1JHN2fE, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_PJtorGgzvf);
	}
	if (rank == 0) {
		auto f_movement_gbuGd6jJ0g = [&] () {
			cuda_host2device_wrapper(&GPU_Data_3XM1JHN2fE[0], &initial_Pfe9Oio93E[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_gbuGd6jJ0g);
	}
	int32_t* GPU_Data_2B6g23LAyS;
	if (rank == 0) {
		auto f_alloc_bhRLLfW2xW = [&] () {
			cuda_alloc_wrapper(&GPU_Data_2B6g23LAyS, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_bhRLLfW2xW);
	}
	if (rank == 0) {
		auto f_gpu_2XlMsn6B8K = [&] () {
			cuda_wrapper_increment_2XlMsn6B8K(GPU_Data_3XM1JHN2fE, GPU_Data_2B6g23LAyS );
		};
		getGPUPool()->at(1).addWork(f_gpu_2XlMsn6B8K);
	}
	if (rank == 0) {
		auto f_movement_NRC1GU2hgp = [&] () {
			cuda_device2host_wrapper(&intermediate_ZFsDXzWPC8[0], &GPU_Data_2B6g23LAyS[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_NRC1GU2hgp);
	}
	if (rank == 0) {
		auto f_dealloc_tunpCkKBRX = [&] () {
			cuda_dealloc_wrapper(GPU_Data_3XM1JHN2fE);
		};
		getGPUPool()->at(1).addWork(f_dealloc_tunpCkKBRX);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_4BsrV4kbar = new Bit_Mask(2,true);
		mask_ptr_4BsrV4kbar->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_4BsrV4kbar (mask_ptr_4BsrV4kbar);
		cuda_sync_device(boost_mask_ptr_4BsrV4kbar);
	}
	int32_t* GPU_Data_QQoKztIEQ5;
	if (rank == 0) {
		auto f_alloc_eTakJbIUig = [&] () {
			cuda_alloc_wrapper(&GPU_Data_QQoKztIEQ5, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_eTakJbIUig);
	}
	if (rank == 0) {
		auto f_gpu_xxGyRu4JSm = [&] () {
			cuda_wrapper_increment_xxGyRu4JSm(GPU_Data_2B6g23LAyS, GPU_Data_QQoKztIEQ5 );
		};
		getGPUPool()->at(1).addWork(f_gpu_xxGyRu4JSm);
	}
	if (rank == 0) {
		auto f_movement_IjLP7ZvH03 = [&] () {
			cuda_device2host_wrapper(&result_ZMrKKHa9pD[0], &GPU_Data_QQoKztIEQ5[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_IjLP7ZvH03);
	}
	if (rank == 0) {
		auto f_dealloc_BVEI20Mqoo = [&] () {
			cuda_dealloc_wrapper(GPU_Data_QQoKztIEQ5);
		};
		getGPUPool()->at(1).addWork(f_dealloc_BVEI20Mqoo);
	}
	if (rank == 0) {
		auto f_movement_bP438jA5EU = [&] () {
			cuda_device2host_wrapper(&intermediate_ZFsDXzWPC8[0], &GPU_Data_2B6g23LAyS[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_bP438jA5EU);
	}
	if (rank == 0) {
		auto f_dealloc_f6zsEGQMLz = [&] () {
			cuda_dealloc_wrapper(GPU_Data_2B6g23LAyS);
		};
		getGPUPool()->at(1).addWork(f_dealloc_f6zsEGQMLz);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_u7pakIRbJ6 = new Bit_Mask(2,true);
		mask_ptr_u7pakIRbJ6->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_u7pakIRbJ6 (mask_ptr_u7pakIRbJ6);
		cuda_sync_device(boost_mask_ptr_u7pakIRbJ6);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_pxgQi1PUx9[(i)] = initial_Pfe9Oio93E[(i)] + 2;
			if (result_seq_pxgQi1PUx9[(i)] != result_ZMrKKHa9pD[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_ZMrKKHa9pD);
	std::free(result_seq_pxgQi1PUx9);
	std::free(initial_Pfe9Oio93E);
	std::free(intermediate_ZFsDXzWPC8);
	MPI_Finalize();
	return 0;


}

