/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/FlowACC2CPU.hxx"
#include "includes/cuda_lib_FlowACC2CPU.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_0srz1BM588;
	int32_t* result_seq_tkLjV4FGzh;
	int32_t* initial_p2nXoGUtlC;
	int32_t* intermediate_j8keT4oZLx;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_p2nXoGUtlC = Init_List(1, initial_p2nXoGUtlC, 200LL * 1LL);
	intermediate_j8keT4oZLx = Init_List(intermediate_j8keT4oZLx, 200LL * 1LL);
	result_0srz1BM588 = Init_List(result_0srz1BM588, 200LL * 1LL);
	result_seq_tkLjV4FGzh = Init_List(result_seq_tkLjV4FGzh, 200LL * 1LL);
	int32_t* GPU_Data_HCAC5ZJtLC;
	if (rank == 0) {
		auto f_alloc_oIAVhGtTPf = [&] () {
			cuda_alloc_wrapper(&GPU_Data_HCAC5ZJtLC, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_oIAVhGtTPf);
	}
	if (rank == 0) {
		auto f_movement_LhUtVvnht5 = [&] () {
			cuda_host2device_wrapper(&GPU_Data_HCAC5ZJtLC[0], &initial_p2nXoGUtlC[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_LhUtVvnht5);
	}
	int32_t* GPU_Data_RKFlrb4ldG;
	if (rank == 0) {
		auto f_alloc_BNINqiDz5Q = [&] () {
			cuda_alloc_wrapper(&GPU_Data_RKFlrb4ldG, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_BNINqiDz5Q);
	}
	if (rank == 0) {
		auto f_gpu_dFN25kCeJ7 = [&] () {
			cuda_wrapper_increment_dFN25kCeJ7(GPU_Data_HCAC5ZJtLC, GPU_Data_RKFlrb4ldG );
		};
		getGPUPool()->at(1).addWork(f_gpu_dFN25kCeJ7);
	}
	if (rank == 0) {
		auto f_dealloc_Vci88Sv6vq = [&] () {
			cuda_dealloc_wrapper(GPU_Data_HCAC5ZJtLC);
		};
		getGPUPool()->at(1).addWork(f_dealloc_Vci88Sv6vq);
	}
	if (rank == 0) {
		auto f_movement_zO5mSv7Q8j = [&] () {
			cuda_device2host_wrapper(&intermediate_j8keT4oZLx[0], &GPU_Data_RKFlrb4ldG[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_zO5mSv7Q8j);
	}
	if (rank == 0) {
		auto f_dealloc_L4AaQvbJfv = [&] () {
			cuda_dealloc_wrapper(GPU_Data_RKFlrb4ldG);
		};
		getGPUPool()->at(1).addWork(f_dealloc_L4AaQvbJfv);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_N1uQXHT25V = new Bit_Mask(2,true);
		mask_ptr_N1uQXHT25V->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_N1uQXHT25V (mask_ptr_N1uQXHT25V);
		cuda_sync_device(boost_mask_ptr_N1uQXHT25V);
	}
	if (rank == 0) {
		auto f_0_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 0; INDEX_NtMEbH5tfi < 0 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_NtMEbH5tfi);
		auto f_1_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 8; INDEX_NtMEbH5tfi < 8 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_NtMEbH5tfi);
		auto f_2_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 16; INDEX_NtMEbH5tfi < 16 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_NtMEbH5tfi);
		auto f_3_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 24; INDEX_NtMEbH5tfi < 24 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_NtMEbH5tfi);
		auto f_4_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 32; INDEX_NtMEbH5tfi < 32 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_NtMEbH5tfi);
		auto f_5_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 40; INDEX_NtMEbH5tfi < 40 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_NtMEbH5tfi);
		auto f_6_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 48; INDEX_NtMEbH5tfi < 48 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_NtMEbH5tfi);
		auto f_7_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 56; INDEX_NtMEbH5tfi < 56 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_NtMEbH5tfi);
		auto f_8_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 64; INDEX_NtMEbH5tfi < 64 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_NtMEbH5tfi);
		auto f_9_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 72; INDEX_NtMEbH5tfi < 72 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_NtMEbH5tfi);
		auto f_10_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 80; INDEX_NtMEbH5tfi < 80 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_NtMEbH5tfi);
		auto f_11_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 88; INDEX_NtMEbH5tfi < 88 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_NtMEbH5tfi);
		auto f_12_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 96; INDEX_NtMEbH5tfi < 96 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_NtMEbH5tfi);
		auto f_13_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 104; INDEX_NtMEbH5tfi < 104 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_NtMEbH5tfi);
		auto f_14_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 112; INDEX_NtMEbH5tfi < 112 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_NtMEbH5tfi);
		auto f_15_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 120; INDEX_NtMEbH5tfi < 120 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_NtMEbH5tfi);
		auto f_16_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 128; INDEX_NtMEbH5tfi < 128 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_NtMEbH5tfi);
		auto f_17_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 136; INDEX_NtMEbH5tfi < 136 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_NtMEbH5tfi);
		auto f_18_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 144; INDEX_NtMEbH5tfi < 144 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_NtMEbH5tfi);
		auto f_19_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 152; INDEX_NtMEbH5tfi < 152 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_NtMEbH5tfi);
		auto f_20_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 160; INDEX_NtMEbH5tfi < 160 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_NtMEbH5tfi);
		auto f_21_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 168; INDEX_NtMEbH5tfi < 168 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_NtMEbH5tfi);
		auto f_22_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 176; INDEX_NtMEbH5tfi < 176 + 8; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_NtMEbH5tfi);
		auto f_23_NtMEbH5tfi = [&] () {
			for (size_t INDEX_NtMEbH5tfi = 184; INDEX_NtMEbH5tfi < 184 + 16; ++INDEX_NtMEbH5tfi) {
				result_0srz1BM588[(INDEX_NtMEbH5tfi)] = intermediate_j8keT4oZLx[(INDEX_NtMEbH5tfi)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_NtMEbH5tfi);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_XIZQ5h8Kmj = new Bit_Mask(48,true);
		for (size_t i_eYshsfoOAx = 0; i_eYshsfoOAx < 24; ++i_eYshsfoOAx) {
			mask_ptr_XIZQ5h8Kmj->setBarrier(i_eYshsfoOAx);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_XIZQ5h8Kmj (mask_ptr_XIZQ5h8Kmj);
		self_barrier(boost_mask_ptr_XIZQ5h8Kmj);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_tkLjV4FGzh[(i)] = initial_p2nXoGUtlC[(i)] + 2;
			if (result_seq_tkLjV4FGzh[(i)] != result_0srz1BM588[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_0srz1BM588);
	std::free(result_seq_tkLjV4FGzh);
	std::free(initial_p2nXoGUtlC);
	std::free(intermediate_j8keT4oZLx);
	MPI_Finalize();
	return 0;


}

