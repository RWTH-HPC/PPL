/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/FlowCPU2ACC.hxx"
#include "includes/cuda_lib_FlowCPU2ACC.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_JLXTjYpslU;
	int32_t* result_seq_IvNygEV5ax;
	int32_t* initial_XfNfNiZWmd;
	int32_t* intermediate_cigTaotlR0;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_XfNfNiZWmd = Init_List(1, initial_XfNfNiZWmd, 200LL * 1LL);
	intermediate_cigTaotlR0 = Init_List(intermediate_cigTaotlR0, 200LL * 1LL);
	result_JLXTjYpslU = Init_List(result_JLXTjYpslU, 200LL * 1LL);
	result_seq_IvNygEV5ax = Init_List(result_seq_IvNygEV5ax, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 0; INDEX_UXojvzN02O < 0 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_UXojvzN02O);
		auto f_1_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 8; INDEX_UXojvzN02O < 8 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_UXojvzN02O);
		auto f_2_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 16; INDEX_UXojvzN02O < 16 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_UXojvzN02O);
		auto f_3_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 24; INDEX_UXojvzN02O < 24 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_UXojvzN02O);
		auto f_4_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 32; INDEX_UXojvzN02O < 32 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_UXojvzN02O);
		auto f_5_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 40; INDEX_UXojvzN02O < 40 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_UXojvzN02O);
		auto f_6_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 48; INDEX_UXojvzN02O < 48 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_UXojvzN02O);
		auto f_7_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 56; INDEX_UXojvzN02O < 56 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_UXojvzN02O);
		auto f_8_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 64; INDEX_UXojvzN02O < 64 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_UXojvzN02O);
		auto f_9_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 72; INDEX_UXojvzN02O < 72 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_UXojvzN02O);
		auto f_10_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 80; INDEX_UXojvzN02O < 80 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_UXojvzN02O);
		auto f_11_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 88; INDEX_UXojvzN02O < 88 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_UXojvzN02O);
		auto f_12_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 96; INDEX_UXojvzN02O < 96 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_UXojvzN02O);
		auto f_13_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 104; INDEX_UXojvzN02O < 104 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_UXojvzN02O);
		auto f_14_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 112; INDEX_UXojvzN02O < 112 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_UXojvzN02O);
		auto f_15_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 120; INDEX_UXojvzN02O < 120 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_UXojvzN02O);
		auto f_16_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 128; INDEX_UXojvzN02O < 128 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_UXojvzN02O);
		auto f_17_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 136; INDEX_UXojvzN02O < 136 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_UXojvzN02O);
		auto f_18_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 144; INDEX_UXojvzN02O < 144 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_UXojvzN02O);
		auto f_19_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 152; INDEX_UXojvzN02O < 152 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_UXojvzN02O);
		auto f_20_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 160; INDEX_UXojvzN02O < 160 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_UXojvzN02O);
		auto f_21_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 168; INDEX_UXojvzN02O < 168 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_UXojvzN02O);
		auto f_22_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 176; INDEX_UXojvzN02O < 176 + 8; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_UXojvzN02O);
		auto f_23_UXojvzN02O = [&] () {
			for (size_t INDEX_UXojvzN02O = 184; INDEX_UXojvzN02O < 184 + 16; ++INDEX_UXojvzN02O) {
				intermediate_cigTaotlR0[(INDEX_UXojvzN02O)] = initial_XfNfNiZWmd[(INDEX_UXojvzN02O)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_UXojvzN02O);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_BMvjJtsOVk = new Bit_Mask(48,true);
		for (size_t i_EBxhOaD1qB = 0; i_EBxhOaD1qB < 24; ++i_EBxhOaD1qB) {
			mask_ptr_BMvjJtsOVk->setBarrier(i_EBxhOaD1qB);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_BMvjJtsOVk (mask_ptr_BMvjJtsOVk);
		self_barrier(boost_mask_ptr_BMvjJtsOVk);
	}
	int32_t* GPU_Data_COveM9jW3G;
	if (rank == 0) {
		auto f_alloc_1pFWs3f0rE = [&] () {
			cuda_alloc_wrapper(&GPU_Data_COveM9jW3G, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_1pFWs3f0rE);
	}
	if (rank == 0) {
		auto f_movement_3a83ydW6vS = [&] () {
			cuda_host2device_wrapper(&GPU_Data_COveM9jW3G[0], &intermediate_cigTaotlR0[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_3a83ydW6vS);
	}
	int32_t* GPU_Data_kKuYXnazOC;
	if (rank == 0) {
		auto f_alloc_INeg0YHvjK = [&] () {
			cuda_alloc_wrapper(&GPU_Data_kKuYXnazOC, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_INeg0YHvjK);
	}
	if (rank == 0) {
		auto f_gpu_A1ROJRS0uZ = [&] () {
			cuda_wrapper_increment_A1ROJRS0uZ(GPU_Data_COveM9jW3G, GPU_Data_kKuYXnazOC );
		};
		getGPUPool()->at(1).addWork(f_gpu_A1ROJRS0uZ);
	}
	if (rank == 0) {
		auto f_movement_M3fxFmH4jD = [&] () {
			cuda_device2host_wrapper(&result_JLXTjYpslU[0], &GPU_Data_kKuYXnazOC[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_M3fxFmH4jD);
	}
	if (rank == 0) {
		auto f_dealloc_dINACDHSSI = [&] () {
			cuda_dealloc_wrapper(GPU_Data_kKuYXnazOC);
		};
		getGPUPool()->at(1).addWork(f_dealloc_dINACDHSSI);
	}
	if (rank == 0) {
		auto f_dealloc_gZJ0Ja1oKh = [&] () {
			cuda_dealloc_wrapper(GPU_Data_COveM9jW3G);
		};
		getGPUPool()->at(1).addWork(f_dealloc_gZJ0Ja1oKh);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_MpjS9CsY4A = new Bit_Mask(2,true);
		mask_ptr_MpjS9CsY4A->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_MpjS9CsY4A (mask_ptr_MpjS9CsY4A);
		cuda_sync_device(boost_mask_ptr_MpjS9CsY4A);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_IvNygEV5ax[(i)] = initial_XfNfNiZWmd[(i)] + 2;
			if (result_seq_IvNygEV5ax[(i)] != result_JLXTjYpslU[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_JLXTjYpslU);
	std::free(result_seq_IvNygEV5ax);
	std::free(initial_XfNfNiZWmd);
	std::free(intermediate_cigTaotlR0);
	MPI_Finalize();
	return 0;


}

