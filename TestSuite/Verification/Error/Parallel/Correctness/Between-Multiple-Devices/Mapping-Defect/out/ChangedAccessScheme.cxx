/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ChangedAccessScheme.hxx"
#include "includes/cuda_lib_ChangedAccessScheme.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_v3nskIEXqM;
	int32_t* result_seq_XmG9Gr4XtR;
	int32_t* initial_5yG0VXu57G;
	int32_t* intermediate_gtJ64WnWA9;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_5yG0VXu57G = Init_List(1, initial_5yG0VXu57G, 200LL * 1LL);
	intermediate_gtJ64WnWA9 = Init_List(0, intermediate_gtJ64WnWA9, 200LL * 1LL);
	result_v3nskIEXqM = Init_List(0, result_v3nskIEXqM, 200LL * 1LL);
	result_seq_XmG9Gr4XtR = Init_List(0, result_seq_XmG9Gr4XtR, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 0; INDEX_TYSb3o3eoZ < 0 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_TYSb3o3eoZ);
		auto f_1_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 8; INDEX_TYSb3o3eoZ < 8 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_TYSb3o3eoZ);
		auto f_2_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 16; INDEX_TYSb3o3eoZ < 16 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_TYSb3o3eoZ);
		auto f_3_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 24; INDEX_TYSb3o3eoZ < 24 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_TYSb3o3eoZ);
		auto f_4_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 32; INDEX_TYSb3o3eoZ < 32 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_TYSb3o3eoZ);
		auto f_5_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 40; INDEX_TYSb3o3eoZ < 40 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_TYSb3o3eoZ);
		auto f_6_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 48; INDEX_TYSb3o3eoZ < 48 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_TYSb3o3eoZ);
		auto f_7_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 56; INDEX_TYSb3o3eoZ < 56 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_TYSb3o3eoZ);
		auto f_8_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 64; INDEX_TYSb3o3eoZ < 64 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_TYSb3o3eoZ);
		auto f_9_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 72; INDEX_TYSb3o3eoZ < 72 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_TYSb3o3eoZ);
		auto f_10_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 80; INDEX_TYSb3o3eoZ < 80 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_TYSb3o3eoZ);
		auto f_11_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 88; INDEX_TYSb3o3eoZ < 88 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_TYSb3o3eoZ);
		auto f_12_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 96; INDEX_TYSb3o3eoZ < 96 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_TYSb3o3eoZ);
		auto f_13_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 104; INDEX_TYSb3o3eoZ < 104 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_TYSb3o3eoZ);
		auto f_14_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 112; INDEX_TYSb3o3eoZ < 112 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_TYSb3o3eoZ);
		auto f_15_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 120; INDEX_TYSb3o3eoZ < 120 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_TYSb3o3eoZ);
		auto f_16_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 128; INDEX_TYSb3o3eoZ < 128 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_TYSb3o3eoZ);
		auto f_17_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 136; INDEX_TYSb3o3eoZ < 136 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_TYSb3o3eoZ);
		auto f_18_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 144; INDEX_TYSb3o3eoZ < 144 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_TYSb3o3eoZ);
		auto f_19_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 152; INDEX_TYSb3o3eoZ < 152 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_TYSb3o3eoZ);
		auto f_20_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 160; INDEX_TYSb3o3eoZ < 160 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_TYSb3o3eoZ);
		auto f_21_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 168; INDEX_TYSb3o3eoZ < 168 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_TYSb3o3eoZ);
		auto f_22_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 176; INDEX_TYSb3o3eoZ < 176 + 8; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_TYSb3o3eoZ);
		auto f_23_TYSb3o3eoZ = [&] () {
			for (size_t INDEX_TYSb3o3eoZ = 184; INDEX_TYSb3o3eoZ < 184 + 16; ++INDEX_TYSb3o3eoZ) {
				intermediate_gtJ64WnWA9[(INDEX_TYSb3o3eoZ)] = initial_5yG0VXu57G[(INDEX_TYSb3o3eoZ)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_TYSb3o3eoZ);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_udvnTFQVlM = new Bit_Mask(48,true);
		for (size_t i_fcIVQx55a9 = 0; i_fcIVQx55a9 < 24; ++i_fcIVQx55a9) {
			mask_ptr_udvnTFQVlM->setBarrier(i_fcIVQx55a9);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_udvnTFQVlM (mask_ptr_udvnTFQVlM);
		self_barrier(boost_mask_ptr_udvnTFQVlM);
	}
	if (rank == 0) {
		auto f_0_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 0; INDEX_bt58WuU6CE < 0 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_bt58WuU6CE);
		auto f_1_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 4; INDEX_bt58WuU6CE < 4 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_bt58WuU6CE);
		auto f_2_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 8; INDEX_bt58WuU6CE < 8 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_bt58WuU6CE);
		auto f_3_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 12; INDEX_bt58WuU6CE < 12 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_bt58WuU6CE);
		auto f_4_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 16; INDEX_bt58WuU6CE < 16 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_bt58WuU6CE);
		auto f_5_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 20; INDEX_bt58WuU6CE < 20 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_bt58WuU6CE);
		auto f_6_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 24; INDEX_bt58WuU6CE < 24 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_bt58WuU6CE);
		auto f_7_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 28; INDEX_bt58WuU6CE < 28 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_bt58WuU6CE);
		auto f_8_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 32; INDEX_bt58WuU6CE < 32 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_bt58WuU6CE);
		auto f_9_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 36; INDEX_bt58WuU6CE < 36 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_bt58WuU6CE);
		auto f_10_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 40; INDEX_bt58WuU6CE < 40 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_bt58WuU6CE);
		auto f_11_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 44; INDEX_bt58WuU6CE < 44 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_bt58WuU6CE);
		auto f_12_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 48; INDEX_bt58WuU6CE < 48 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_bt58WuU6CE);
		auto f_13_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 52; INDEX_bt58WuU6CE < 52 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_bt58WuU6CE);
		auto f_14_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 56; INDEX_bt58WuU6CE < 56 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_bt58WuU6CE);
		auto f_15_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 60; INDEX_bt58WuU6CE < 60 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_bt58WuU6CE);
		auto f_16_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 64; INDEX_bt58WuU6CE < 64 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_bt58WuU6CE);
		auto f_17_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 68; INDEX_bt58WuU6CE < 68 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_bt58WuU6CE);
		auto f_18_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 72; INDEX_bt58WuU6CE < 72 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_bt58WuU6CE);
		auto f_19_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 76; INDEX_bt58WuU6CE < 76 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_bt58WuU6CE);
		auto f_20_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 80; INDEX_bt58WuU6CE < 80 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_bt58WuU6CE);
		auto f_21_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 84; INDEX_bt58WuU6CE < 84 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_bt58WuU6CE);
		auto f_22_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 88; INDEX_bt58WuU6CE < 88 + 4; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_bt58WuU6CE);
		auto f_23_bt58WuU6CE = [&] () {
			for (size_t INDEX_bt58WuU6CE = 92; INDEX_bt58WuU6CE < 92 + 8; ++INDEX_bt58WuU6CE) {
				result_v3nskIEXqM[(2 * INDEX_bt58WuU6CE)] = intermediate_gtJ64WnWA9[(2 * INDEX_bt58WuU6CE)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_bt58WuU6CE);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_s6A0qsKfpr = new Bit_Mask(48,true);
		for (size_t i_vUy3ge3YV6 = 0; i_vUy3ge3YV6 < 24; ++i_vUy3ge3YV6) {
			mask_ptr_s6A0qsKfpr->setBarrier(i_vUy3ge3YV6);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_s6A0qsKfpr (mask_ptr_s6A0qsKfpr);
		self_barrier(boost_mask_ptr_s6A0qsKfpr);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_XmG9Gr4XtR[(i)] = 0;
			if (i % 2 == 0) {
				result_seq_XmG9Gr4XtR[(i)] = 3;
			}
			if (result_seq_XmG9Gr4XtR[(i)] != result_v3nskIEXqM[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_v3nskIEXqM);
	std::free(result_seq_XmG9Gr4XtR);
	std::free(initial_5yG0VXu57G);
	std::free(intermediate_gtJ64WnWA9);
	MPI_Finalize();
	return 0;


}

