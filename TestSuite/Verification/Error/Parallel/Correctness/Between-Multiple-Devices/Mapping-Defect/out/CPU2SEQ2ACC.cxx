/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/CPU2SEQ2ACC.hxx"
#include "includes/cuda_lib_CPU2SEQ2ACC.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* result_lavXINJeC1;
	int32_t* result_seq_9WqePa3dlF;
	int32_t* initial_cEMVeUKqSZ;
	int32_t* intermediate_PCMJVl88HJ;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	initial_cEMVeUKqSZ = Init_List(1, initial_cEMVeUKqSZ, 200LL * 1LL);
	intermediate_PCMJVl88HJ = Init_List(intermediate_PCMJVl88HJ, 200LL * 1LL);
	result_lavXINJeC1 = Init_List(result_lavXINJeC1, 200LL * 1LL);
	result_seq_9WqePa3dlF = Init_List(result_seq_9WqePa3dlF, 200LL * 1LL);
	if (rank == 0) {
		auto f_0_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 0; INDEX_vMxj3Q4j7V < 0 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(0).addWork(f_0_vMxj3Q4j7V);
		auto f_1_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 8; INDEX_vMxj3Q4j7V < 8 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(1).addWork(f_1_vMxj3Q4j7V);
		auto f_2_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 16; INDEX_vMxj3Q4j7V < 16 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(2).addWork(f_2_vMxj3Q4j7V);
		auto f_3_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 24; INDEX_vMxj3Q4j7V < 24 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(3).addWork(f_3_vMxj3Q4j7V);
		auto f_4_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 32; INDEX_vMxj3Q4j7V < 32 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(4).addWork(f_4_vMxj3Q4j7V);
		auto f_5_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 40; INDEX_vMxj3Q4j7V < 40 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(5).addWork(f_5_vMxj3Q4j7V);
		auto f_6_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 48; INDEX_vMxj3Q4j7V < 48 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(6).addWork(f_6_vMxj3Q4j7V);
		auto f_7_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 56; INDEX_vMxj3Q4j7V < 56 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(7).addWork(f_7_vMxj3Q4j7V);
		auto f_8_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 64; INDEX_vMxj3Q4j7V < 64 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(8).addWork(f_8_vMxj3Q4j7V);
		auto f_9_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 72; INDEX_vMxj3Q4j7V < 72 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(9).addWork(f_9_vMxj3Q4j7V);
		auto f_10_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 80; INDEX_vMxj3Q4j7V < 80 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(10).addWork(f_10_vMxj3Q4j7V);
		auto f_11_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 88; INDEX_vMxj3Q4j7V < 88 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(11).addWork(f_11_vMxj3Q4j7V);
		auto f_12_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 96; INDEX_vMxj3Q4j7V < 96 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(12).addWork(f_12_vMxj3Q4j7V);
		auto f_13_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 104; INDEX_vMxj3Q4j7V < 104 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(13).addWork(f_13_vMxj3Q4j7V);
		auto f_14_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 112; INDEX_vMxj3Q4j7V < 112 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(14).addWork(f_14_vMxj3Q4j7V);
		auto f_15_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 120; INDEX_vMxj3Q4j7V < 120 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(15).addWork(f_15_vMxj3Q4j7V);
		auto f_16_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 128; INDEX_vMxj3Q4j7V < 128 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(16).addWork(f_16_vMxj3Q4j7V);
		auto f_17_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 136; INDEX_vMxj3Q4j7V < 136 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(17).addWork(f_17_vMxj3Q4j7V);
		auto f_18_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 144; INDEX_vMxj3Q4j7V < 144 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(18).addWork(f_18_vMxj3Q4j7V);
		auto f_19_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 152; INDEX_vMxj3Q4j7V < 152 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(19).addWork(f_19_vMxj3Q4j7V);
		auto f_20_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 160; INDEX_vMxj3Q4j7V < 160 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(20).addWork(f_20_vMxj3Q4j7V);
		auto f_21_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 168; INDEX_vMxj3Q4j7V < 168 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(21).addWork(f_21_vMxj3Q4j7V);
		auto f_22_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 176; INDEX_vMxj3Q4j7V < 176 + 8; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(22).addWork(f_22_vMxj3Q4j7V);
		auto f_23_vMxj3Q4j7V = [&] () {
			for (size_t INDEX_vMxj3Q4j7V = 184; INDEX_vMxj3Q4j7V < 184 + 16; ++INDEX_vMxj3Q4j7V) {
				intermediate_PCMJVl88HJ[(INDEX_vMxj3Q4j7V)] = initial_cEMVeUKqSZ[(INDEX_vMxj3Q4j7V)] + 1;
			}
		};
		getPool()->at(23).addWork(f_23_vMxj3Q4j7V);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_6L6WKcqmNq = new Bit_Mask(48,true);
		for (size_t i_QBRjg90T2F = 0; i_QBRjg90T2F < 24; ++i_QBRjg90T2F) {
			mask_ptr_6L6WKcqmNq->setBarrier(i_QBRjg90T2F);
		}
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_6L6WKcqmNq (mask_ptr_6L6WKcqmNq);
		self_barrier(boost_mask_ptr_6L6WKcqmNq);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			intermediate_PCMJVl88HJ[(i)]++;
		}
	}
	int32_t* GPU_Data_WVy3npCoAI;
	if (rank == 0) {
		auto f_alloc_W13Sn45qA9 = [&] () {
			cuda_alloc_wrapper(&GPU_Data_WVy3npCoAI, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_W13Sn45qA9);
	}
	if (rank == 0) {
		auto f_movement_L1eeNa4QVA = [&] () {
			cuda_host2device_wrapper(&GPU_Data_WVy3npCoAI[0], &intermediate_PCMJVl88HJ[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_L1eeNa4QVA);
	}
	int32_t* GPU_Data_ufjdyhH4C4;
	if (rank == 0) {
		auto f_alloc_0oUqrzEJXx = [&] () {
			cuda_alloc_wrapper(&GPU_Data_ufjdyhH4C4, sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_alloc_0oUqrzEJXx);
	}
	if (rank == 0) {
		auto f_gpu_88tU14gDpz = [&] () {
			cuda_wrapper_increment_88tU14gDpz(GPU_Data_WVy3npCoAI, GPU_Data_ufjdyhH4C4 );
		};
		getGPUPool()->at(1).addWork(f_gpu_88tU14gDpz);
	}
	if (rank == 0) {
		auto f_dealloc_EZelgjzToz = [&] () {
			cuda_dealloc_wrapper(GPU_Data_WVy3npCoAI);
		};
		getGPUPool()->at(1).addWork(f_dealloc_EZelgjzToz);
	}
	if (rank == 0) {
		auto f_movement_uLphKbShbu = [&] () {
			cuda_device2host_wrapper(&result_lavXINJeC1[0], &GPU_Data_ufjdyhH4C4[0], sizeof(int32_t) * 200);
		};
		getGPUPool()->at(1).addWork(f_movement_uLphKbShbu);
	}
	if (rank == 0) {
		auto f_dealloc_o7qz4saQ8b = [&] () {
			cuda_dealloc_wrapper(GPU_Data_ufjdyhH4C4);
		};
		getGPUPool()->at(1).addWork(f_dealloc_o7qz4saQ8b);
	}
	if (rank == 0) {
		Bit_Mask * mask_ptr_vbcubX5s2h = new Bit_Mask(2,true);
		mask_ptr_vbcubX5s2h->setBarrier(1);
		boost::shared_ptr<Bit_Mask>boost_mask_ptr_vbcubX5s2h (mask_ptr_vbcubX5s2h);
		cuda_sync_device(boost_mask_ptr_vbcubX5s2h);
	}
	if (rank == 0) {
		for ( int32_t i = 0; i < 200; i++ ) {
			result_seq_9WqePa3dlF[(i)] = initial_cEMVeUKqSZ[(i)] + 3;
			if (result_seq_9WqePa3dlF[(i)] != result_lavXINJeC1[(i)]) {
				print("value at element ", i, " is wrong!");
				MPI_Abort(MPI_COMM_WORLD, 1);
			}
		}
	}
	finishExecution();
	finishGPUExecution();
	std::free(result_lavXINJeC1);
	std::free(result_seq_9WqePa3dlF);
	std::free(initial_cEMVeUKqSZ);
	std::free(intermediate_PCMJVl88HJ);
	MPI_Finalize();
	return 0;


}

