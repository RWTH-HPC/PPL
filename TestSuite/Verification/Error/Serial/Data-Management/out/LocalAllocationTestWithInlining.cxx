/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/LocalAllocationTestWithInlining.hxx"
#include "includes/cuda_lib_LocalAllocationTestWithInlining.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/



/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	int32_t* input_Ox09C3VTsJ;
	int32_t a_6MZT9qJBpx;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	input_Ox09C3VTsJ = Init_List(input_Ox09C3VTsJ, 10LL * 1LL);
	if (rank == 0) {
		int32_t* input_tP4SzmClBz = copy(input_Ox09C3VTsJ, 1LL * 10LL);
		int32_t inlineFunctionValue_EZlxCLg0Vv_tP4SzmClBz;
		int32_t a_tP4SzmClBz;
		int32_t* b_tP4SzmClBz;
		int32_t* c_tP4SzmClBz;
		int32_t* d_tP4SzmClBz;
		a_tP4SzmClBz = 10;
		b_tP4SzmClBz = Init_List(b_tP4SzmClBz, 10LL * 1LL);
		int32_t B_tP4SzmClBz[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
		c_tP4SzmClBz = Init_List(c_tP4SzmClBz, 10LL * 9LL * 1LL);
		int32_t C_tP4SzmClBz[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		d_tP4SzmClBz = Init_List(d_tP4SzmClBz, 10LL * 9LL * 8LL * 1LL);
		int32_t D_tP4SzmClBz[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		inlineFunctionValue_EZlxCLg0Vv_tP4SzmClBz = 0;
		goto STOP_LABEL_tP4SzmClBz;
		STOP_LABEL_tP4SzmClBz:
		a_6MZT9qJBpx = inlineFunctionValue_EZlxCLg0Vv_tP4SzmClBz;
		std::free(b_tP4SzmClBz);
		std::free(c_tP4SzmClBz);
		std::free(d_tP4SzmClBz);
	}
	finishExecution();
	finishGPUExecution();
	std::free(input_Ox09C3VTsJ);
	MPI_Finalize();
	return 0;


}

