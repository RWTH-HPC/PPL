/*********************************************************************/
/*        This is a generated C++ source file.                       */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/

#include <vector>
#include <cstdint>
#include <string>
#include <limits>
#include <iostream>
#include "includes/Patternlib.hxx"
#include "includes/PThreadsLib.hxx"
#include "includes/ArrayExpressionTest.hxx"
#include "includes/cuda_lib_ArrayExpressionTest.hxx"
#include "mpi.h"
#include "includes/cuda_pool_lib.hxx"
#include "math.h"







/*********************************************************************/
/*        Global Variables                                           */
/*        Generated by PatternDSL .                                  */
/*********************************************************************/

int32_t I[] = {0, 1, 2, 3, 4, 5, 6, 7 };


/*********************************************************************/
/*        Function Declarations                                      */
/*        Generated by PatternDSL.                                   */
/*********************************************************************/



int main(int argc, char** argv) {

	bool access_yi0G2FXCYF;
	bool* T_oLeBN7rLns;
	int32_t size_gIRH17uDNU;
	float* F_CabT9Iexbk;
	bool has_iK1TqVPExI;
	int32_t element_qzOkpcQXrL;
	int NUM_CORES;
	int NUM_GPUS;

	int rank, nprocs;
	MPI_Status Stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	if (rank == 0 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	} else 	if (rank == 1 ) {
		NUM_CORES = 48;
		NUM_GPUS = 2;
	}
	std::vector<Thread> pool(NUM_CORES);
	setPool(&pool);
	std::vector<Thread> gpu_pool(NUM_GPUS);
	setGPUPool(&gpu_pool);
	startExecution();
	startGPUExecution();
	F_CabT9Iexbk = Init_List(1.5, F_CabT9Iexbk, 5LL * 1LL);
	T_oLeBN7rLns = Init_List(T_oLeBN7rLns, 5LL * 5LL * 1LL);
	if (rank == 0) {
		int32_t M[] = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7 };
		size_gIRH17uDNU = 5;
		element_qzOkpcQXrL = I[(2 + 2)];
		has_iK1TqVPExI = Element_Exists_In_Vector(4, I, 1LL * 8LL);
		access_yi0G2FXCYF = T_oLeBN7rLns[5LL * (2 * 2) + (2 + 2)];
		Set_Partial_Array(F_CabT9Iexbk, &f_read("test.txt", 1LL * 5LL)[0], 1LL * 5LL);
		print("Hello World! ", element_qzOkpcQXrL);
		array_write("test2.txt", M, 1LL * 2 * 8);
		write("test3.txt", "start", 12);
	}
	finishExecution();
	finishGPUExecution();
	std::free(T_oLeBN7rLns);
	std::free(F_CabT9Iexbk);
	MPI_Finalize();
	return 0;


}

